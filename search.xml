<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Android四大组件：BroadcastReceiver</title>
      <link href="2020/10/23/Android%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%EF%BC%9ABroadcastReceiver/"/>
      <url>2020/10/23/Android%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%EF%BC%9ABroadcastReceiver/</url>
      
        <content type="html"><![CDATA[<p><strong>1. 定义</strong></p><blockquote><p>BroadcastReceiver即 广播，是一个全局的监听器，属于Android四大组件之一<br>广播分为两个角色：广播发送者、广播接收者</p></blockquote><p><strong>2. 作用</strong></p><blockquote><p>监听 / 接收 应用 App 发出的广播消息，并 做出响应</p></blockquote><p><strong>3. 应用场景</strong></p><blockquote><ul><li>Android不同组件间的通信（含 ：应用内 / 不同应用之间）</li><li>多线程通信</li><li>与 Android 系统在特定情况下的通信（如：电话呼入时、网络可用时）</li></ul></blockquote><p><strong>4. 实现原理</strong></p><p><img src="https://img-blog.csdnimg.cn/20201020195205200.png#pic_center" alt="在这里插入图片描述"></p><p>​—</p><p><strong>5. 使用流程</strong></p><p><strong>5.1 自定义广播接收者BroadcastReceiver</strong></p><ul><li>继承BroadcastReceivre基类</li><li>必须复写抽象方法onReceive()方法</li></ul><blockquote><p>1.广播接收器接收到相应广播后，会自动回调 onReceive() 方法<br>2.一般情况下，onReceive方法会涉及 与 其他组件之间的交互，如发送Notification、启动Service等<br>3.默认情况下，广播接收器运行在 UI 线程，因此，onReceive()方法不能执行耗时操作，否则将导致ANR</p></blockquote><ul><li>代码范例</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承BroadcastReceivre基类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mBroadcastReceiver</span> <span class="title">extends</span> <span class="title">BroadcastReceiver</span> &#123;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 复写onReceive()方法</span></span><br><span class="line">  <span class="comment">// 接收到广播后，则自动调用该方法</span></span><br><span class="line">  @Override</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//写入接收广播后的操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>5.2 广播接收器注册</strong></p><p>注册的方式分为两种：<strong>静态注册</strong>、<strong>动态注册</strong></p><p><strong>5.2.1 静态注册</strong></p><ul><li>注册方式：在AndroidManifest.xml里通过<receive>标签声明</li><li>属性说明：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;receiver </span><br><span class="line">    android:enabled=[<span class="string">&quot;true&quot;</span> | <span class="string">&quot;false&quot;</span>]</span><br><span class="line"><span class="comment">//此broadcastReceiver能否接收其他App的发出的广播</span></span><br><span class="line"><span class="comment">//默认值是由receiver中有无intent-filter决定的：如果有intent-filter，默认值为true，否则为false</span></span><br><span class="line">    android:exported=[<span class="string">&quot;true&quot;</span> | <span class="string">&quot;false&quot;</span>]</span><br><span class="line">    android:icon=<span class="string">&quot;drawable resource&quot;</span></span><br><span class="line">    android:label=<span class="string">&quot;string resource&quot;</span></span><br><span class="line"><span class="comment">//继承BroadcastReceiver子类的类名</span></span><br><span class="line">    android:name=<span class="string">&quot;.mBroadcastReceiver&quot;</span></span><br><span class="line"><span class="comment">//具有相应权限的广播发送者发送的广播才能被此BroadcastReceiver所接收；</span></span><br><span class="line">    android:permission=<span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="comment">//BroadcastReceiver运行所处的进程</span></span><br><span class="line"><span class="comment">//默认为app的进程，可以指定独立的进程</span></span><br><span class="line"><span class="comment">//注：Android四大基本组件都可以通过此属性指定自己的独立进程</span></span><br><span class="line">    android:process=<span class="string">&quot;string&quot;</span> &gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于指定此广播接收器将接收的广播类型</span></span><br><span class="line"><span class="comment">//本示例中给出的是用于接收网络状态改变时发出的广播</span></span><br><span class="line"> &lt;intent-filter&gt;</span><br><span class="line">&lt;action android:name=<span class="string">&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;</span> /&gt;</span><br><span class="line">    &lt;/intent-filter&gt;</span><br><span class="line">&lt;/receiver&gt;</span><br></pre></td></tr></table></figure><ul><li>注册示例</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;receiver </span><br><span class="line">    <span class="comment">//此广播接收者类是mBroadcastReceiver</span></span><br><span class="line">    android:name=<span class="string">&quot;.mBroadcastReceiver&quot;</span> &gt;</span><br><span class="line">    <span class="comment">//用于接收网络状态改变时发出的广播</span></span><br><span class="line">    &lt;intent-filter&gt;</span><br><span class="line">        &lt;action android:name=<span class="string">&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;</span> /&gt;</span><br><span class="line">    &lt;/intent-filter&gt;</span><br><span class="line">&lt;/receiver&gt;</span><br></pre></td></tr></table></figure><p>当此 App首次启动时，系统会自动实例化mBroadcastReceiver类，并注册到系统中。</p><p><strong>5.2.2 动态注册</strong></p><ul><li>注册方式：在代码中调用Context.registerReceiver（）方法</li><li>具体代码如下：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 选择在Activity生命周期方法中的onResume()中注册</span></span><br><span class="line">@Override</span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span></span>&#123;</span><br><span class="line">      super.onResume();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 实例化BroadcastReceiver子类 &amp;  IntentFilter</span></span><br><span class="line">     mBroadcastReceiver mBroadcastReceiver = <span class="keyword">new</span> mBroadcastReceiver();</span><br><span class="line">     IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 设置接收广播的类型</span></span><br><span class="line">    intentFilter.addAction(android.net.conn.CONNECTIVITY_CHANGE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 动态注册：调用Context的registerReceiver（）方法</span></span><br><span class="line">     registerReceiver(mBroadcastReceiver, intentFilter);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册广播后，要在相应位置记得销毁广播</span></span><br><span class="line"><span class="comment">// 即在onPause() 中unregisterReceiver(mBroadcastReceiver)</span></span><br><span class="line"><span class="comment">// 当此Activity实例化时，会动态将MyBroadcastReceiver注册到系统中</span></span><br><span class="line"><span class="comment">// 当此Activity销毁时，动态注册的MyBroadcastReceiver将不再接收到相应的广播。</span></span><br><span class="line"> @Override</span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     super.onPause();</span><br><span class="line">      <span class="comment">//销毁在onResume()方法中的广播</span></span><br><span class="line">     unregisterReceiver(mBroadcastReceiver);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特别注意</strong></p><ul><li>动态广播最好在Activity 的 onResume()注册、onPause()注销。</li><li>对于动态广播，有注册就必然得有注销，否则会导致内存泄露。</li></ul><p><strong>5.2.3 两种注册方式的区别</strong></p><p><img src="https://img-blog.csdnimg.cn/20201020200118345.png#pic_center" alt="在这里插入图片描述"><br><strong>5.3 广播发送者向AMS发送广播</strong></p><p><strong>5.3.1 广播的发送</strong></p><blockquote><ul><li>广播 是 用”意图（Intent）“标识</li><li>定义广播的本质 = 定义广播所具备的“意图（Intent）”</li><li>广播发送 = 广播发送者 将此广播的“意图（Intent）”通过sendBroadcast（）方法发送出去</li></ul></blockquote><p><strong>5.3.2 广播的类型</strong></p><blockquote><p>广播的类型主要分为5类：</p><ul><li>普通广播（Normal Broadcast）</li><li>系统广播（System Broadcast）</li><li>有序广播（Ordered Broadcast）</li><li>粘性广播（Sticky Broadcast）</li><li>App应用内广播（Local Broadcast）</li></ul></blockquote><p><strong>1. 普通广播（Normal Broadcast）</strong></p><p>即 开发者自身定义 intent的广播（最常用）。发送广播使用如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line"><span class="comment">//对应BroadcastReceiver中intentFilter的action</span></span><br><span class="line">intent.setAction(BROADCAST_ACTION);</span><br><span class="line"><span class="comment">//发送广播</span></span><br><span class="line">sendBroadcast(intent);</span><br></pre></td></tr></table></figure><ul><li>若被注册了的广播接收者中注册时intentFilter的action与上述匹配，则会接收此广播（即进行回调onReceive()）。如下mBroadcastReceiver则会接收上述广播</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;receiver </span><br><span class="line">    <span class="comment">//此广播接收者类是mBroadcastReceiver</span></span><br><span class="line">    android:name=<span class="string">&quot;.mBroadcastReceiver&quot;</span> &gt;</span><br><span class="line">    <span class="comment">//用于接收网络状态改变时发出的广播</span></span><br><span class="line">    &lt;intent-filter&gt;</span><br><span class="line">        &lt;action android:name=<span class="string">&quot;BROADCAST_ACTION&quot;</span> /&gt;</span><br><span class="line">    &lt;/intent-filter&gt;</span><br><span class="line">&lt;/receiver&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>若发送广播有相应权限，那么广播接收者也需要相应权限</strong></li></ul><p>​</p><p><strong>2. 系统广播（System Broadcast）</strong></p><p><strong>3.有序广播（Ordered Broadcast）</strong></p><p><strong>4.App应用内广播（Local Broadcast）</strong></p><hr><p><strong>2.3.4.类型的广播用法详见：</strong></p><p> <a href="https://www.jianshu.com/p/ca3d87a4cdf3">Android四大组件：BroadcastReceiver史上最全面解析</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/10/22/hello-world/"/>
      <url>2020/10/22/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
