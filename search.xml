<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>GIT开发学习——fatal: bad revision &#39;7450ad67&#39;</title>
      <link href="2022/08/08/GIT%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94fatal-bad-revision-7450ad67/"/>
      <url>2022/08/08/GIT%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94fatal-bad-revision-7450ad67/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="git仓库下拉了好几个分支，分别是开发分支A，测试分支B。"><a href="#git仓库下拉了好几个分支，分别是开发分支A，测试分支B。" class="headerlink" title="git仓库下拉了好几个分支，分别是开发分支A，测试分支B。"></a>git仓库下拉了好几个分支，分别是开发分支A，测试分支B。</h3><h5 id="现在在开发分支A开发完某个功能，commit到git上，commit的id为“7450ad67”；"><a href="#现在在开发分支A开发完某个功能，commit到git上，commit的id为“7450ad67”；" class="headerlink" title="现在在开发分支A开发完某个功能，commit到git上，commit的id为“7450ad67”；"></a>现在在开发分支A开发完某个功能，commit到git上，commit的id为“7450ad67”；</h5><h5 id="现在想把这次提交合并到B分支上打包给测试人员。"><a href="#现在想把这次提交合并到B分支上打包给测试人员。" class="headerlink" title="现在想把这次提交合并到B分支上打包给测试人员。"></a>现在想把这次提交合并到B分支上打包给测试人员。</h5></blockquote><p>假如本地只有B分支的代码，直接在B分支上使用一下命令：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick <span class="number">7450</span>ad67</span><br><span class="line"></span><br><span class="line"><span class="comment">//则报错：fatal: bad revision &#x27;7450ad67&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>原因是本地B分支没有A分支的代码，应先拉取A分支的代码，步骤如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、git fetch --all</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、git cherry-pick <span class="number">7450</span>ad67</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、git push</span><br></pre></td></tr></table></figure><p>其实就是先更新，在使用cherry-pick进行合并。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GIT开发学习——git pull失败 Invocation failed Unexpected end of file from server</title>
      <link href="2022/07/12/GIT%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94git-pull%E5%A4%B1%E8%B4%A5-Invocation-failed-Unexpected-end-of-file-from-server/"/>
      <url>2022/07/12/GIT%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94git-pull%E5%A4%B1%E8%B4%A5-Invocation-failed-Unexpected-end-of-file-from-server/</url>
      
        <content type="html"><![CDATA[<p><strong>错误如下</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Update failed</span><br><span class="line"></span><br><span class="line">Invocation failed Unexpected end of file from server</span><br><span class="line"></span><br><span class="line">java.lang.RuntimeException: Invocation failed Unexpected end of file from server</span><br><span class="line"></span><br><span class="line">at org.jetbrains.git4idea.GitAppUtil.sendXmlRequest(GitAppUtil.java:<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">at org.jetbrains.git4idea.http.GitAskPassApp.main(GitAskPassApp.java:<span class="number">58</span>)</span><br><span class="line"></span><br><span class="line">Caused by: java.net.SocketException: Unexpected end of file from server</span><br><span class="line"></span><br><span class="line">at java.base/sun.net.www.http.HttpClient.parseHTTPHeader(HttpClient.java:<span class="number">866</span>)</span><br><span class="line"></span><br><span class="line">at java.base/sun.net.www.http.HttpClient.parseHTTP(HttpClient.java:<span class="number">689</span>)</span><br><span class="line"></span><br><span class="line">at java.base/sun.net.www.http.HttpClient.parseHTTPHeader(HttpClient.java:<span class="number">863</span>)</span><br><span class="line"></span><br><span class="line">at java.base/sun.net.www.http.HttpClient.parseHTTP(HttpClient.java:<span class="number">689</span>)</span><br><span class="line"></span><br><span class="line">at java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:<span class="number">1615</span>)</span><br><span class="line"></span><br><span class="line">at java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:<span class="number">1520</span>)</span><br><span class="line"></span><br><span class="line">at org.apache.xmlrpc.DefaultXmlRpcTransport.sendXmlRpc(DefaultXmlRpcTransport... (show balloon)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>原因</strong>：没有勾选Use credential helper（使用凭证），把红框勾上就ok了</p><p><img src="https://img-blog.csdnimg.cn/6c4c160641fd476c9096de8a053d2618.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GIT开发学习——IDEA Smart Checkout和Force Checkout区别</title>
      <link href="2022/07/12/GIT%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94IDEA-Smart-Checkout%E5%92%8CForce-Checkout%E5%8C%BA%E5%88%AB/"/>
      <url>2022/07/12/GIT%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94IDEA-Smart-Checkout%E5%92%8CForce-Checkout%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>IDEA 当在一个分支A上<strong>修改了内容没有提交</strong>，然后<strong>切换</strong>到另一个分支B时，可能会发生冲突。<br>这时IDEA会弹出提示，问你要选择<strong>Smart Checkout</strong>还是<strong>Force Checkout</strong>:</p></blockquote><p>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/6aa19ffaffbe485ca1e24eb88db30d1d.png#pic_center">https://img-blog.csdnimg.cn/6aa19ffaffbe485ca1e24eb88db30d1d.png#pic_center</a> =300x300)</p><p>选择<strong>Smart Checkout</strong>:</p><blockquote><p>IDEA会先执行stash命令，贮存这些未提交的修改，然后checkout 到分支B，在切换到分支B后，unstash 这些修改，所以A分支本地的这些修改会带到B分支上。</p></blockquote><p>选择<strong>Force Checkout</strong>：</p><blockquote><p>不会保留你的修改，切到另一个分支内容就消失了，且切回来原来分支也找不回，白写了。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GIT开发学习——创建tag标签命令</title>
      <link href="2022/07/12/GIT%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E5%88%9B%E5%BB%BAtag%E6%A0%87%E7%AD%BE%E5%91%BD%E4%BB%A4/"/>
      <url>2022/07/12/GIT%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E5%88%9B%E5%BB%BAtag%E6%A0%87%E7%AD%BE%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>@[toc]</p><hr><h1 id="1、列出标签"><a href="#1、列出标签" class="headerlink" title="1、列出标签"></a>1、列出标签</h1><blockquote><p>Git 中列出已有的标签是非常简单直观的。 只需要输入 git tag：</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git tag</span><br><span class="line">v0<span class="number">.1</span></span><br><span class="line">v1<span class="number">.3</span></span><br></pre></td></tr></table></figure><hr><h1 id="2、创建标签"><a href="#2、创建标签" class="headerlink" title="2、创建标签"></a>2、创建标签</h1><h2 id="2-1、附注标签（annotated）"><a href="#2-1、附注标签（annotated）" class="headerlink" title="2.1、附注标签（annotated）"></a>2.1、附注标签（annotated）</h2><blockquote><p><strong>附注标签</strong>是存储在 Git 数据库中的一个完整对象。 它们是可以被校验的；<br>其中包含打标签者的名字、电子邮件地址、日期时间；还有一个标签信息；并且可以使用 GNU Privacy Guard （GPG）签名与验证。</p></blockquote><blockquote><p>通常建议创建<strong>附注标签</strong>，这样你可以拥有以上所有信息。</p></blockquote><blockquote><p>在 Git 中创建一个<strong>附注标签</strong>是很简单的。 最简单的方式是当你在运行 tag 命令时指定 -a 选项</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a v1<span class="number">.4</span> -m <span class="string">&quot;my version 1.4&quot;</span></span><br><span class="line">$ git tag</span><br><span class="line">v0<span class="number">.1</span></span><br><span class="line">v1<span class="number">.3</span></span><br><span class="line">v1<span class="number">.4</span></span><br></pre></td></tr></table></figure><blockquote><p>使用 git show 命令可以看到标签信息与对应的提交信息</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git show v1<span class="number">.4</span></span><br><span class="line">tag v1<span class="number">.4</span></span><br><span class="line">Tagger: Ben Straub &lt;ben@straub.cc&gt;</span><br><span class="line">Date:   Sat May <span class="number">3</span> <span class="number">20</span>:<span class="number">19</span>:<span class="number">12</span> <span class="number">2014</span> <span class="number">-0700</span></span><br><span class="line"> </span><br><span class="line">my version <span class="number">1.4</span></span><br><span class="line"> </span><br><span class="line">commit ca82a6dff817ec66f44342007202690a93763949</span><br><span class="line">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</span><br><span class="line">Date:   Mon Mar <span class="number">17</span> <span class="number">21</span>:<span class="number">52</span>:<span class="number">11</span> <span class="number">2008</span> <span class="number">-0700</span></span><br><span class="line"> </span><br><span class="line">    changed the version number</span><br></pre></td></tr></table></figure><h2 id="2-2、轻量标签（lightweight）"><a href="#2-2、轻量标签（lightweight）" class="headerlink" title="2.2、轻量标签（lightweight）"></a>2.2、轻量标签（lightweight）</h2><blockquote><p><strong>轻量标签</strong>很像一个不会改变的分支——它只是一个特定提交的引用。<br><strong>轻量标签</strong>本质上是将提交校验和存储到一个文件中——没有保存任何其他信息。</p></blockquote><blockquote><p>创建<strong>轻量标签</strong>，不需要使用 -a、-s 或 -m 选项，只需要提供标签名字：</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git tag v1<span class="number">.4</span>-lw</span><br><span class="line">$ git tag</span><br><span class="line">v0<span class="number">.1</span></span><br><span class="line">v1<span class="number">.3</span></span><br><span class="line">v1<span class="number">.4</span></span><br><span class="line">v1<span class="number">.4</span>-lw</span><br><span class="line">v1<span class="number">.5</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git show v1<span class="number">.4</span>-lw</span><br><span class="line">commit ca82a6dff817ec66f44342007202690a93763949</span><br><span class="line">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</span><br><span class="line">Date:   Mon Mar <span class="number">17</span> <span class="number">21</span>:<span class="number">52</span>:<span class="number">11</span> <span class="number">2008</span> <span class="number">-0700</span></span><br><span class="line"> </span><br><span class="line">    changed the version number</span><br></pre></td></tr></table></figure><h2 id="2-3、后期打标签"><a href="#2-3、后期打标签" class="headerlink" title="2.3、后期打标签"></a>2.3、后期打标签</h2><p>过去的提交打标签。 假设提交历史是这样的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git log --pretty=oneline</span><br><span class="line"><span class="number">15027957951</span>b64cf874c3557a0f3547bd83b3ff6 Merge branch <span class="string">&#x27;experiment&#x27;</span></span><br><span class="line">a6b4c97498bd301d84096da251c98a07c7723e65 beginning write support</span><br><span class="line"><span class="number">0</span>d52aaab4479697da7686c15f77a3d64d9165190 one more thing</span><br><span class="line"><span class="number">6</span>d52a271eda8725415634dd79daabbc4d9b6008e Merge branch <span class="string">&#x27;experiment&#x27;</span></span><br><span class="line"><span class="number">0</span>b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit function</span><br><span class="line"><span class="number">4682</span>c3261057305bdd616e23b64b0857d832627b added a todo file</span><br><span class="line"><span class="number">166</span>ae0c4d3f420721acbb115cc33848dfcc2121a started write support</span><br><span class="line"><span class="number">9</span>fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile</span><br><span class="line"><span class="number">964</span>f16d36dfccde844893cac5b347e7b3d44abbc commit the todo</span><br><span class="line"><span class="number">8</span>a5cbc430f1a9c3d00faaeffd07798508422908a updated readme</span><br></pre></td></tr></table></figure><p>现在，假设在 v1.2 时你忘记给项目打标签，也就是在 “updated rakefile” 提交。 你可以在之后补上标签。 要在那个提交上打标签，你需要在命令的末尾指定提交的校验和（或部分校验和）：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a v1<span class="number">.2</span> <span class="number">9</span>fceb02</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ git tag</span><br><span class="line">v0<span class="number">.1</span></span><br><span class="line">v1<span class="number">.2</span></span><br><span class="line">v1<span class="number">.3</span></span><br><span class="line">v1<span class="number">.4</span></span><br><span class="line">v1<span class="number">.4</span>-lw</span><br><span class="line">v1<span class="number">.5</span></span><br><span class="line"> </span><br><span class="line">$ git show v1<span class="number">.2</span></span><br><span class="line">tag v1<span class="number">.2</span></span><br><span class="line">Tagger: Scott Chacon &lt;schacon@gee-mail.com&gt;</span><br><span class="line">Date:   Mon Feb <span class="number">9</span> <span class="number">15</span>:<span class="number">32</span>:<span class="number">16</span> <span class="number">2009</span> <span class="number">-0800</span></span><br><span class="line"> </span><br><span class="line">version <span class="number">1.2</span></span><br><span class="line">commit <span class="number">9</span>fceb02d0ae598e95dc970b74767f19372d61af8</span><br><span class="line">Author: Magnus Chacon &lt;mchacon@gee-mail.com&gt;</span><br><span class="line">Date:   Sun Apr <span class="number">27</span> <span class="number">20</span>:<span class="number">43</span>:<span class="number">35</span> <span class="number">2008</span> <span class="number">-0700</span></span><br><span class="line"> </span><br><span class="line">    updated rakefile</span><br><span class="line">...</span><br></pre></td></tr></table></figure><hr><h1 id="3、共享标签"><a href="#3、共享标签" class="headerlink" title="3、共享标签"></a>3、共享标签</h1><p>默认情况下，git push 命令并不会传送标签到远程仓库服务器上。 在创建完标签后你必须显式地推送标签到共享服务器上。 这个过程就像共享远程分支一样——你可以运行 git push origin [tagname]。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin v1<span class="number">.5</span></span><br><span class="line">Counting objects: <span class="number">14</span>, done.</span><br><span class="line">Delta compression using up to <span class="number">8</span> threads.</span><br><span class="line">Compressing objects: <span class="number">100</span>% (<span class="number">12</span>/<span class="number">12</span>), done.</span><br><span class="line">Writing objects: <span class="number">100</span>% (<span class="number">14</span>/<span class="number">14</span>), <span class="number">2.05</span> KiB | <span class="number">0</span> bytes/s, done.</span><br><span class="line">Total <span class="number">14</span> (delta <span class="number">3</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</span><br><span class="line">To git@github.com:schacon/simplegit.git</span><br><span class="line"> * [<span class="built_in">new</span> tag]         v1<span class="number">.5</span> -&gt; v1<span class="number">.5</span></span><br></pre></td></tr></table></figure><p>如果想要一次性推送很多标签，也可以使用带有 –tags 选项的 git push 命令。 这将会把所有不在远程仓库服务器上的标签全部传送到那里。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin --tags</span><br><span class="line">Counting objects: <span class="number">1</span>, done.</span><br><span class="line">Writing objects: <span class="number">100</span>% (<span class="number">1</span>/<span class="number">1</span>), <span class="number">160</span> bytes | <span class="number">0</span> bytes/s, done.</span><br><span class="line">Total <span class="number">1</span> (delta <span class="number">0</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</span><br><span class="line">To git@github.com:schacon/simplegit.git</span><br><span class="line"> * [<span class="built_in">new</span> tag]         v1<span class="number">.4</span> -&gt; v1<span class="number">.4</span></span><br><span class="line"> * [<span class="built_in">new</span> tag]         v1<span class="number">.4</span>-lw -&gt; v1<span class="number">.4</span>-lw</span><br></pre></td></tr></table></figure><p>现在，当其他人从仓库中克隆或拉取，他们也能得到你的那些标签。</p><hr><h1 id="4、删除标签"><a href="#4、删除标签" class="headerlink" title="4、删除标签"></a>4、删除标签</h1><blockquote><p>要删除掉你本地仓库上的标签，可以使用命令 git tag -d <tagname>。例如，可以使用下面的命令删除掉一个轻量级标签：</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -d v1<span class="number">.4</span>-lw</span><br><span class="line">Deleted tag <span class="string">&#x27;v1.4-lw&#x27;</span> (was e7d5add)</span><br></pre></td></tr></table></figure><blockquote><p>应该注意的是上述命令并不会从任何远程仓库中移除这个标签，你必须使用 git push <remote> :refs/tags/<tagname> 来更新你的远程仓库：</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin :refs/tags/v1<span class="number">.4</span>-lw</span><br><span class="line">To /git@github.com:schacon/simplegit.git</span><br><span class="line"> - [deleted]         v1<span class="number">.4</span>-lw</span><br></pre></td></tr></table></figure><hr><h1 id="5、检出标签"><a href="#5、检出标签" class="headerlink" title="5、检出标签"></a>5、检出标签</h1><p>如果你想查看某个标签所指向的文件版本，可以使用 git checkout 命令，虽然说这会使你的仓库处于“分离头指针（detacthed HEAD）”状态——这个状态有些不好的副作用：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout <span class="number">2.0</span><span class="number">.0</span></span><br><span class="line">Note: checking out <span class="string">&#x27;2.0.0&#x27;</span>.</span><br><span class="line"> </span><br><span class="line">You are in <span class="string">&#x27;detached HEAD&#x27;</span> state. You can look around, <span class="built_in">make</span> experimental</span><br><span class="line">changes and commit them, and you can discard any commits you <span class="built_in">make</span> in this</span><br><span class="line">state without impacting any branches by performing another checkout.</span><br><span class="line"> </span><br><span class="line">If you want to create a <span class="built_in">new</span> branch to retain commits you create, you may</span><br><span class="line">do so (now or later) by using -b with the checkout command again. Example:</span><br><span class="line"> </span><br><span class="line">  git checkout -b &lt;<span class="built_in">new</span>-branch&gt;</span><br><span class="line"> </span><br><span class="line">HEAD is now at <span class="number">99</span>ada87... Merge pull request #<span class="number">89</span> from schacon/appendix-final</span><br><span class="line"> </span><br><span class="line">$ git checkout <span class="number">2.0</span>-beta<span class="number">-0.1</span></span><br><span class="line">Previous HEAD position was <span class="number">99</span>ada87... Merge pull request #<span class="number">89</span> from schacon/appendix-final</span><br><span class="line">HEAD is now at df3f601... add atlas.json and cover image</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GIT开发学习——合并分支的几种方法</title>
      <link href="2022/07/07/GIT%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <url>2022/07/07/GIT%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>@[TOC]</p><hr><p><img src="https://img-blog.csdnimg.cn/b59e4985d32a4de68d575364ab7fc10c.png" alt="在这里插入图片描述"></p><hr><h1 id="一、使用merge命令合并分支"><a href="#一、使用merge命令合并分支" class="headerlink" title="一、使用merge命令合并分支"></a>一、使用merge命令合并分支</h1><blockquote><h2 id="1、目标：将dev分支合并到master分支"><a href="#1、目标：将dev分支合并到master分支" class="headerlink" title="1、目标：将dev分支合并到master分支"></a>1、目标：将dev分支合并到master分支</h2><h3 id="1-1、首先切换到master分支上"><a href="#1-1、首先切换到master分支上" class="headerlink" title="1.1、首先切换到master分支上"></a>1.1、首先切换到master分支上</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure><h3 id="1-2、如果是多人开发的话-需要把远程master上的代码pull下来"><a href="#1-2、如果是多人开发的话-需要把远程master上的代码pull下来" class="headerlink" title="1.2、如果是多人开发的话 需要把远程master上的代码pull下来"></a>1.2、如果是多人开发的话 需要把远程master上的代码pull下来</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br><span class="line"><span class="comment">//如果是自己一个开发就没有必要了，为了保险期间还是pull</span></span><br></pre></td></tr></table></figure><h3 id="1-3、然后我们把dev分支的代码合并到master上"><a href="#1-3、然后我们把dev分支的代码合并到master上" class="headerlink" title="1.3、然后我们把dev分支的代码合并到master上"></a>1.3、然后我们把dev分支的代码合并到master上</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git merge dev </span><br><span class="line"><span class="comment">//如果有冲突，手动解决冲突就行。</span></span><br></pre></td></tr></table></figure><h3 id="1-4、然后查看状态及执行提交命令"><a href="#1-4、然后查看状态及执行提交命令" class="headerlink" title="1.4、然后查看状态及执行提交命令"></a>1.4、然后查看状态及执行提交命令</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line"></span><br><span class="line">On branch master Your branch is ahead of <span class="string">&#x27;origin/master&#x27;</span> by <span class="number">12</span> commits.   (use <span class="string">&quot;git push&quot;</span> to publish your &gt;local commits) nothing to</span><br><span class="line">commit, working tree clean</span><br><span class="line"></span><br><span class="line"><span class="comment">//上面的意思就是你有12个commit，需要push到远程master上 </span></span><br><span class="line">&gt; 最后执行下面提交命令 </span><br><span class="line">git push origin master </span><br></pre></td></tr></table></figure></blockquote><hr><h1 id="二、合并某个分支上的单个commit（cherry-pick命令）"><a href="#二、合并某个分支上的单个commit（cherry-pick命令）" class="headerlink" title="二、合并某个分支上的单个commit（cherry-pick命令）"></a>二、合并某个分支上的单个commit（cherry-pick命令）</h1><blockquote><p>比如 feature 分支上的commit 82ecb31非常重要，它含有一个bug的修改，或其他人想访问的内容。<br>无论什么原因，你现在只需要将82ecb31合并到master，而不合并feature上的其他commits;<br>所以我们用git cherry-pick命令来做：</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master  </span><br><span class="line">git cherry-pick <span class="number">82</span>ecb31</span><br></pre></td></tr></table></figure><blockquote><p>这样就好啦。<br>现在82ecb31就被合并到master分支，并在master中添加了commit（作为一个新的commit）。<br>cherry-pick和merge比较类似，如果git不能合并代码改动（比如遇到合并冲突），git需要你自己来解决冲突并手动添加commit。</p><p>这里git cherry-pick每次合并过来会显示文件冲突(其实并没有冲突代码部分，只需手动解决既可)。</p></blockquote><hr><h1 id="三、使用开发工具-Android-Studio-进行分支代码合并"><a href="#三、使用开发工具-Android-Studio-进行分支代码合并" class="headerlink" title="三、使用开发工具 Android Studio 进行分支代码合并"></a>三、使用开发工具 Android Studio 进行分支代码合并</h1><blockquote><h2 id="1、开发代码在master分支，现在要将代码合到branch-cmb71分支"><a href="#1、开发代码在master分支，现在要将代码合到branch-cmb71分支" class="headerlink" title="1、开发代码在master分支，现在要将代码合到branch_cmb71分支"></a>1、开发代码在master分支，现在要将代码合到branch_cmb71分支</h2><h2 id="2、首先，在idea左下角切换分支到branch-cmb71分支"><a href="#2、首先，在idea左下角切换分支到branch-cmb71分支" class="headerlink" title="2、首先，在idea左下角切换分支到branch_cmb71分支 "></a>2、首先，在idea左下角切换分支到branch_cmb71分支 <img src="https://img-blog.csdnimg.cn/ce1ba3f61aab487298d9991c1e789fcc.png" alt="在这里插入图片描述"></h2><h2 id="3、点击右下角的Git-branch-cmb71-找到Local-Branches-鼠标左键选中master分支，在弹出的框中，选择compare-with-Current"><a href="#3、点击右下角的Git-branch-cmb71-找到Local-Branches-鼠标左键选中master分支，在弹出的框中，选择compare-with-Current" class="headerlink" title="3、点击右下角的Git:branch_cmb71,找到Local Branches,鼠标左键选中master分支，在弹出的框中，选择compare with Current"></a>3、点击右下角的Git:branch_cmb71,找到Local Branches,鼠标左键选中master分支，在弹出的框中，选择compare with Current</h2><p><img src="https://img-blog.csdnimg.cn/e38488cc25e44069980e658a4a835def.png" alt="在这里插入图片描述"></p><h2 id="4、选择左上角的file，选择要合并的文件，右键点击get-from-branch"><a href="#4、选择左上角的file，选择要合并的文件，右键点击get-from-branch" class="headerlink" title="4、选择左上角的file，选择要合并的文件，右键点击get from branch "></a>4、选择左上角的file，选择要合并的文件，右键点击get from branch <img src="https://img-blog.csdnimg.cn/1037f821626242c5a7080f73c61601e0.png" alt="在这里插入图片描述"></h2><p><img src="https://img-blog.csdnimg.cn/daf0c2f00d894172a19bd3679acab76f.png" alt="在这里插入图片描述"></p><h2 id="5、这样就把代码合并到branch-cmb71分支的本地仓库了，然后再进行commit，push操作就把代码提交到branch-cmb71分支的远程仓库了"><a href="#5、这样就把代码合并到branch-cmb71分支的本地仓库了，然后再进行commit，push操作就把代码提交到branch-cmb71分支的远程仓库了" class="headerlink" title="5、这样就把代码合并到branch_cmb71分支的本地仓库了，然后再进行commit，push操作就把代码提交到branch_cmb71分支的远程仓库了"></a>5、这样就把代码合并到branch_cmb71分支的本地仓库了，然后再进行commit，push操作就把代码提交到branch_cmb71分支的远程仓库了</h2></blockquote><hr><h1 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h1><h2 id="1、git合并分支（一看就懂）"><a href="#1、git合并分支（一看就懂）" class="headerlink" title="1、git合并分支（一看就懂）"></a>1、<a href="https://www.jianshu.com/p/26d050497abb">git合并分支（一看就懂）</a></h2><h2 id="2、Git合并指定文件到另一个分支"><a href="#2、Git合并指定文件到另一个分支" class="headerlink" title="2、Git合并指定文件到另一个分支"></a>2、<a href="https://www.cnblogs.com/phpper/p/7609238.html">Git合并指定文件到另一个分支</a></h2><h2 id="3、IDEA如何使用git将当前分支中的部分节点代码合并到另一个分支上"><a href="#3、IDEA如何使用git将当前分支中的部分节点代码合并到另一个分支上" class="headerlink" title="3、IDEA如何使用git将当前分支中的部分节点代码合并到另一个分支上"></a>3、<a href="https://blog.csdn.net/weixin_45887275/article/details/118993074">IDEA如何使用git将当前分支中的部分节点代码合并到另一个分支上</a></h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android之CardView</title>
      <link href="2022/06/21/Android%E4%B9%8BCardView/"/>
      <url>2022/06/21/Android%E4%B9%8BCardView/</url>
      
        <content type="html"><![CDATA[<p>@[toc]</p><hr><h2 id="一、常用属性"><a href="#一、常用属性" class="headerlink" title="一、常用属性"></a>一、常用属性</h2><blockquote><h3 id="1、cardBackgroundColor-设置背景色"><a href="#1、cardBackgroundColor-设置背景色" class="headerlink" title="1、cardBackgroundColor 设置背景色"></a>1、cardBackgroundColor 设置背景色</h3><p>CardView是View的子类，View一般使用Background设置背景色，为什么还要单独提取出一个属性让我们来设置背景色呢？</p><p>为了实现阴影效果，内部已经消耗掉了 Background 属性</p><h3 id="2、cardCornerRadius-设置圆角半径"><a href="#2、cardCornerRadius-设置圆角半径" class="headerlink" title="2、cardCornerRadius 设置圆角半径"></a>2、cardCornerRadius 设置圆角半径</h3><h3 id="3、contentPadding-设置内部padding"><a href="#3、contentPadding-设置内部padding" class="headerlink" title="3、contentPadding 设置内部padding"></a>3、contentPadding 设置内部padding</h3><p>View提供了padding设置间距，为什么还要单独提取出一个属性？</p><p>相同的原因，内部消耗掉了 padding 属性</p><h3 id="4、cardElevation-设置阴影大小"><a href="#4、cardElevation-设置阴影大小" class="headerlink" title="4、cardElevation 设置阴影大小"></a>4、cardElevation 设置阴影大小</h3><h3 id="5、cardUseCompatPadding"><a href="#5、cardUseCompatPadding" class="headerlink" title="5、cardUseCompatPadding"></a>5、cardUseCompatPadding</h3><p>默认为false，用于5.0及以上，true则添加额外的 padding 绘制阴影</p><h3 id="6、cardPreventCornerOverlap"><a href="#6、cardPreventCornerOverlap" class="headerlink" title="6、cardPreventCornerOverlap"></a>6、cardPreventCornerOverlap</h3><p>默认为true，用于5.0及以下，添加额外的 padding，防止内容和圆角重叠</p></blockquote><hr><h2 id="二、属性效果展示"><a href="#二、属性效果展示" class="headerlink" title="二、属性效果展示"></a>二、属性效果展示</h2><p><img src="https://img-blog.csdnimg.cn/7c56656e37424b1a81abc6904ae7b247.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/0cf7d19ad8ac44d5927a2040efb103ca.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/a77585a2653748f78531d31a50a2e332.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/585514f50f7a4c669857dacf7797df5e.png" alt="在这里插入图片描述"></p><hr><h2 id="三、案例"><a href="#三、案例" class="headerlink" title="三、案例"></a>三、案例</h2><p>目标图：</p><p><img src="https://img-blog.csdnimg.cn/babe47e66c514005b393329351ed7608.png" alt="在这里插入图片描述"></p><hr><h3 id="1、布局搭建"><a href="#1、布局搭建" class="headerlink" title="1、布局搭建"></a>1、布局搭建</h3><p><strong>activity_main.xml</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;ListView</span><br><span class="line">    xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:id=<span class="string">&quot;@+id/listview_MsgList&quot;</span></span><br><span class="line">    android:divider=<span class="string">&quot;@null&quot;</span></span><br><span class="line">    android:background=<span class="string">&quot;#ffffff&quot;</span></span><br><span class="line">    android:paddingTop=<span class="string">&quot;8dp&quot;</span></span><br><span class="line">    &gt;</span><br><span class="line">    </span><br><span class="line">&lt;/ListView&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>item_msg.xml</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;FrameLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    xmlns:app=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="line">    xmlns:tools=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;wrap_content&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;androidx.cardview.widget.CardView</span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        app:cardCornerRadius=<span class="string">&quot;8dp&quot;</span></span><br><span class="line">        app:cardElevation=<span class="string">&quot;4dp&quot;</span></span><br><span class="line">        android:layout_marginLeft=<span class="string">&quot;16dp&quot;</span></span><br><span class="line">        android:layout_marginRight=<span class="string">&quot;16dp&quot;</span></span><br><span class="line">        android:layout_marginTop=<span class="string">&quot;8dp&quot;</span></span><br><span class="line">        android:layout_marginBottom=<span class="string">&quot;8dp&quot;</span></span><br><span class="line">        &gt;</span><br><span class="line"></span><br><span class="line">        &lt;LinearLayout</span><br><span class="line">            android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">            android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">            android:orientation=<span class="string">&quot;vertical&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">            &lt;ImageView</span><br><span class="line">                android:id=<span class="string">&quot;@+id/imageview_Image&quot;</span></span><br><span class="line">                android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">                android:layout_height=<span class="string">&quot;150dp&quot;</span></span><br><span class="line">                android:scaleType=<span class="string">&quot;centerCrop&quot;</span></span><br><span class="line">                android:layout_margin=<span class="string">&quot;8dp&quot;</span></span><br><span class="line">                tools:src=<span class="string">&quot;@drawable/img01&quot;</span> /&gt;</span><br><span class="line">            &lt;!--   tools 测试属性，只会在PreView中看到，运行时没有这些东西         --&gt;</span><br><span class="line"></span><br><span class="line">            &lt;TextView</span><br><span class="line">                android:id=<span class="string">&quot;@+id/textview_title&quot;</span></span><br><span class="line">                android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">                android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">                android:layout_margin=<span class="string">&quot;8dp&quot;</span></span><br><span class="line">                android:textColor=<span class="string">&quot;#000000&quot;</span></span><br><span class="line">                android:textSize=<span class="string">&quot;16dp&quot;</span></span><br><span class="line">                android:textStyle=<span class="string">&quot;bold&quot;</span></span><br><span class="line">                tools:text=<span class="string">&quot;使用慕课网学习Android技术&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">            &lt;TextView</span><br><span class="line">                android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">                android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">                android:layout_marginLeft=<span class="string">&quot;8dp&quot;</span></span><br><span class="line">                android:layout_marginRight=<span class="string">&quot;8dp&quot;</span></span><br><span class="line">                android:layout_marginBottom=<span class="string">&quot;8dp&quot;</span></span><br><span class="line">                tools:text=<span class="string">&quot;使用慕课网学习Android技术使用慕课网学习Android技术使用慕课网学习Android技术使用慕课网学习Android技术&quot;</span></span><br><span class="line">                /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/androidx.cardview.widget.CardView&gt;</span><br><span class="line">&lt;/FrameLayout&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、功能实现"><a href="#2、功能实现" class="headerlink" title="2、功能实现"></a>2、功能实现</h3><p><strong>MsgAdapter</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.cardviewstudy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> android.widget.BaseAdapter;</span><br><span class="line"><span class="keyword">import</span> android.widget.ImageView;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 继承BaseAdapter，实现4个方法</span></span><br><span class="line"><span class="comment"> * Created by TMJ on 2020-02-20.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public class MsgAdapter extends BaseAdapter &#123;</span><br><span class="line"></span><br><span class="line">    private Context mContext;<span class="comment">//上下文环境</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主要用于加载item_msg的布局</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    private LayoutInflater mInflater;</span><br><span class="line">    private List&lt;Message&gt; mDatas;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public MsgAdapter(Context context, List&lt;Message&gt; datas) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 赋值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        mContext = context;</span><br><span class="line">        mInflater = LayoutInflater.from(context);</span><br><span class="line">        mDatas = datas;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public <span class="keyword">int</span> getCount() &#123;</span><br><span class="line">        <span class="keyword">return</span> mDatas.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object getItem(<span class="keyword">int</span> position) &#123;</span><br><span class="line">        <span class="keyword">return</span> mDatas.get(position);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public long getItemId(<span class="keyword">int</span> position) &#123;</span><br><span class="line">        <span class="keyword">return</span> position;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public View getView(<span class="keyword">int</span> position, View convertView, ViewGroup parent) &#123;</span><br><span class="line"></span><br><span class="line">        ViewHolder viewHolder = null;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (convertView == null)&#123;</span><br><span class="line"></span><br><span class="line">            convertView=mInflater.inflate(R.layout.item_msg,parent,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">            viewHolder=<span class="built_in">new</span> ViewHolder();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 获取子布局中三个控件：ImageView TextView TextView</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            viewHolder.mIvImg=convertView.findViewById(R.id.imageview_Image);</span><br><span class="line">            viewHolder.mTvTitle=convertView.findViewById(R.id.textview_title);</span><br><span class="line">            viewHolder.mTvContent=convertView.findViewById(R.id.textview_content);</span><br><span class="line"></span><br><span class="line">            convertView.setTag(viewHolder);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            viewHolder= (ViewHolder) convertView.getTag();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Message message=mDatas.get(position);</span><br><span class="line">        viewHolder.mIvImg.setImageResource(message.getImgResId());</span><br><span class="line">        viewHolder.mTvTitle.setText(message.getTitle());</span><br><span class="line">        viewHolder.mTvContent.setText(message.getContent());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> convertView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内部类：可省去findViewById的时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public static class ViewHolder &#123;</span><br><span class="line"></span><br><span class="line">        ImageView mIvImg;</span><br><span class="line">        TextView mTvTitle;</span><br><span class="line">        TextView mTvContent;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>MainActivity</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.cardviewstudy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.widget.ListView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private ListView mLvMsgList;</span><br><span class="line">    private List&lt;Message&gt; mDatas = <span class="built_in">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    private MsgAdapter mAdapter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        mLvMsgList = findViewById(R.id.listview_MsgList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 多调用两次，数据会更多</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        mDatas.addAll(MsgLab.generateMockList());</span><br><span class="line">        mDatas.addAll(MsgLab.generateMockList());</span><br><span class="line"></span><br><span class="line">        mAdapter=<span class="built_in">new</span> MsgAdapter(this,mDatas);</span><br><span class="line"></span><br><span class="line">        mLvMsgList.setAdapter(mAdapter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>效果图：</strong></p><p>5.0以上 &lt;————&gt; 5.0以下</p><p><img src="https://img-blog.csdnimg.cn/b2ff47f789274dce8e35fc368e301c33.png" alt="在这里插入图片描述"></p><hr><h2 id="四、参考文献"><a href="#四、参考文献" class="headerlink" title="四、参考文献"></a>四、参考文献</h2><h3 id="1、原文链接"><a href="#1、原文链接" class="headerlink" title="1、原文链接"></a>1、<a href="https://blog.csdn.net/qq_39438055/article/details/104414947">原文链接</a></h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java.lang.IllegalStateException: Fragement no longer exists for key f0: index 0</title>
      <link href="2022/05/13/java-lang-IllegalStateException-Fragement-no-longer-exists-for-key-f0-index-0/"/>
      <url>2022/05/13/java-lang-IllegalStateException-Fragement-no-longer-exists-for-key-f0-index-0/</url>
      
        <content type="html"><![CDATA[<p>@[toc]</p><hr><h2 id="日常工作所遇bug记录："><a href="#日常工作所遇bug记录：" class="headerlink" title="日常工作所遇bug记录："></a>日常工作所遇bug记录：</h2><h2 id="1、报错日志"><a href="#1、报错日志" class="headerlink" title="1、报错日志"></a>1、报错日志</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalStateException: Fragement no longer exists <span class="keyword">for</span> key f0: index <span class="number">0</span></span><br><span class="line">at android.support.v4.app.FragmentManagerImpl.getFragment(FragmentManager.java:<span class="number">564</span>)</span><br><span class="line">at android.support.v4.app.FragmentStatePagerAdapter.restoreState(FragmentStatePagerAdapter.java:<span class="number">211</span>)</span><br><span class="line">at android.support.v4.view.ViewPager.setAdapter(ViewPager.java:<span class="number">427</span>)</span><br></pre></td></tr></table></figure><h2 id="2、报错原因："><a href="#2、报错原因：" class="headerlink" title="2、报错原因："></a>2、报错原因：</h2><blockquote><p>1、Fragment为空<br>2、Fragment已被销毁</p></blockquote><h2 id="3、分析原因"><a href="#3、分析原因" class="headerlink" title="3、分析原因"></a>3、分析原因</h2><blockquote><p>由于我项目中，使用Fragment + ViewPager + Fragment的方式；<br>由于需求需要，ViewPager需要删除上次set 的adapter，并重新set 新的adapter，重新加载新的Fragment集合；<br>当我点击按钮，进行清除上次的adapter内容，并添加新的adapter内容是，就会偶现报以上错误。</p></blockquote><p>项目中使用的是 <strong>FragmentStatePagerAdapter</strong>；</p><h2 id="4、解决方案"><a href="#4、解决方案" class="headerlink" title="4、解决方案"></a>4、解决方案</h2><h3 id="4-1、方案1（建议）"><a href="#4-1、方案1（建议）" class="headerlink" title="4.1、方案1（建议）"></a>4.1、方案1（建议）</h3><blockquote><p>此BUG的解法：<br>就是在FragmentStatePagerAdapter的继承类里覆写此函数返回为空，这样FragmentManager.getFragment函数中就不满足第一个判断条件，不会执行后续代码也不会抛出异常了。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override </span><br><span class="line">public Parcelable saveState() &#123; </span><br><span class="line">    <span class="keyword">return</span> null; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2、方案二（不建议）"><a href="#4-2、方案二（不建议）" class="headerlink" title="4.2、方案二（不建议）"></a>4.2、方案二（不建议）</h3><blockquote><p>另一种方案说法是：<br>不使用 FragmentStatePagerAdapter，改为使用 FragmentPagerAdapter；</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java java.lang.ArithmeticException: / by zero问题解决</title>
      <link href="2022/05/13/Java-java-lang-ArithmeticException-by-zero%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>2022/05/13/Java-java-lang-ArithmeticException-by-zero%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h2><blockquote><p>java.lang.ArithmeticException: / by zero</p></blockquote><h2 id="问题分析："><a href="#问题分析：" class="headerlink" title="问题分析："></a>问题分析：</h2><blockquote><p>使用0作为除数导致了报错；只需要找到代码对应报错行数，检查除数的数值处理，使其不能为0即可。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android自定义View——自定义属性attrs.xml的使用</title>
      <link href="2022/05/13/Android%E8%87%AA%E5%AE%9A%E4%B9%89View%E2%80%94%E2%80%94%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7attrs-xml%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2022/05/13/Android%E8%87%AA%E5%AE%9A%E4%B9%89View%E2%80%94%E2%80%94%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7attrs-xml%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>@[toc]</p><hr><h1 id="1、attrs-xml-的作用"><a href="#1、attrs-xml-的作用" class="headerlink" title="1、attrs.xml 的作用"></a>1、attrs.xml 的作用</h1><blockquote><p>使用attrs.xml文件，可以自己定义属性</p></blockquote><hr><h1 id="2、在values文件夹下，新建一个attrs-xml文件"><a href="#2、在values文件夹下，新建一个attrs-xml文件" class="headerlink" title="2、在values文件夹下，新建一个attrs.xml文件"></a>2、在values文件夹下，新建一个attrs.xml文件</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;declare-styleable name=<span class="string">&quot;MyView&quot;</span>&gt;</span><br><span class="line">        &lt;attr name=<span class="string">&quot;textColor&quot;</span> format=<span class="string">&quot;color&quot;</span> /&gt;</span><br><span class="line">        &lt;attr name=<span class="string">&quot;textSize&quot;</span> format=<span class="string">&quot;dimension&quot;</span> /&gt;</span><br><span class="line"> &lt;/declare-styleable&gt;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>其中，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;declare-styleable name=<span class="string">&quot;MyView&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>表明样式名称为 <strong>MyView</strong> ，下面包含了两个自定义属性 <strong>textColor</strong> 和 <strong>textSize</strong> ，其中textColor是颜色(color)类的属性，textSize是尺寸(dimension)类的属性</p><hr><h1 id="3、自定义-MyView"><a href="#3、自定义-MyView" class="headerlink" title="3、自定义 MyView"></a>3、自定义 MyView</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public class MyView extends View &#123;</span><br><span class="line"></span><br><span class="line">    private Paint mPaint;</span><br><span class="line">    private static final String mString = <span class="string">&quot;Welcome to BaiYe&#x27;s blog&quot;</span>;</span><br><span class="line"></span><br><span class="line">    public MyView(Context context) &#123;</span><br><span class="line">        this(context,null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public MyView(Context context, AttributeSet attrs) &#123;</span><br><span class="line">        super(context, attrs);</span><br><span class="line">        mPaint = <span class="built_in">new</span> Paint();</span><br><span class="line"></span><br><span class="line"><span class="comment">//TypedArray是一个数组容器</span></span><br><span class="line">        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.MyView);</span><br><span class="line">        <span class="comment">//这里的属性是:名字_属性名</span></span><br><span class="line">        <span class="keyword">int</span> textColor = a.getColor(R.styleable.MyView_textColor, <span class="number">0XFFFFFFFF</span>);</span><br><span class="line">        <span class="comment">//防止在XML文件里没有定义，就加上了默认值36</span></span><br><span class="line">        float textSize = a.getDimension(R.styleable.MyView_textSize, <span class="number">36</span>);</span><br><span class="line"></span><br><span class="line">        mPaint.setTextSize(textSize);</span><br><span class="line">        mPaint.setColor(textColor);</span><br><span class="line">        a.recycle();<span class="comment">//我的理解是：返回以前取回的属性，供以后使用。以前取回的可能就是textSize和textColor初始化的那段 </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onDraw(Canvas canvas) &#123;</span><br><span class="line">        super.onDraw(canvas);</span><br><span class="line">        <span class="comment">// 设置填充</span></span><br><span class="line">        mPaint.setStyle(Paint.Style.FILL);</span><br><span class="line">        <span class="comment">// 画一个矩形,前俩个是矩形左上角坐标，后面俩个是右下角坐标</span></span><br><span class="line"><span class="comment">//        mPaint.setColor(Color.BLACK);</span></span><br><span class="line">        canvas.drawRect(<span class="built_in">new</span> Rect(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>), mPaint);</span><br><span class="line">        <span class="comment">// 绘制文字</span></span><br><span class="line">        canvas.drawText(mString, <span class="number">60</span>, <span class="number">410</span>, mPaint);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="4、xml-布局内容-使用自定义的MyView"><a href="#4、xml-布局内容-使用自定义的MyView" class="headerlink" title="4、xml 布局内容:使用自定义的MyView"></a>4、xml 布局内容:使用自定义的MyView</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;RelativeLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    xmlns:tools=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="line">    xmlns:test=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span><span class="comment">//一定记得添加前缀 </span></span><br><span class="line">    android:id=<span class="string">&quot;@+id/activity_attrs_actiity&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    tools:context=<span class="string">&quot;com.lizi.newset.CustomView.attrs.AttrsActivity&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;com.lizi.newset.CustomView.attrs.MyView</span><br><span class="line">        android:id=<span class="string">&quot;@+id/myView&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        test:textSize=<span class="string">&quot;50px&quot;</span></span><br><span class="line">        test:textColor=<span class="string">&quot;#ff00ff&quot;</span>/&gt;</span><br><span class="line">    /&gt;</span><br><span class="line">&lt;/RelativeLayout&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="5、自定义属性"><a href="#5、自定义属性" class="headerlink" title="5、自定义属性"></a>5、自定义属性</h1><h2 id="5-1、reference：参考某一资源ID"><a href="#5-1、reference：参考某一资源ID" class="headerlink" title="5.1、reference：参考某一资源ID"></a>5.1、reference：参考某一资源ID</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;declare-styleable name = <span class="string">&quot;名称&quot;</span>&gt;</span><br><span class="line">      &lt;attr name = <span class="string">&quot;background&quot;</span> format = <span class="string">&quot;reference&quot;</span> /&gt;</span><br><span class="line">&lt;/declare-styleable&gt;</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line"></span><br><span class="line">&lt;ImageView</span><br><span class="line">     android:layout_width = <span class="string">&quot;42dip&quot;</span></span><br><span class="line">     android:layout_height = <span class="string">&quot;42dip&quot;</span></span><br><span class="line">     android:background = <span class="string">&quot;@drawable/图片ID&quot;</span></span><br><span class="line">                     /&gt;</span><br></pre></td></tr></table></figure><h2 id="5-2、color：颜色值"><a href="#5-2、color：颜色值" class="headerlink" title="5.2、color：颜色值"></a>5.2、color：颜色值</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;declare-styleable name = <span class="string">&quot;名称&quot;</span>&gt;</span><br><span class="line">       &lt;attr name = <span class="string">&quot;textColor&quot;</span> format = <span class="string">&quot;color&quot;</span> /&gt;</span><br><span class="line">&lt;/declare-styleable&gt;</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &lt;TextView</span><br><span class="line">     android:layout_width = <span class="string">&quot;42dip&quot;</span></span><br><span class="line">     android:layout_height = <span class="string">&quot;42dip&quot;</span></span><br><span class="line">     android:textColor = <span class="string">&quot;#00FF00&quot;</span></span><br><span class="line">                     /&gt;</span><br></pre></td></tr></table></figure><h2 id="5-3、boolean：布尔值"><a href="#5-3、boolean：布尔值" class="headerlink" title="5.3、boolean：布尔值"></a>5.3、boolean：布尔值</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;declare-styleable name = <span class="string">&quot;名称&quot;</span>&gt;</span><br><span class="line">      &lt;attr name = <span class="string">&quot;focusable&quot;</span> format = <span class="string">&quot;boolean&quot;</span> /&gt;</span><br><span class="line">&lt;/declare-styleable&gt;</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;Button</span><br><span class="line">    android:layout_width = <span class="string">&quot;42dip&quot;</span></span><br><span class="line">    android:layout_height = <span class="string">&quot;42dip&quot;</span></span><br><span class="line">    android:focusable = <span class="string">&quot;true&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h2 id="5-4、dimension：尺寸值"><a href="#5-4、dimension：尺寸值" class="headerlink" title="5.4、dimension：尺寸值"></a>5.4、dimension：尺寸值</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;declare-styleable name = <span class="string">&quot;名称&quot;</span>&gt;</span><br><span class="line">     &lt;attr name = <span class="string">&quot;layout_width&quot;</span> format = <span class="string">&quot;dimension&quot;</span> /&gt;</span><br><span class="line">&lt;/declare-styleable&gt;</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line"></span><br><span class="line">&lt;com.lizi.newset.CustomView.attrs.MyView</span><br><span class="line">        android:id=<span class="string">&quot;@+id/myView&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        test:textSize=<span class="string">&quot;50px&quot;</span></span><br><span class="line">        test:textColor=<span class="string">&quot;#ff00ff&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h2 id="5-5、float：浮点值"><a href="#5-5、float：浮点值" class="headerlink" title="5.5、float：浮点值"></a>5.5、float：浮点值</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;declare-styleable name = <span class="string">&quot;AlphaAnimation&quot;</span>&gt;</span><br><span class="line">      &lt;attr name = <span class="string">&quot;fromAlpha&quot;</span> format = <span class="string">&quot;float&quot;</span> /&gt;</span><br><span class="line">      &lt;attr name = <span class="string">&quot;toAlpha&quot;</span> format = <span class="string">&quot;float&quot;</span> /&gt;</span><br><span class="line">&lt;/declare-styleable&gt;</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;alpha</span><br><span class="line">       android:fromAlpha = <span class="string">&quot;1.0&quot;</span></span><br><span class="line">       android:toAlpha = <span class="string">&quot;0.7&quot;</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h2 id="5-6、string：字符串"><a href="#5-6、string：字符串" class="headerlink" title="5.6、string：字符串"></a>5.6、string：字符串</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;declare-styleable name = <span class="string">&quot;MapView&quot;</span>&gt;</span><br><span class="line">     &lt;attr name = <span class="string">&quot;apiKey&quot;</span> format = <span class="string">&quot;string&quot;</span> /&gt;</span><br><span class="line">&lt;/declare-styleable&gt;</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;com.google.android.maps.MapView</span><br><span class="line">         android:layout_width = <span class="string">&quot;fill_parent&quot;</span></span><br><span class="line">         android:layout_height = <span class="string">&quot;fill_parent&quot;</span></span><br><span class="line">         android:apiKey = <span class="string">&quot;0jOkQ80oD1JL9C6HAja99uGXCRiS2CGjKO_bc_g&quot;</span></span><br><span class="line">                    /&gt;</span><br></pre></td></tr></table></figure><h2 id="5-7、integer：整型值-fraction：百分数"><a href="#5-7、integer：整型值-fraction：百分数" class="headerlink" title="5.7、integer：整型值 || fraction：百分数"></a>5.7、integer：整型值 || fraction：百分数</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;declare-styleable name = <span class="string">&quot;AnimatedRotateDrawable&quot;</span>&gt;</span><br><span class="line">      &lt;attr name = <span class="string">&quot;visible&quot;</span> /&gt;</span><br><span class="line">      &lt;attr name = <span class="string">&quot;frameDuration&quot;</span> format=<span class="string">&quot;integer&quot;</span> /&gt;</span><br><span class="line">      &lt;attr name = <span class="string">&quot;framesCount&quot;</span> format=<span class="string">&quot;integer&quot;</span> /&gt;</span><br><span class="line">      &lt;attr name = <span class="string">&quot;pivotX&quot;</span>  format = <span class="string">&quot;fraction&quot;</span>/&gt;</span><br><span class="line">      &lt;attr name = <span class="string">&quot;pivotY&quot;</span>  format = <span class="string">&quot;fraction&quot;</span>/&gt;</span><br><span class="line">      &lt;attr name = <span class="string">&quot;drawable&quot;</span> /&gt;</span><br><span class="line">&lt;/declare-styleable&gt;</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;animated-rotate</span><br><span class="line">      xmlns:android = <span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>  </span><br><span class="line">      android:drawable = <span class="string">&quot;@drawable/图片ID&quot;</span>  </span><br><span class="line">      android:pivotX = <span class="string">&quot;50%&quot;</span>  </span><br><span class="line">      android:pivotY = <span class="string">&quot;50%&quot;</span>  </span><br><span class="line">      android:framesCount = <span class="string">&quot;12&quot;</span>  </span><br><span class="line">      android:frameDuration = <span class="string">&quot;100&quot;</span></span><br><span class="line">  /&gt;</span><br></pre></td></tr></table></figure><h2 id="5-8、enum：枚举值"><a href="#5-8、enum：枚举值" class="headerlink" title="5.8、enum：枚举值"></a>5.8、enum：枚举值</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;declare-styleable name=<span class="string">&quot;名称&quot;</span>&gt;</span><br><span class="line">    &lt;attr name=<span class="string">&quot;orientation&quot;</span>&gt;</span><br><span class="line">    &lt;enum name=<span class="string">&quot;horizontal&quot;</span> value=<span class="string">&quot;0&quot;</span> /&gt;</span><br><span class="line">        &lt;enum name=<span class="string">&quot;vertical&quot;</span> value=<span class="string">&quot;1&quot;</span> /&gt;</span><br><span class="line">    &lt;/attr&gt;                           </span><br><span class="line">&lt;/declare-styleable&gt;</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;LinearLayout</span><br><span class="line">xmlns:android = <span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    android:orientation = <span class="string">&quot;vertical&quot;</span></span><br><span class="line">    android:layout_width = <span class="string">&quot;fill_parent&quot;</span></span><br><span class="line">    android:layout_height = <span class="string">&quot;fill_parent&quot;</span>&gt;</span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure><h2 id="5-9、flag-位或运算"><a href="#5-9、flag-位或运算" class="headerlink" title="5.9、flag 位或运算"></a>5.9、flag 位或运算</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> &lt;declare-styleable name=<span class="string">&quot;名称&quot;</span>&gt;</span><br><span class="line">                    &lt;attr name=<span class="string">&quot;windowSoftInputMode&quot;</span>&gt;</span><br><span class="line">                            &lt;flag name = <span class="string">&quot;stateUnspecified&quot;</span> value = <span class="string">&quot;0&quot;</span> /&gt;</span><br><span class="line">                            &lt;flag name = <span class="string">&quot;stateUnchanged&quot;</span> value = <span class="string">&quot;1&quot;</span> /&gt;</span><br><span class="line">                            &lt;flag name = <span class="string">&quot;stateHidden&quot;</span> value = <span class="string">&quot;2&quot;</span> /&gt;</span><br><span class="line">                            &lt;flag name = <span class="string">&quot;stateAlwaysHidden&quot;</span> value = <span class="string">&quot;3&quot;</span> /&gt;</span><br><span class="line">                            &lt;flag name = <span class="string">&quot;stateVisible&quot;</span> value = <span class="string">&quot;4&quot;</span> /&gt;</span><br><span class="line">                            &lt;flag name = <span class="string">&quot;stateAlwaysVisible&quot;</span> value = <span class="string">&quot;5&quot;</span> /&gt;</span><br><span class="line">                            &lt;flag name = <span class="string">&quot;adjustUnspecified&quot;</span> value = <span class="string">&quot;0x00&quot;</span> /&gt;</span><br><span class="line">                            &lt;flag name = <span class="string">&quot;adjustResize&quot;</span> value = <span class="string">&quot;0x10&quot;</span> /&gt;</span><br><span class="line">                            &lt;flag name = <span class="string">&quot;adjustPan&quot;</span> value = <span class="string">&quot;0x20&quot;</span> /&gt;</span><br><span class="line">                            &lt;flag name = <span class="string">&quot;adjustNothing&quot;</span> value = <span class="string">&quot;0x30&quot;</span> /&gt;</span><br><span class="line">                     &lt;/attr&gt;         </span><br><span class="line">&lt;/declare-styleable&gt;</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;activity</span><br><span class="line">      android:name = <span class="string">&quot;.StyleAndThemeActivity&quot;</span></span><br><span class="line">      android:label = <span class="string">&quot;@string/app_name&quot;</span></span><br><span class="line">      android:windowSoftInputMode = <span class="string">&quot;stateUnspecified | stateUnchanged　|　stateHidden&quot;</span>&gt;</span><br><span class="line">      &lt;intent-filter&gt;</span><br><span class="line">            &lt;action android:name = <span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span><br><span class="line">            &lt;category android:name = <span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span><br><span class="line">      &lt;/intent-filter&gt;</span><br><span class="line">&lt;/activity&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="6、属性定义时可以同时定义多种类型值"><a href="#6、属性定义时可以同时定义多种类型值" class="headerlink" title="6、属性定义时可以同时定义多种类型值"></a>6、属性定义时可以同时定义多种类型值</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;declare-styleable name = <span class="string">&quot;名称&quot;</span>&gt;</span><br><span class="line">      &lt;attr name = <span class="string">&quot;background&quot;</span> format = <span class="string">&quot;reference|color&quot;</span> /&gt;</span><br><span class="line">&lt;/declare-styleable&gt;</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;ImageView</span><br><span class="line">        android:layout_width = <span class="string">&quot;42dip&quot;</span></span><br><span class="line">        android:layout_height = <span class="string">&quot;42dip&quot;</span></span><br><span class="line">        android:background = <span class="string">&quot;@drawable/图片ID|#00FF00&quot;</span></span><br><span class="line">        /&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="7、参考文章"><a href="#7、参考文章" class="headerlink" title="7、参考文章"></a>7、参考文章</h1><p><a href="https://blog.csdn.net/u011033906/article/details/54934103">Android中attrs.xml文件的使用详解</a><br><a href="https://www.cnblogs.com/zhangs1986/p/3243040.html">Android中自定义属性（attrs.xml，TypedArray的使用）</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android报错——this Activity already has an action bar supplied by the window decor. Do not request Wind</title>
      <link href="2022/03/30/Android%E6%8A%A5%E9%94%99%E2%80%94%E2%80%94this-Activity-already-has-an-action-bar-supplied-by-the-window-decor-Do-not-request-Wind/"/>
      <url>2022/03/30/Android%E6%8A%A5%E9%94%99%E2%80%94%E2%80%94this-Activity-already-has-an-action-bar-supplied-by-the-window-decor-Do-not-request-Wind/</url>
      
        <content type="html"><![CDATA[<h3 id="1、问题日志"><a href="#1、问题日志" class="headerlink" title="1、问题日志"></a>1、问题日志</h3><p>今天在 <a href="https://developer.android.google.cn/about/versions/12/get">Android 12</a> 新版本手机上跑一个demo出现崩溃，崩溃日志如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">java.lang.IllegalStateException: This Activity already has an action </span><br><span class="line">bar supplied by the window decor. Do not request</span><br><span class="line">Window.FEATURE_SUPPORT_ACTION_BAR and set windowActionBar to <span class="literal">false</span> </span><br><span class="line">in your theme t</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、问题原因"><a href="#2、问题原因" class="headerlink" title="2、问题原因"></a>2、问题原因</h3><p>由于我在代码中使用了ToolBar，并在activity中调用了setSupportActionBar(toolbar);<br><img  src="https://img-blog.csdnimg.cn/b8a30847193d43e99279cecebe7d1708.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAZmVuZ2xvbG8=,size_17,color_FFFFFF,t_70,g_se,x_16"  ><span class="image-caption">在这里插入图片描述</span></p><h3 id="3、解决方案"><a href="#3、解决方案" class="headerlink" title="3、解决方案"></a>3、解决方案</h3><p>给报错的activity增加对应的theme或者修改theme主题</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style name=<span class="string">&quot;AppTheme.NoActionBar&quot;</span>&gt;</span><br><span class="line">       &lt;item name=&quot;windowActionBar&quot;&gt;false&lt;/item&gt;</span><br><span class="line">       &lt;item name=&quot;windowNoTitle&quot;&gt;true&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4、备注"><a href="#4、备注" class="headerlink" title="4、备注"></a>4、备注</h3><p>我做的这个Activity是用Toolbar来替代ActionBar，因此需要指定一个不带ActionBar的theme主题。</p><p>通常有两种可以选择：<br>Theme.AppCompat.NoActionBar<br>Theme.AppCompat.Light.NoActionBar<br>第一个表示深色主题，它会将界面的主题颜色设置成深色，陪衬颜色设为淡色。<br>第二种表示淡色主题，她会将界面的主题颜色设置为淡色，而陪衬颜色设置为深色。</p><h3 id="5、参考文献"><a href="#5、参考文献" class="headerlink" title="5、参考文献"></a>5、参考文献</h3><p><a href="https://blog.csdn.net/weixin_42107964/article/details/89640076">小温同学ing</a><br><a href="https://www.cnblogs.com/hh9601/p/6404728.html">大果梨</a><br><a href="https://blog.csdn.net/qq_35224673/article/details/52223317">qq_35224673</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SVN项目迁移到GIT并保留commit记录 &amp;&amp; 获取Git提交计数</title>
      <link href="2022/01/24/SVN%E9%A1%B9%E7%9B%AE%E8%BF%81%E7%A7%BB%E5%88%B0GIT%E5%B9%B6%E4%BF%9D%E7%95%99commit%E8%AE%B0%E5%BD%95-%E8%8E%B7%E5%8F%96Git%E6%8F%90%E4%BA%A4%E8%AE%A1%E6%95%B0/"/>
      <url>2022/01/24/SVN%E9%A1%B9%E7%9B%AE%E8%BF%81%E7%A7%BB%E5%88%B0GIT%E5%B9%B6%E4%BF%9D%E7%95%99commit%E8%AE%B0%E5%BD%95-%E8%8E%B7%E5%8F%96Git%E6%8F%90%E4%BA%A4%E8%AE%A1%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>@[toc]</p><hr><h1 id="一、SVN项目迁移到GIT并保留commit记录"><a href="#一、SVN项目迁移到GIT并保留commit记录" class="headerlink" title="一、SVN项目迁移到GIT并保留commit记录"></a>一、SVN项目迁移到GIT并保留commit记录</h1><h2 id="1-编辑userinfo-txt"><a href="#1-编辑userinfo-txt" class="headerlink" title="1. 编辑userinfo.txt"></a>1. 编辑userinfo.txt</h2><p>格式为svn_username=git_username，提交记录里出现的所有svn_user都要有对应git_user</p><p>svn用户 = GitLab用户&lt;GitLab用户邮箱&gt;</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">svn_user1 = git_user1 &lt;git_user1@xxx.com&gt;</span><br><span class="line">svn_user2 = git_user2 &lt;git_user2@xxx.com&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="2-从svn拉取代码"><a href="#2-从svn拉取代码" class="headerlink" title="2. 从svn拉取代码"></a>2. 从svn拉取代码</h2><p>配置git信息：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;YOUR_USERNAME&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;YOUR_EMAIL&quot;</span></span><br></pre></td></tr></table></figure><p>查看配置:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure><p>拉取代码（项目越大，花费时间越多）：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git svn clone -r <span class="number">282506</span>:HEAD svn_url --no-metadata -A userinfo_path local_path</span><br></pre></td></tr></table></figure><ul><li>-r 282506:HEAD 代表从svn的282506版本到最新版本的提交记录，避免从第一个版本拉取数据量过大，操作耗时高。 如果需要拉取所有记录，可去除 -r 282506:HEAD<ul><li>svn_url 你的svn项目地址</li><li>–no-metadata 防止git拉取无用的SVN附加信息</li><li>local_path 为git clone下来的svn目录，会自动新建</li><li>-A userinfo_path 你的userinfo.txt路径</li></ul></li></ul><hr><h2 id="3-提交代码到git"><a href="#3-提交代码到git" class="headerlink" title="3. 提交代码到git"></a>3. 提交代码到git</h2><h3 id="a-使用http传输：项目总大小不大于50M"><a href="#a-使用http传输：项目总大小不大于50M" class="headerlink" title="a. 使用http传输：项目总大小不大于50M"></a>a. 使用http传输：项目总大小不大于50M</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd localpath</span><br><span class="line">git remote add origin https:<span class="comment">//gitee.com/xxx/xxx.git</span></span><br></pre></td></tr></table></figure><p>查看关联情况:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p>如果关联有误，可以删除关联：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin</span><br></pre></td></tr></table></figure><h3 id="b-使用ssh传输：项目总大小大于50M"><a href="#b-使用ssh传输：项目总大小大于50M" class="headerlink" title="b. 使用ssh传输：项目总大小大于50M"></a>b. 使用ssh传输：项目总大小大于50M</h3><p>生成公钥：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen –t rsa –C <span class="string">&quot;YOUR_EMAIL&quot;</span></span><br><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>将生成的公钥，复制到你的gitee/gitlab ssh公钥设置</p><p>测试是否能用ssh登录git：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure><p>提交代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin git@gitee.com:xxxx/xxx.git</span><br></pre></td></tr></table></figure><hr><h2 id="4-push代码到远端"><a href="#4-push代码到远端" class="headerlink" title="4. push代码到远端"></a>4. push代码到远端</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><hr><h2 id="5-操作实例"><a href="#5-操作实例" class="headerlink" title="5.操作实例"></a>5.操作实例</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;zhanghan&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;zhanghan@gdyd.com&quot;</span></span><br><span class="line">git svn clone --no-metadata -A userinfo.txt https:<span class="comment">//10.66.0.1/eip-ng/branches/eip-docx docx</span></span><br><span class="line">cd docx</span><br><span class="line">ssh-keygen –t rsa –C <span class="string">&quot;zhanghan@gdyd.com&quot;</span></span><br><span class="line">cat ~/.ssh/id_rsa.pub</span><br><span class="line">在gitee官网添加ssh公钥</span><br><span class="line">git remote set-url origin git@gitee.com:gdydit_eip/docx.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><hr><h1 id="二、获取Git提交计数"><a href="#二、获取Git提交计数" class="headerlink" title="二、获取Git提交计数"></a>二、获取Git提交计数</h1><p>获取Git存储库的提交次数，有点像SVN版本号,<br>目标是将其用作唯一的，递增的内部版本号。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --pretty=format:<span class="string">&#x27;&#x27;</span> | wc -l</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">要获取所有分支的提交计数：</span><br><span class="line">git rev-list --all --count</span><br><span class="line"></span><br><span class="line">要获取修订的提交计数（HEAD，，master提交哈希）：</span><br><span class="line">git rev-list --count &lt;revision&gt;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">返回按提交者分组的提交计数：</span><br><span class="line">git shortlog -s</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="number">14</span> John lennon</span><br><span class="line"><span class="number">9</span>  Janis Joplin</span><br></pre></td></tr></table></figure><hr><h1 id="三、参考文献"><a href="#三、参考文献" class="headerlink" title="三、参考文献"></a>三、参考文献</h1><p><a href="https://zhuanlan.zhihu.com/p/157801771">SVN项目迁移到GIT并保留commit记录</a><br><a href="https://qastack.cn/programming/677436/how-do-i-get-the-git-commit-count">如何获取Git提交计数</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows和Mac命令行查看文件的MD5｜一般用于校验文件一致性</title>
      <link href="2022/01/11/Windows%E5%92%8CMac%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6%E7%9A%84MD5%EF%BD%9C%E4%B8%80%E8%88%AC%E7%94%A8%E4%BA%8E%E6%A0%A1%E9%AA%8C%E6%96%87%E4%BB%B6%E4%B8%80%E8%87%B4%E6%80%A7/"/>
      <url>2022/01/11/Windows%E5%92%8CMac%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6%E7%9A%84MD5%EF%BD%9C%E4%B8%80%E8%88%AC%E7%94%A8%E4%BA%8E%E6%A0%A1%E9%AA%8C%E6%96%87%E4%BB%B6%E4%B8%80%E8%87%B4%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>@[toc]</p><hr><h1 id="一、Windows自带命令行查看文件的MD5、SHA1、SHA256"><a href="#一、Windows自带命令行查看文件的MD5、SHA1、SHA256" class="headerlink" title="一、Windows自带命令行查看文件的MD5、SHA1、SHA256"></a>一、Windows自带命令行查看文件的MD5、SHA1、SHA256</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//D:\1.exe 为待测试文件路径 </span></span><br><span class="line">certutil -hashfile D:\<span class="number">1.</span>exe MD5</span><br><span class="line">certutil -hashfile D:\<span class="number">1.</span>exe SHA1</span><br><span class="line">certutil -hashfile D:\<span class="number">1.</span>exe SHA256</span><br></pre></td></tr></table></figure><hr><h1 id="二、Mac命令行生成文件的MD5"><a href="#二、Mac命令行生成文件的MD5" class="headerlink" title="二、Mac命令行生成文件的MD5"></a>二、Mac命令行生成文件的MD5</h1><h2 id="1、Mac命令行生成「字符串」的MD5"><a href="#1、Mac命令行生成「字符串」的MD5" class="headerlink" title="1、Mac命令行生成「字符串」的MD5"></a>1、Mac命令行生成「字符串」的MD5</h2><ol><li>使用echo和管道</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">&quot;string&quot;</span> | md5</span><br><span class="line">b80fa55b1234f1935cea559d9efbc39a</span><br></pre></td></tr></table></figure><ol start="2"><li>直接使用md5</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">md5 &lt;&lt;&lt; <span class="string">&quot;string&quot;</span></span><br><span class="line">b80fa55b1234f1935cea559d9efbc39a</span><br></pre></td></tr></table></figure><ol start="3"><li>使用md5 -s “string”</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">md5 -s <span class="string">&quot;string&quot;</span></span><br><span class="line">MD5 (<span class="string">&quot;string&quot;</span>) = b45cffe084dd3d20d928bee85e7b0f21</span><br></pre></td></tr></table></figure><blockquote><p>第三个的结果和前两个的结果不通的原因是 echo 默认会在行尾追加一个换行符，可以通过echo -n “string” 或者 echo “string\c”来去掉换行符</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo -n <span class="string">&quot;string&quot;</span> | md5</span><br><span class="line">b45cffe084dd3d20d928bee85e7b0f21</span><br><span class="line"> </span><br><span class="line">echo <span class="string">&quot;string\c&quot;</span> | md5</span><br><span class="line">b45cffe084dd3d20d928bee85e7b0f21</span><br></pre></td></tr></table></figure><h2 id="2、Mac命令行生成「文件」的MD5"><a href="#2、Mac命令行生成「文件」的MD5" class="headerlink" title="2、Mac命令行生成「文件」的MD5"></a>2、Mac命令行生成「文件」的MD5</h2><blockquote><p>直接 md5+文件路径 </p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apple@fenglolodeMacBook-Pro ~ % md5 /Users/apple/Desktop/index.html </span><br><span class="line">MD5 (/Users/apple/Desktop/index.html) = <span class="number">4732e3</span>fb9a9999a658fe1cbb429fc545</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android中一个app启动另一个app｜从浏览器打开app</title>
      <link href="2022/01/10/Android%E4%B8%AD%E4%B8%80%E4%B8%AAapp%E5%90%AF%E5%8A%A8%E5%8F%A6%E4%B8%80%E4%B8%AAapp%EF%BD%9C%E4%BB%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%93%E5%BC%80app/"/>
      <url>2022/01/10/Android%E4%B8%AD%E4%B8%80%E4%B8%AAapp%E5%90%AF%E5%8A%A8%E5%8F%A6%E4%B8%80%E4%B8%AAapp%EF%BD%9C%E4%BB%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%93%E5%BC%80app/</url>
      
        <content type="html"><![CDATA[<p>@[toc]</p><hr><h1 id="一、应用A中点击按钮，跳转到应用B"><a href="#一、应用A中点击按钮，跳转到应用B" class="headerlink" title="一、应用A中点击按钮，跳转到应用B"></a>一、应用A中点击按钮，跳转到应用B</h1><blockquote><p>备注：这里是默认启动应用B的启动页面</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过包名获取要跳转的app，创建intent对象                        </span></span><br><span class="line">Intent intent = getPackageManager().getLaunchIntentForPackage(<span class="string">&quot;com.example.db_demo&quot;</span>);<span class="comment">// 这里如果intent为空，就说名没有安装要跳转的应用嘛                        </span></span><br><span class="line"><span class="keyword">if</span> (intent != null) &#123;                            </span><br><span class="line">    <span class="comment">// 这里跟Activity传递参数一样的嘛，不要担心怎么传递参数，还有接收参数也是跟Activity和Activity传参数一样//                            </span></span><br><span class="line">    intent.putExtra(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Liu xiang&quot;</span>);<span class="comment">//                            </span></span><br><span class="line">    intent.putExtra(<span class="string">&quot;birthday&quot;</span>, <span class="string">&quot;1983-7-13&quot;</span>);                            </span><br><span class="line">    startActivity(intent);                        </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;                            </span><br><span class="line">    <span class="comment">// 没有安装要跳转的app应用，提醒一下                            </span></span><br><span class="line">    ToastUtils.success(<span class="string">&quot;哟，赶紧下载安装这个APP吧&quot;</span>);                        </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="二、应用A中点击按钮，跳转到应用B中的指定Activity——-scheme方式"><a href="#二、应用A中点击按钮，跳转到应用B中的指定Activity——-scheme方式" class="headerlink" title="二、应用A中点击按钮，跳转到应用B中的指定Activity——(scheme方式)"></a>二、应用A中点击按钮，跳转到应用B中的指定Activity——(scheme方式)</h1><h4 id="1-应用A中，点击按钮"><a href="#1-应用A中，点击按钮" class="headerlink" title="1.应用A中，点击按钮"></a>1.应用A中，点击按钮</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">startActivity(<span class="built_in">new</span> Intent(Intent.ACTION_VIEW, </span><br><span class="line">Uri.parse(<span class="string">&quot;scheme_db://123123123&quot;</span>)));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-应用B中，AndroidManifest-xml的配置如下"><a href="#2-应用B中，AndroidManifest-xml的配置如下" class="headerlink" title="2.应用B中，AndroidManifest.xml的配置如下"></a>2.应用B中，AndroidManifest.xml的配置如下</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity android:name=<span class="string">&quot;.ui.WCDBActivity&quot;</span>    </span><br><span class="line">    android:launchMode=<span class="string">&quot;singleInstance&quot;</span>&gt; <span class="comment">//多窗口，可添加android:launchMode=&quot;singleInstance&quot;</span></span><br><span class="line">    &lt;intent-filter&gt;        </span><br><span class="line">        &lt;category android:name=<span class="string">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;        </span><br><span class="line">        &lt;action android:name=<span class="string">&quot;android.intent.action.VIEW&quot;</span>/&gt;</span><br><span class="line">        &lt;data android:scheme=<span class="string">&quot;scheme_db&quot;</span>/&gt;  <span class="comment">//通过scheme名称，可启动WCDBActivity</span></span><br><span class="line">    &lt;/intent-filter&gt;</span><br><span class="line">&lt;/activity&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-在应用B中，WCDBActivity中可获取应用A中传递过来的数据"><a href="#3-在应用B中，WCDBActivity中可获取应用A中传递过来的数据" class="headerlink" title="3.在应用B中，WCDBActivity中可获取应用A中传递过来的数据"></a>3.在应用B中，WCDBActivity中可获取应用A中传递过来的数据</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getIntent().getScheme();<span class="comment">//获得Scheme名称</span></span><br><span class="line">String data = getIntent().getDataString();<span class="comment">//获得Uri全部路径</span></span><br><span class="line">Toast.makeText(this, data+<span class="string">&quot;&quot;</span>,Toast.LENGTH_LONG).show();</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="三、应用A点击按钮，跳转到应用B的指定Activity——-指定包名和Activity全路径"><a href="#三、应用A点击按钮，跳转到应用B的指定Activity——-指定包名和Activity全路径" class="headerlink" title="三、应用A点击按钮，跳转到应用B的指定Activity——(指定包名和Activity全路径)"></a>三、应用A点击按钮，跳转到应用B的指定Activity——(指定包名和Activity全路径)</h1><h4 id="1-应用A中，点击"><a href="#1-应用A中，点击" class="headerlink" title="1.应用A中，点击"></a>1.应用A中，点击</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**指定包名和带包名的Activity的名字*/</span></span><br><span class="line">ComponentName componentName = </span><br><span class="line">    <span class="built_in">new</span> ComponentName(<span class="string">&quot;com.example.db_demo&quot;</span>, </span><br><span class="line">    <span class="string">&quot;com.example.db_demo.ui.SQLiteActivity&quot;</span>);</span><br><span class="line">Intent intent = <span class="built_in">new</span> Intent();</span><br><span class="line">intent.putExtra(<span class="string">&quot;id&quot;</span>, <span class="number">1001</span>);</span><br><span class="line">intent.setComponent(componentName);</span><br><span class="line">startActivity(intent);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-应用B中，AndroidManifest-xml需要修改"><a href="#2-应用B中，AndroidManifest-xml需要修改" class="headerlink" title="2.应用B中，AndroidManifest.xml需要修改"></a>2.应用B中，AndroidManifest.xml需要修改</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity </span><br><span class="line">    android:name=<span class="string">&quot;.ui.SQLiteActivity&quot;</span>    </span><br><span class="line">    android:exported=<span class="string">&quot;true&quot;</span> <span class="comment">//必须配置，否则不能被其他应用开启</span></span><br><span class="line">    <span class="comment">//如果想要在相邻窗口打开，则修改启动模式singleTask或者singleInstance</span></span><br><span class="line">    android:launchMode=<span class="string">&quot;singleTask&quot;</span>/&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="四、通过浏览器打开Android-App-应用"><a href="#四、通过浏览器打开Android-App-应用" class="headerlink" title="四、通过浏览器打开Android App 应用"></a>四、通过浏览器打开Android App 应用</h1><blockquote><p>原理同方法二，使用scheme</p></blockquote><h4 id="1、首先做成HTML的页面，页面内容格式例如以下："><a href="#1、首先做成HTML的页面，页面内容格式例如以下：" class="headerlink" title="1、首先做成HTML的页面，页面内容格式例如以下："></a>1、首先做成HTML的页面，页面内容格式例如以下：</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;[scheme]://[host]/[path]?[query]&quot;&gt;启动应用程序&lt;/a&gt; </span><br></pre></td></tr></table></figure><blockquote><p>各个项目含义例如以下所看到的：<br>scheme：判别启动的App。 ※具体后述<br>host：适当记述<br>path：传值时必须的key     ※没有也能够<br>query：获取值的Key和Value  ※没有也能够</p></blockquote><p>作为测试例如以下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;myapp://jp.app/openwith?name=zhangsan&amp;age=26&quot;&gt;启动应用程序&lt;/a&gt;</span><br></pre></td></tr></table></figure><h4 id="2、app应用中，待打开的Activity在AndroidManifest-xml的配置如下："><a href="#2、app应用中，待打开的Activity在AndroidManifest-xml的配置如下：" class="headerlink" title="2、app应用中，待打开的Activity在AndroidManifest.xml的配置如下："></a>2、app应用中，待打开的Activity在AndroidManifest.xml的配置如下：</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;intent-filter&gt;  </span><br><span class="line">    &lt;action android:name=<span class="string">&quot;android.intent.action.VIEW&quot;</span>/&gt;  </span><br><span class="line">    &lt;category android:name=<span class="string">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;  </span><br><span class="line">    &lt;category android:name=<span class="string">&quot;android.intent.category.BROWSABLE&quot;</span> /&gt;  </span><br><span class="line">    &lt;data </span><br><span class="line">    android:scheme=<span class="string">&quot;myapp&quot;</span> </span><br><span class="line">    android:host=<span class="string">&quot;jp.app&quot;</span> </span><br><span class="line">    android:pathPrefix=<span class="string">&quot;/openwith&quot;</span>/&gt;  </span><br><span class="line">&lt;/intent-filter&gt;</span><br></pre></td></tr></table></figure><h4 id="3、接下来在Activity中须要取值的地方加入下面代码："><a href="#3、接下来在Activity中须要取值的地方加入下面代码：" class="headerlink" title="3、接下来在Activity中须要取值的地方加入下面代码："></a>3、接下来在Activity中须要取值的地方加入下面代码：</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Intent i_getvalue = getIntent();  </span><br><span class="line">String action = i_getvalue.getAction();  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span>(Intent.ACTION_VIEW.equals(action))&#123;  </span><br><span class="line">    Uri uri = i_getvalue.getData();  </span><br><span class="line">    <span class="keyword">if</span>(uri != null)&#123;  </span><br><span class="line">        String name = uri.getQueryParameter(<span class="string">&quot;name&quot;</span>);  </span><br><span class="line">        String age= uri.getQueryParameter(<span class="string">&quot;age&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android Intent传递数据使用getIntent()接收不到，Intent传递数据与Activity启动模式singleTask的关系</title>
      <link href="2021/12/13/Android-Intent%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE%E4%BD%BF%E7%94%A8getIntent-%E6%8E%A5%E6%94%B6%E4%B8%8D%E5%88%B0%EF%BC%8CIntent%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE%E4%B8%8EActivity%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8FsingleTask%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
      <url>2021/12/13/Android-Intent%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE%E4%BD%BF%E7%94%A8getIntent-%E6%8E%A5%E6%94%B6%E4%B8%8D%E5%88%B0%EF%BC%8CIntent%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE%E4%B8%8EActivity%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8FsingleTask%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<p>@[toc]</p><hr><h1 id="1、常规Intent传递数据"><a href="#1、常规Intent传递数据" class="headerlink" title="1、常规Intent传递数据"></a>1、常规Intent传递数据</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、MainActivity传参</span><br><span class="line"><span class="comment">// Intent构造函数：Intent来源；Intent目的。</span></span><br><span class="line">Intent intent =<span class="built_in">new</span> Intent(MainActivity.this,otherActivity.class);</span><br><span class="line">intent.putExtra(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;当前是页面2，信息来自页面1&quot;</span>);</span><br><span class="line">startActivity(intent);<span class="comment">//启动Activity</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、otherActivity接收参数</span><br><span class="line"><span class="comment">//通过Activity.getIntent()获取当前页面接收到的Intent。</span></span><br><span class="line">Intent intent = getIntent();</span><br><span class="line"><span class="comment">//getXxxExtra方法获取Intent传递过来的数据</span></span><br><span class="line">String msg=intent.getStringExtra(<span class="string">&quot;data&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="2、Activity启动模式为singleTask时，Intent传递数据"><a href="#2、Activity启动模式为singleTask时，Intent传递数据" class="headerlink" title="2、Activity启动模式为singleTask时，Intent传递数据"></a>2、Activity启动模式为singleTask时，Intent传递数据</h1><p>2.1、首先需要在 onNewIntent(Intent intent) 方法中，使用 setIntent(intent) 方法，把最新的intent数据导入；<br>2.2、再使用 getIntent() 方法即可获取最新的intent数据。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">   protected void onNewIntent(Intent intent) &#123;</span><br><span class="line">       super.onNewIntent(intent);</span><br><span class="line">       setIntent(intent);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   protected void onResume() &#123;</span><br><span class="line">       super.onResume();</span><br><span class="line">       <span class="comment">//通过Activity.getIntent()获取当前页面接收到的Intent。</span></span><br><span class="line">       Intent intent = getIntent();</span><br><span class="line">       <span class="comment">//getXxxExtra方法获取Intent传递过来的数据</span></span><br><span class="line">       String msg=intent.getStringExtra(<span class="string">&quot;data&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android 获取屏幕截图（可视控件、布局） 获取控件截图（不可视控件、布局）</title>
      <link href="2021/11/24/Android-%E8%8E%B7%E5%8F%96%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%EF%BC%88%E5%8F%AF%E8%A7%86%E6%8E%A7%E4%BB%B6%E3%80%81%E5%B8%83%E5%B1%80%EF%BC%89-%E8%8E%B7%E5%8F%96%E6%8E%A7%E4%BB%B6%E6%88%AA%E5%9B%BE%EF%BC%88%E4%B8%8D%E5%8F%AF%E8%A7%86%E6%8E%A7%E4%BB%B6%E3%80%81%E5%B8%83%E5%B1%80%EF%BC%89/"/>
      <url>2021/11/24/Android-%E8%8E%B7%E5%8F%96%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%EF%BC%88%E5%8F%AF%E8%A7%86%E6%8E%A7%E4%BB%B6%E3%80%81%E5%B8%83%E5%B1%80%EF%BC%89-%E8%8E%B7%E5%8F%96%E6%8E%A7%E4%BB%B6%E6%88%AA%E5%9B%BE%EF%BC%88%E4%B8%8D%E5%8F%AF%E8%A7%86%E6%8E%A7%E4%BB%B6%E3%80%81%E5%B8%83%E5%B1%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>@[TOC]</p><hr><h1 id="1、-获取可视控件、布局的截图"><a href="#1、-获取可视控件、布局的截图" class="headerlink" title="1、 获取可视控件、布局的截图"></a>1、 获取可视控件、布局的截图</h1><h2 id="1-1-方法：view-getDrawingCache"><a href="#1-1-方法：view-getDrawingCache" class="headerlink" title="1.1 方法：view.getDrawingCache()"></a>1.1 方法：view.getDrawingCache()</h2><h2 id="1-2-demo：获取屏幕截屏"><a href="#1-2-demo：获取屏幕截屏" class="headerlink" title="1.2 demo：获取屏幕截屏"></a>1.2 demo：获取屏幕截屏</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前屏幕截图，不包含状态栏</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public static Bitmap screenShotWithoutStatusBar(Activity activity) &#123;</span><br><span class="line">        <span class="comment">//通过window的源码可以看出：检索顶层窗口的装饰视图，可以作为一个窗口添加到窗口管理器</span></span><br><span class="line">        View view = activity.getWindow().getDecorView();</span><br><span class="line">        <span class="comment">//SYSTEM_UI_FLAG_FULLSCREEN表示全屏的意思，也就是会将状态栏隐藏</span></span><br><span class="line">        <span class="comment">//设置系统UI元素的可见性</span></span><br><span class="line">        view.setSystemUiVisibility(View.SYSTEM_UI_FLAG_FULLSCREEN);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启用或禁用绘图缓存</span></span><br><span class="line">        view.setDrawingCacheEnabled(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//创建绘图缓存</span></span><br><span class="line">        view.buildDrawingCache();</span><br><span class="line">        <span class="comment">//拿到绘图缓存</span></span><br><span class="line">        Bitmap bitmap = view.getDrawingCache();</span><br><span class="line"> </span><br><span class="line">        Rect frame = <span class="built_in">new</span> Rect();</span><br><span class="line">        activity.getWindow().getDecorView().getWindowVisibleDisplayFrame(frame);</span><br><span class="line">        <span class="comment">//状态栏高度</span></span><br><span class="line">        <span class="keyword">int</span> statusBarHeight = frame.top;</span><br><span class="line">        <span class="keyword">int</span> width = ScreenUtils.getScreenWidth();</span><br><span class="line">        <span class="keyword">int</span> height = ScreenUtils.getScreenHeight();</span><br><span class="line"> </span><br><span class="line">        Bitmap bp = null;</span><br><span class="line"><span class="comment">//        bp = Bitmap.createBitmap(bitmap, 0, 0, width, height - statusBarHeight);</span></span><br><span class="line">        bp = Bitmap.createScaledBitmap(bitmap, width, height - statusBarHeight,<span class="literal">true</span>);</span><br><span class="line">        view.destroyDrawingCache();</span><br><span class="line">        view.setSystemUiVisibility(View.VISIBLE);</span><br><span class="line">        <span class="keyword">return</span> bp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h1 id="2、-获取不可视控件、布局的截图"><a href="#2、-获取不可视控件、布局的截图" class="headerlink" title="2、 获取不可视控件、布局的截图"></a>2、 获取不可视控件、布局的截图</h1><h2 id="2-1-方法：Bitmap-createBitmap"><a href="#2-1-方法：Bitmap-createBitmap" class="headerlink" title="2.1 方法：Bitmap.createBitmap()"></a>2.1 方法：Bitmap.createBitmap()</h2><h2 id="2-2-demo：把一个xml布局文件转成bitmap"><a href="#2-2-demo：把一个xml布局文件转成bitmap" class="headerlink" title="2.2 demo：把一个xml布局文件转成bitmap"></a>2.2 demo：把一个xml布局文件转成bitmap</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * view转bitmap</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param view view</span></span><br><span class="line"><span class="comment">     * @return Bitmap</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    private Bitmap createBitmapByView() &#123;</span><br><span class="line">    View view = LayoutInflater.from(activity).inflate(R.layout.img_qrcode, null, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//计算设备分辨率</span></span><br><span class="line">        WindowManager manager = activity.getWindowManager();</span><br><span class="line">        DisplayMetrics metrics = <span class="built_in">new</span> DisplayMetrics();</span><br><span class="line">        manager.getDefaultDisplay().getMetrics(metrics);</span><br><span class="line">        <span class="keyword">int</span> width = metrics.widthPixels;</span><br><span class="line"><span class="keyword">int</span> height = metrics.heightPixels;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测量使得view指定大小</span></span><br><span class="line">        <span class="keyword">int</span> measureWidth = View.MeasureSpec.makeMeasureSpec(width, View.MeasureSpec.EXACTLY);</span><br><span class="line">        <span class="keyword">int</span> measureHeight = View.MeasureSpec.makeMeasureSpec(height, View.MeasureSpec.AT_MOST);</span><br><span class="line"></span><br><span class="line">        view.measure(measureWidth, measureHeight);</span><br><span class="line">        <span class="comment">//调用layout方法布局后，可以得到view的尺寸</span></span><br><span class="line">        view.layout(<span class="number">0</span>, <span class="number">0</span>, view.getMeasuredWidth(), view.getMeasuredHeight());</span><br><span class="line"></span><br><span class="line">        final Bitmap bitmap = Bitmap.createBitmap(view.getWidth(), view.getHeight(), Bitmap.Config.ARGB_8888);</span><br><span class="line">        Canvas canvas = <span class="built_in">new</span> Canvas(bitmap);</span><br><span class="line">        canvas.drawColor(Color.WHITE);</span><br><span class="line">        view.draw(canvas);</span><br><span class="line">        <span class="keyword">return</span> bitmap;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h1 id="3、view-getDrawingCache-为-null-解决方案"><a href="#3、view-getDrawingCache-为-null-解决方案" class="headerlink" title="3、view.getDrawingCache() 为 null 解决方案"></a>3、view.getDrawingCache() 为 null 解决方案</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public static BitmapWithHeight getSimpleViewToBitmap(final View view, <span class="keyword">int</span> width) throws OutOfMemoryError &#123;</span><br><span class="line">        <span class="keyword">if</span> (view.getWidth() &lt;= <span class="number">0</span> || view.getHeight() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            view.measure(View.MeasureSpec.makeMeasureSpec(width, View.MeasureSpec.EXACTLY),</span><br><span class="line">                    View.MeasureSpec.makeMeasureSpec(<span class="number">0</span>, View.MeasureSpec.UNSPECIFIED));</span><br><span class="line">            view.layout(<span class="number">0</span>, <span class="number">0</span>, view.getMeasuredWidth(), view.getMeasuredHeight());</span><br><span class="line">        &#125;</span><br><span class="line">        view.destroyDrawingCache();</span><br><span class="line">        view.setDrawingCacheEnabled(<span class="literal">true</span>);</span><br><span class="line">        view.buildDrawingCache();</span><br><span class="line">        Bitmap <span class="keyword">map</span> = view.getDrawingCache();</span><br><span class="line">        <span class="keyword">if</span> (view.getHeight() &gt; <span class="number">0</span> &amp;&amp; <span class="keyword">map</span> == null)</span><br><span class="line">            <span class="keyword">map</span> = getViewBitmap(view);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">new</span> BitmapWithHeight(<span class="keyword">map</span>, view.getMeasuredWidth(), view.getMeasuredHeight());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static Bitmap getViewBitmap(View view) &#123;</span><br><span class="line">        Bitmap bitmap;</span><br><span class="line">        <span class="keyword">if</span> (view.getWidth() &gt; <span class="number">0</span> &amp;&amp; view.getHeight() &gt; <span class="number">0</span>)</span><br><span class="line">            bitmap = Bitmap.createBitmap(view.getWidth(), view.getHeight(), Bitmap.Config.ARGB_8888);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (view.getMeasuredWidth() &gt; <span class="number">0</span> &amp;&amp; view.getMeasuredHeight() &gt; <span class="number">0</span>)</span><br><span class="line">            bitmap = Bitmap.createBitmap(view.getMeasuredWidth(), view.getMeasuredHeight(), Bitmap.Config.ARGB_8888);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            bitmap = Bitmap.createBitmap(com.blankj.utilcode.utils.ScreenUtils.getScreenWidth(), com.blankj.utilcode.utils.ScreenUtils.getScreenHeight() * <span class="number">2</span>, Bitmap.Config.ARGB_8888);</span><br><span class="line">        Canvas canvas = <span class="built_in">new</span> Canvas(bitmap);</span><br><span class="line">        view.draw(canvas);</span><br><span class="line">        <span class="keyword">return</span> bitmap;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android view转Bitmap（将布局文件转成Bitmap）&amp;&amp; Bitmap保存到本地相册</title>
      <link href="2021/11/24/Android-view%E8%BD%ACBitmap%EF%BC%88%E5%B0%86%E5%B8%83%E5%B1%80%E6%96%87%E4%BB%B6%E8%BD%AC%E6%88%90Bitmap%EF%BC%89-Bitmap%E4%BF%9D%E5%AD%98%E5%88%B0%E6%9C%AC%E5%9C%B0%E7%9B%B8%E5%86%8C/"/>
      <url>2021/11/24/Android-view%E8%BD%ACBitmap%EF%BC%88%E5%B0%86%E5%B8%83%E5%B1%80%E6%96%87%E4%BB%B6%E8%BD%AC%E6%88%90Bitmap%EF%BC%89-Bitmap%E4%BF%9D%E5%AD%98%E5%88%B0%E6%9C%AC%E5%9C%B0%E7%9B%B8%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<p>@[toc]</p><hr><h1 id="一、view转Bitmap"><a href="#一、view转Bitmap" class="headerlink" title="一、view转Bitmap"></a>一、view转Bitmap</h1><h2 id="1、使用LayoutInflater导入布局"><a href="#1、使用LayoutInflater导入布局" class="headerlink" title="1、使用LayoutInflater导入布局"></a>1、使用LayoutInflater导入布局</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">View view = LayoutInflater.from(activity).inflate(R.layout.img_qrcode, null, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h2 id="2、测量计算view大小"><a href="#2、测量计算view大小" class="headerlink" title="2、测量计算view大小"></a>2、测量计算view大小</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算设备分辨率</span></span><br><span class="line">      WindowManager manager = activity.getWindowManager();</span><br><span class="line">      DisplayMetrics metrics = <span class="built_in">new</span> DisplayMetrics();</span><br><span class="line">      manager.getDefaultDisplay().getMetrics(metrics);</span><br><span class="line">      <span class="keyword">int</span> width = metrics.widthPixels;</span><br><span class="line"><span class="keyword">int</span> height = metrics.heightPixels;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//测量使得view指定大小</span></span><br><span class="line">      <span class="keyword">int</span> measureWidth = View.MeasureSpec.makeMeasureSpec(width, View.MeasureSpec.EXACTLY);</span><br><span class="line">      <span class="keyword">int</span> measureHeight = View.MeasureSpec.makeMeasureSpec(height, View.MeasureSpec.AT_MOST);</span><br><span class="line"></span><br><span class="line">      view.measure(measureWidth, measureHeight);</span><br><span class="line">      <span class="comment">//调用layout方法布局后，可以得到view的尺寸</span></span><br><span class="line">      view.layout(<span class="number">0</span>, <span class="number">0</span>, view.getMeasuredWidth(), view.getMeasuredHeight());</span><br></pre></td></tr></table></figure><h2 id="3、把view转成图片Bitmap"><a href="#3、把view转成图片Bitmap" class="headerlink" title="3、把view转成图片Bitmap"></a>3、把view转成图片Bitmap</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">final Bitmap bitmap = Bitmap.createBitmap(view.getWidth(), view.getHeight(), Bitmap.Config.ARGB_8888);</span><br><span class="line">        Canvas canvas = <span class="built_in">new</span> Canvas(bitmap);</span><br><span class="line">        canvas.drawColor(Color.WHITE);</span><br><span class="line">        view.draw(canvas);</span><br></pre></td></tr></table></figure><hr><h1 id="二、将Bitmap保存到本地相册"><a href="#二、将Bitmap保存到本地相册" class="headerlink" title="二、将Bitmap保存到本地相册"></a>二、将Bitmap保存到本地相册</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 保存bitmap到相册</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   private void saveBitmapToAlbum(Bitmap bitmap) &#123;</span><br><span class="line">       final File appDir = <span class="built_in">new</span> File(activity.getExternalCacheDir(), <span class="string">&quot;image&quot;</span>);</span><br><span class="line">       <span class="keyword">if</span> (!appDir.exists()) &#123;</span><br><span class="line">           appDir.mkdir();</span><br><span class="line">       &#125;</span><br><span class="line">       final String fileName = System.currentTimeMillis() + <span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line">       final File file = <span class="built_in">new</span> File(appDir, fileName);</span><br><span class="line">       try &#123;</span><br><span class="line">           FileOutputStream fos = <span class="built_in">new</span> FileOutputStream(file);</span><br><span class="line">           try &#123;</span><br><span class="line">               bitmap.compress(Bitmap.CompressFormat.JPEG, <span class="number">90</span>, fos);</span><br><span class="line">               fos.flush();</span><br><span class="line">           &#125; finally &#123;</span><br><span class="line">               fos.<span class="built_in">close</span>();</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//把文件插入到系统相册</span></span><br><span class="line">           MediaStore.Images.Media.insertImage(activity.getContentResolver(), file.getAbsolutePath(), fileName, null);</span><br><span class="line">           <span class="comment">//通知图库更新</span></span><br><span class="line">           <span class="comment">//activity.sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE, Uri.parse(&quot;file://&quot; + file.getAbsolutePath())));</span></span><br><span class="line">           activity.sendBroadcast(<span class="built_in">new</span> Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE, Uri.fromFile(<span class="built_in">new</span> File(file.getPath()))));</span><br><span class="line">       &#125; catch (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><hr><h1 id="三、代码实现demo"><a href="#三、代码实现demo" class="headerlink" title="三、代码实现demo"></a>三、代码实现demo</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">public class SaveBitmap&#123;</span><br><span class="line"></span><br><span class="line">    public void qrCode() &#123;</span><br><span class="line">        View view = LayoutInflater.from(activity).inflate(R.layout.img_qrcode, null, <span class="literal">false</span>);</span><br><span class="line">Bitmap saveBitmap = createBitmapByView(view);</span><br><span class="line">saveBitmapToAlbum(saveBitmap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * view转bitmap</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param view view</span></span><br><span class="line"><span class="comment">     * @return Bitmap</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    private Bitmap createBitmapByView(View view) &#123;</span><br><span class="line">        <span class="comment">//计算设备分辨率</span></span><br><span class="line">        WindowManager manager = activity.getWindowManager();</span><br><span class="line">        DisplayMetrics metrics = <span class="built_in">new</span> DisplayMetrics();</span><br><span class="line">        manager.getDefaultDisplay().getMetrics(metrics);</span><br><span class="line">        <span class="keyword">int</span> width = metrics.widthPixels;</span><br><span class="line"><span class="keyword">int</span> height = metrics.heightPixels;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测量使得view指定大小</span></span><br><span class="line">        <span class="keyword">int</span> measureWidth = View.MeasureSpec.makeMeasureSpec(width, View.MeasureSpec.EXACTLY);</span><br><span class="line">        <span class="keyword">int</span> measureHeight = View.MeasureSpec.makeMeasureSpec(height, View.MeasureSpec.AT_MOST);</span><br><span class="line"></span><br><span class="line">        view.measure(measureWidth, measureHeight);</span><br><span class="line">        <span class="comment">//调用layout方法布局后，可以得到view的尺寸</span></span><br><span class="line">        view.layout(<span class="number">0</span>, <span class="number">0</span>, view.getMeasuredWidth(), view.getMeasuredHeight());</span><br><span class="line"></span><br><span class="line">        final Bitmap bitmap = Bitmap.createBitmap(view.getWidth(), view.getHeight(), Bitmap.Config.ARGB_8888);</span><br><span class="line">        Canvas canvas = <span class="built_in">new</span> Canvas(bitmap);</span><br><span class="line">        canvas.drawColor(Color.WHITE);</span><br><span class="line">        view.draw(canvas);</span><br><span class="line">        <span class="keyword">return</span> bitmap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存bitmap到相册</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    private void saveBitmapToAlbum(Bitmap bitmap) &#123;</span><br><span class="line">        final File appDir = <span class="built_in">new</span> File(activity.getExternalCacheDir(), <span class="string">&quot;image&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!appDir.exists()) &#123;</span><br><span class="line">            appDir.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        final String fileName = System.currentTimeMillis() + <span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line">        final File file = <span class="built_in">new</span> File(appDir, fileName);</span><br><span class="line">        try &#123;</span><br><span class="line">            FileOutputStream fos = <span class="built_in">new</span> FileOutputStream(file);</span><br><span class="line">            try &#123;</span><br><span class="line">                bitmap.compress(Bitmap.CompressFormat.JPEG, <span class="number">90</span>, fos);</span><br><span class="line">                fos.flush();</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                fos.<span class="built_in">close</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//把文件插入到系统相册</span></span><br><span class="line">            MediaStore.Images.Media.insertImage(activity.getContentResolver(), file.getAbsolutePath(), fileName, null);</span><br><span class="line">            <span class="comment">//通知图库更新</span></span><br><span class="line">            <span class="comment">//activity.sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE, Uri.parse(&quot;file://&quot; + file.getAbsolutePath())));</span></span><br><span class="line">            activity.sendBroadcast(<span class="built_in">new</span> Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE, Uri.fromFile(<span class="built_in">new</span> File(file.getPath()))));</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android项目迁移到 AndroidX</title>
      <link href="2021/09/30/Android%E9%A1%B9%E7%9B%AE%E8%BF%81%E7%A7%BB%E5%88%B0-AndroidX/"/>
      <url>2021/09/30/Android%E9%A1%B9%E7%9B%AE%E8%BF%81%E7%A7%BB%E5%88%B0-AndroidX/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-Android-Studio-迁移现有项目"><a href="#使用-Android-Studio-迁移现有项目" class="headerlink" title="使用 Android Studio 迁移现有项目"></a>使用 Android Studio 迁移现有项目</h1><p>使用 Android Studio 3.2 及更高版本，您只需从菜单栏中依次选择 Refactor &gt; Migrate to AndroidX，即可将现有项目迁移到 AndroidX。</p><p>重构命令使用两个标记。默认情况下，这两个标记在 gradle.properties 文件中都设为 true：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Android 插件会使用对应的 AndroidX 库而非支持库。</span></span><br><span class="line">android.useAndroidX=<span class="literal">true</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Android 插件会通过重写现有第三方库的二进制文件，自动将这些库迁移为使用 AndroidX。</span></span><br><span class="line">android.enableJetifier=<span class="literal">true</span></span><br></pre></td></tr></table></figure><hr><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><blockquote><p>1、如果要迁移<strong>未使用任何第三方库</strong>但<strong>带有需要转换的依赖项</strong>的现有项目，可以将 android.useAndroidX 标记设置为true，并将 android.enableJetifier 标记设置为 false。</p></blockquote><blockquote><p>2、执行迁移之前，请先将应用更新到最新版本。 我们建议您将项目更新为使用支持库的最终版本：版本 28.0.0。 这是因为，1.0.0 版本的 AndroidX 工件是与支持库 28.0.0 工件等效的二进制文件。</p></blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>官方文档：<a href="https://developer.android.google.cn/jetpack/androidx/migrate?hl=zh-cn">迁移到 AndroidX</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android软键盘——InputMethodManager使用：显示、隐藏软键盘</title>
      <link href="2021/09/28/Android%E8%BD%AF%E9%94%AE%E7%9B%98%E2%80%94%E2%80%94InputMethodManager%E4%BD%BF%E7%94%A8%EF%BC%9A%E6%98%BE%E7%A4%BA%E3%80%81%E9%9A%90%E8%97%8F%E8%BD%AF%E9%94%AE%E7%9B%98/"/>
      <url>2021/09/28/Android%E8%BD%AF%E9%94%AE%E7%9B%98%E2%80%94%E2%80%94InputMethodManager%E4%BD%BF%E7%94%A8%EF%BC%9A%E6%98%BE%E7%A4%BA%E3%80%81%E9%9A%90%E8%97%8F%E8%BD%AF%E9%94%AE%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<p>@[toc]</p><hr><h1 id="1、InputMethodManager介绍"><a href="#1、InputMethodManager介绍" class="headerlink" title="1、InputMethodManager介绍"></a>1、InputMethodManager介绍</h1><blockquote><p>InputMethodManager是一个用于控制显示或隐藏输入法面板的类。</p></blockquote><p>获取InPutMethodManager的方法很简单：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">InputMethodManager imm = (InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);</span><br></pre></td></tr></table></figure><hr><h1 id="2、InputMethodManager用法"><a href="#2、InputMethodManager用法" class="headerlink" title="2、InputMethodManager用法"></a>2、InputMethodManager用法</h1><h2 id="2-1、显示软键盘"><a href="#2-1、显示软键盘" class="headerlink" title="2.1、显示软键盘"></a>2.1、显示软键盘</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//et获取焦点</span></span><br><span class="line">et.requestFocus();</span><br><span class="line"><span class="comment">//获取imm</span></span><br><span class="line">final InputMethodManager imm = (InputMethodManager) et.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);</span><br><span class="line"><span class="keyword">if</span> (null != imm) &#123;</span><br><span class="line"><span class="comment">//显示软键盘</span></span><br><span class="line">imm.showSoftInput(et,InputMethodManager.SHOW_FORCED);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2、隐藏软键盘"><a href="#2-2、隐藏软键盘" class="headerlink" title="2.2、隐藏软键盘"></a>2.2、隐藏软键盘</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//et获取焦点</span></span><br><span class="line">et.requestFocus();</span><br><span class="line"><span class="comment">//获取imm</span></span><br><span class="line">final InputMethodManager imm = (InputMethodManager) et.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);</span><br><span class="line"><span class="keyword">if</span> (null != imm) &#123;</span><br><span class="line"><span class="comment">//隐藏软键盘</span></span><br><span class="line">imm.hideSoftInputFromWindow(activity.getCurrentFocus().getWindowToken(),InputMethodManager.HIDE_NOT_ALWAYS);</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line">imm.hideSoftInputFromWindow(et.getWindowToken(),InputMethodManager.HIDE_NOT_ALWAYS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3、实现输入法在窗口上切换显示，如果输入法在窗口已经显示，则隐藏；如果已经隐藏，则显示软键盘。"><a href="#2-3、实现输入法在窗口上切换显示，如果输入法在窗口已经显示，则隐藏；如果已经隐藏，则显示软键盘。" class="headerlink" title="2.3、实现输入法在窗口上切换显示，如果输入法在窗口已经显示，则隐藏；如果已经隐藏，则显示软键盘。"></a>2.3、实现输入法在窗口上切换显示，如果输入法在窗口已经显示，则隐藏；如果已经隐藏，则显示软键盘。</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//et获取焦点</span></span><br><span class="line">et.requestFocus();</span><br><span class="line"><span class="comment">//获取imm</span></span><br><span class="line">final InputMethodManager imm = (InputMethodManager) et.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);</span><br><span class="line"><span class="keyword">if</span> (null != imm) &#123;</span><br><span class="line"><span class="comment">//输入法在窗口已经显示，则隐藏；如果已经隐藏，则显示软键盘</span></span><br><span class="line">imm.toggleSoftInput(<span class="number">0</span>, InputMethodManager.HIDE_NOT_ALWAYS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4、判断当前软键盘状态是打开-or-关闭"><a href="#2-4、判断当前软键盘状态是打开-or-关闭" class="headerlink" title="2.4、判断当前软键盘状态是打开 or 关闭"></a>2.4、判断当前软键盘状态是打开 or 关闭</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">InputMethodManager imm =(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);</span><br><span class="line">boolean isOpen=imm.isActive();</span><br><span class="line"><span class="comment">//isOpen为true，则当前输入法是打开的；反之则是关闭的。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git 常用命令整理</title>
      <link href="2021/09/22/Git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/"/>
      <url>2021/09/22/Git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>@[toc]</p><hr><h1 id="Git-常用命令整理"><a href="#Git-常用命令整理" class="headerlink" title="Git 常用命令整理"></a>Git 常用命令整理</h1><h2 id="1-仓库"><a href="#1-仓库" class="headerlink" title="1.仓库"></a>1.仓库</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 在当前目录新建一个Git代码库</span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"># 新建一个目录，将其初始化为Git代码库</span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"># 下载一个项目和它的整个代码历史</span><br><span class="line">$ git clone [url]</span><br></pre></td></tr></table></figure><hr><h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 显示当前的Git配置</span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"># 编辑Git配置文件</span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"># 设置提交代码时的用户信息</span><br><span class="line">$ git config [--global] user.name <span class="string">&quot;[name]&quot;</span></span><br><span class="line">$ git config [--global] user.email <span class="string">&quot;[email address]&quot;</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-增加-删除文件"><a href="#3-增加-删除文件" class="headerlink" title="3.增加/删除文件"></a>3.增加/删除文件</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 添加指定文件到暂存区</span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"># 添加指定目录到暂存区，包括子目录</span><br><span class="line">$ git add [dir]</span><br><span class="line"></span><br><span class="line"># 添加当前目录的所有文件到暂存区</span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"># 添加每个变化前，都会要求确认</span><br><span class="line"># 对于同一个文件的多处变化，可以实现分次提交</span><br><span class="line">$ git add -p</span><br><span class="line"></span><br><span class="line"># 删除工作区文件，并且将这次删除放入暂存区</span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"># 停止追踪指定文件，但该文件会保留在工作区</span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"></span><br><span class="line"># 改名文件，并且将这个改名放入暂存区</span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure><hr><h2 id="4-代码提交"><a href="#4-代码提交" class="headerlink" title="4.代码提交"></a>4.代码提交</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 提交暂存区到仓库区</span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"># 提交暂存区的指定文件到仓库区</span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"># 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"># 提交时显示所有diff信息</span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"># 使用一次新的commit，替代上一次提交</span><br><span class="line"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"># 重做上一次commit，并包括指定文件的新变化</span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure><hr><h2 id="5-分支"><a href="#5-分支" class="headerlink" title="5.分支"></a>5.分支</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"># 列出所有本地分支</span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"># 列出所有远程分支</span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"># 列出所有本地分支和远程分支</span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"># 新建一个分支，但依然停留在当前分支</span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，并切换到该分支</span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，指向指定commit</span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，与指定的远程分支建立追踪关系</span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"># 切换到指定分支，并更新工作区</span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"># 切换到上一个分支</span><br><span class="line">$ git checkout -</span><br><span class="line"></span><br><span class="line"># 建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class="line">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"># 合并指定分支到当前分支</span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"># 选择一个commit，合并进当前分支</span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"># 删除分支</span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"># 删除远程分支</span><br><span class="line">$ git push origin --<span class="built_in">delete</span> [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure><hr><h2 id="6-标签"><a href="#6-标签" class="headerlink" title="6.标签"></a>6.标签</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 列出所有tag</span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"># 新建一个tag在当前commit</span><br><span class="line">$ git tag [tag]</span><br><span class="line"></span><br><span class="line"># 新建一个tag在指定commit</span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"># 删除本地tag</span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"></span><br><span class="line"># 删除远程tag</span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"></span><br><span class="line"># 查看tag信息</span><br><span class="line">$ git show [tag]</span><br><span class="line"></span><br><span class="line"># 提交指定tag</span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"># 提交所有tag</span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"># 新建一个分支，指向某个tag</span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure><hr><h2 id="7-查看信息"><a href="#7-查看信息" class="headerlink" title="7.查看信息"></a>7.查看信息</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"># 显示有变更的文件</span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"># 显示当前分支的版本历史</span><br><span class="line">$ git log</span><br><span class="line"></span><br><span class="line"># 显示commit历史，以及每次commit发生变更的文件</span><br><span class="line">$ git log --stat</span><br><span class="line"></span><br><span class="line"># 搜索提交历史，根据关键词</span><br><span class="line">$ git log -S [keyword]</span><br><span class="line"></span><br><span class="line"># 显示某个commit之后的所有变动，每个commit占据一行</span><br><span class="line">$ git log [tag] HEAD --pretty=format:%s</span><br><span class="line"></span><br><span class="line"># 显示某个commit之后的所有变动，其<span class="string">&quot;提交说明&quot;</span>必须符合搜索条件</span><br><span class="line">$ git log [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"># 显示某个文件的版本历史，包括文件改名</span><br><span class="line">$ git log --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"># 显示指定文件相关的每一次diff</span><br><span class="line">$ git log -p [file]</span><br><span class="line"></span><br><span class="line"># 显示过去<span class="number">5</span>次提交</span><br><span class="line">$ git log <span class="number">-5</span> --pretty --oneline</span><br><span class="line"></span><br><span class="line"># 显示所有提交过的用户，按提交次数排序</span><br><span class="line">$ git shortlog -sn</span><br><span class="line"></span><br><span class="line"># 显示指定文件是什么人在什么时间修改过</span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"># 显示暂存区和工作区的差异</span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"># 显示暂存区和上一个commit的差异</span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"></span><br><span class="line"># 显示工作区与当前分支最新commit之间的差异</span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"># 显示两次提交之间的差异</span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"># 显示今天你写了多少行代码</span><br><span class="line">$ git diff --shortstat <span class="string">&quot;@&#123;0 day ago&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"># 显示某次提交的元数据和内容变化</span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"># 显示某次提交发生变化的文件</span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"># 显示某次提交时，某个文件的内容</span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"># 显示当前分支的最近几次提交</span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><hr><h2 id="8-远程同步"><a href="#8-远程同步" class="headerlink" title="8.远程同步"></a>8.远程同步</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 下载远程仓库的所有变动</span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"># 显示所有远程仓库</span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"># 显示某个远程仓库的信息</span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"># 增加一个新的远程仓库，并命名</span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"># 取回远程仓库的变化，并与本地分支合并</span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"># 上传本地指定分支到远程仓库</span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"># 强行推送当前分支到远程仓库，即使有冲突</span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"># 推送所有分支到远程仓库</span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure><hr><h2 id="9-撤销"><a href="#9-撤销" class="headerlink" title="9.撤销"></a>9.撤销</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># 恢复暂存区的指定文件到工作区</span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"># 恢复某个commit的指定文件到暂存区和工作区</span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"># 恢复暂存区的所有文件到工作区</span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"># 重置暂存区与工作区，与上一次commit保持一致</span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"># 新建一个commit，用来撤销指定commit</span><br><span class="line"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br><span class="line">$ git revert [commit]</span><br><span class="line"></span><br><span class="line">暂时将未提交的变化移除，稍后再移入</span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><hr><h2 id="10-其他"><a href="#10-其他" class="headerlink" title="10.其他"></a>10.其他</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 生成一个可供发布的压缩包</span><br><span class="line">$ git archive</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android Studio 查看项目中jar包依赖关系 依赖树 父子级</title>
      <link href="2021/09/02/Android-Studio-%E6%9F%A5%E7%9C%8B%E9%A1%B9%E7%9B%AE%E4%B8%ADjar%E5%8C%85%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB-%E4%BE%9D%E8%B5%96%E6%A0%91-%E7%88%B6%E5%AD%90%E7%BA%A7/"/>
      <url>2021/09/02/Android-Studio-%E6%9F%A5%E7%9C%8B%E9%A1%B9%E7%9B%AE%E4%B8%ADjar%E5%8C%85%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB-%E4%BE%9D%E8%B5%96%E6%A0%91-%E7%88%B6%E5%AD%90%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="命令行方法"><a href="#命令行方法" class="headerlink" title="命令行方法"></a>命令行方法</h1><ul><li>windos 版   </li></ul><blockquote><p>studio里命令行(Terminal)输入<br>gradlew -q app:dependencies</p></blockquote><ul><li>mac 版      <blockquote><p>输入 ./gradlew -q app:dependencies<br>或者 bash gradlew -q app:dependencies</p></blockquote></li></ul><blockquote><p>把输入打印到a.txt文件中：<br>bash gradlew -q app:dependencies &gt;&gt; a.txt</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>启动AndroidStudio报错Missing essential plugin:org.jetbrains.android Please reinstall Android Studio...</title>
      <link href="2021/08/26/%E5%90%AF%E5%8A%A8AndroidStudio%E6%8A%A5%E9%94%99Missing-essential-plugin-org-jetbrains-android-Please-reinstall-Android-Studio/"/>
      <url>2021/08/26/%E5%90%AF%E5%8A%A8AndroidStudio%E6%8A%A5%E9%94%99Missing-essential-plugin-org-jetbrains-android-Please-reinstall-Android-Studio/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>今天升级Android Studio 后，打算重新启动，却发现启动报错如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Missing essential plugin:</span><br><span class="line">org.jetbrains.android</span><br><span class="line">Please reinstall Android Studio from scratch.</span><br></pre></td></tr></table></figure><p><img  src="https://img-blog.csdnimg.cn/2ccbde82232b4f76994a97a5118dfad8.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBAZmVuZ2xvbG8=,size_45,color_FFFFFF,t_70,g_se,x_16"  ><span class="image-caption">在这里插入图片描述</span></p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><blockquote><p>导致这个问题最主要的问题可能是版本不一致或插件等问题</p></blockquote><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><h5 id="1、Windows版本Android-Studio下解决方案"><a href="#1、Windows版本Android-Studio下解决方案" class="headerlink" title="1、Windows版本Android Studio下解决方案"></a>1、Windows版本Android Studio下解决方案</h5><blockquote><p>如下图所示：<br>1、打开windows目录下该路径，其中AppData默认是隐藏文件，需要先打开查看隐藏文件；<br>2、打开 disabled_plugins.txt文件，删除文件中org.jetbrains开头的文件字样即可。</p></blockquote><p><img  src="https://img-blog.csdnimg.cn/b4ea19e569f643fd9e63fcefbe8c3400.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBAZmVuZ2xvbG8=,size_50,color_FFFFFF,t_70,g_se,x_16"  ><span class="image-caption">在这里插入图片描述</span></p><h5 id="2、Mac版本Android-Studio下解决方案"><a href="#2、Mac版本Android-Studio下解决方案" class="headerlink" title="2、Mac版本Android Studio下解决方案"></a>2、Mac版本Android Studio下解决方案</h5><blockquote><p>1、打开Mac下如下目录：/Users/apple/Library/Application Support/Google/AndroidStudio2020.3/disabled_plugins.txt。<br>其中：<br>（1）apple -&gt; 代表用户，AndroidStudio2020.3 -&gt; 代表使用的as版本<br>（2）Library -&gt; 指资源库，默认为隐藏文件不可见，需要打开查看隐藏文件。<br>2、打开该文件，如下图所示，删除引起问题的配置即可</p></blockquote><p>disabled_plugins.txt：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.vladsch.idea.multimarkdown</span><br><span class="line">org.jetbrains.kotlin</span><br></pre></td></tr></table></figure><p>我的项目本次报错为Kotlin插件引起的，所以只需要删除“org.jetbrains.kotlin”这行，然后重新启动Android Studio即可。<br>对应的如果你明确知道是因为哪个插件报错，删除对应插件配置即可。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>构建项目报错：Task ‘xxx’ not found in root project ‘xxx’. Some candidate…</title>
      <link href="2021/08/24/%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8A%A5%E9%94%99%EF%BC%9ATask-%E2%80%98xxx%E2%80%99-not-found-in-root-project-%E2%80%98xxx%E2%80%99-Some-candidate%E2%80%A6/"/>
      <url>2021/08/24/%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8A%A5%E9%94%99%EF%BC%9ATask-%E2%80%98xxx%E2%80%99-not-found-in-root-project-%E2%80%98xxx%E2%80%99-Some-candidate%E2%80%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><blockquote><p>Task ‘xxx’ not found in root project ‘xxx’. Some candidate…</p></blockquote><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><blockquote><p>方案1<br>close项目，重新import，不是open，是import ；<br>删除.idea、删除.gradle 然后关闭项目；<br>从新从目录打开项目；</p></blockquote><blockquote><p>方案2<br>在根目录的build.gradle文件的首行加入:<br><code>task assemble&#123;&#125;</code></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac之——命令行快速入门</title>
      <link href="2021/08/18/Mac%E4%B9%8B%E2%80%94%E2%80%94%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>2021/08/18/Mac%E4%B9%8B%E2%80%94%E2%80%94%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>@[toc]</p><hr><h1 id="1-常用命令整理"><a href="#1-常用命令整理" class="headerlink" title="1.常用命令整理"></a>1.常用命令整理</h1><ul><li>pwd:打印工作目录，也可叫做输出工作目录，英文全称：print working directory</li><li>mkdir:创建目录，英文全称：make directory</li><li>touch:创建空文件</li><li>rmdir:删除路径</li><li>rm:删除文件</li><li>cd:更改目录</li><li>ls:列出目录下的内容</li><li>pushd:推入路径</li><li>popd:弹出路径</li><li>cp:复制</li><li>mv:移动文件/重命名</li><li>less:查看文件内容</li><li>cat:显示文件内容</li><li>find:寻找文件</li><li>echo:打印一些参数</li><li>exit:退出</li><li>sudo:成为超级用户或root，英文全称：super user do</li></ul><hr><h1 id="2-命令行实现及注意事项"><a href="#2-命令行实现及注意事项" class="headerlink" title="2.命令行实现及注意事项"></a>2.命令行实现及注意事项</h1><hr><h2 id="pwd-打印工作目录"><a href="#pwd-打印工作目录" class="headerlink" title="pwd 打印工作目录"></a>pwd 打印工作目录</h2><blockquote><p>当你键入太多命令，一下找不到自己现在所处于的路径时，pwd可以帮你很好的找到</p></blockquote><p><img  src="https://img-blog.csdnimg.cn/832bef641b154aefb05215858360e446.png"  ><span class="image-caption">在这里插入图片描述</span></p><hr><h2 id="mkdir-新建目录"><a href="#mkdir-新建目录" class="headerlink" title="mkdir 新建目录"></a>mkdir 新建目录</h2><blockquote><p>新建目录，可以是以前没有的目录，也可以在已有的目录下追加新的目录，但是值得注意的是，只用mkdir不能同时创建父子目录，如下图中tmp11还没有存在的情况下，不能直接创建,tmp111,如需同时创建多层目录，可以使用mkdir -p</p></blockquote><p><img  src="https://img-blog.csdnimg.cn/16b34e02ba814e9b8067a03bf0135628.png"  ><span class="image-caption">在这里插入图片描述</span></p><hr><h2 id="touch-创建空文件"><a href="#touch-创建空文件" class="headerlink" title="touch 创建空文件"></a>touch 创建空文件</h2><blockquote><p>创建空文件,注意这种方式不能用来创建文件夹</p></blockquote><p><img  src="https://img-blog.csdnimg.cn/ee5ac6d66eee469f9c54f2694a60bb49.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><hr><h2 id="rmdir-删除路径"><a href="#rmdir-删除路径" class="headerlink" title="rmdir 删除路径"></a>rmdir 删除路径</h2><blockquote><p>删除路径,值得注意的是，在删除路径的时候需要指定到它的上一级目录，要不会报错，如下图，指定到了tmp1,可以rmdir下面的tmp11,但是当目录退到tmp时，就不能删除tmp11了，如果遇到你确定是空目录但是它拒绝删除改目录时，可以键入rm -rf&lt; dir &gt;即可，其中dir 用实际的目录名替代就可以</p></blockquote><p><img  src="https://img-blog.csdnimg.cn/294cbff217a144c6985cd97b12d27e15.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><hr><h2 id="rm-删除文件"><a href="#rm-删除文件" class="headerlink" title="rm 删除文件"></a>rm 删除文件</h2><blockquote><p>删除文件</p></blockquote><p><img  src="https://img-blog.csdnimg.cn/b18587c7acc54f9c9ac20f31106afed3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><hr><h2 id="cd-更改目录"><a href="#cd-更改目录" class="headerlink" title="cd 更改目录"></a>cd 更改目录</h2><blockquote><p>更改目录，其实也就是指定到对应的目录，这种指定不能跳跃式的，必须一步步的往下指定，如下图不能直接指定到tmp1,要先指定到tmp,在指定到tmp1,也可以直接cd tmp/tmp1 ,可以使用cd直接回到最开始目录，也可以使用cd ..回到上一层目录</p></blockquote><p><img  src="https://img-blog.csdnimg.cn/83f7aa5b4ebd45e6be1f88f999dd5ece.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span><br><img  src="https://img-blog.csdnimg.cn/9573b15512bd415692aa9b6522ce026f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><hr><h2 id="ls-列出目录下的内容"><a href="#ls-列出目录下的内容" class="headerlink" title="ls 列出目录下的内容"></a>ls 列出目录下的内容</h2><blockquote><p>列出目录下的内容</p></blockquote><p><img  src="https://img-blog.csdnimg.cn/40784778894d4b1f8451d6a05664148a.png"  ><span class="image-caption">在这里插入图片描述</span></p><hr><h2 id="pushd和popd"><a href="#pushd和popd" class="headerlink" title="pushd和popd"></a>pushd和popd</h2><blockquote><p>pushd保存当前路径并转到一个新的路径<br>popd回到先前保存的路径</p></blockquote><p><img  src="https://img-blog.csdnimg.cn/9d28ed91aff045798578bd1516b37274.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><hr><h2 id="cp-复制"><a href="#cp-复制" class="headerlink" title="cp 复制"></a>cp 复制</h2><blockquote><p>复制,如果是文件，可以直接复制，如果是复制整个文件夹，则用cp -r</p></blockquote><p><img  src="https://img-blog.csdnimg.cn/515c7be50d824acbba6bd7be27f236f4.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><hr><h2 id="mv-移动文件-重命名"><a href="#mv-移动文件-重命名" class="headerlink" title="mv 移动文件/重命名"></a>mv 移动文件/重命名</h2><blockquote><p>移动文件,换种说法就是重命名</p></blockquote><p><img  src="https://img-blog.csdnimg.cn/714bb766b0b444edb70488a427940da8.png"  ><span class="image-caption">在这里插入图片描述</span></p><hr><h2 id="less-查看文件内容"><a href="#less-查看文件内容" class="headerlink" title="less 查看文件内容"></a>less 查看文件内容</h2><blockquote><p>查看文件内容，可以查询某个路径下的文件内容，查看后按q退出</p></blockquote><p><img  src="https://img-blog.csdnimg.cn/3b4bf5521f954a43b0e068490efc39c2.png"  ><span class="image-caption">在这里插入图片描述</span></p><hr><h2 id="cat-显示文件内容"><a href="#cat-显示文件内容" class="headerlink" title="cat 显示文件内容"></a>cat 显示文件内容</h2><blockquote><p>显示文件内容</p></blockquote><p><img  src="https://img-blog.csdnimg.cn/c6b3d56ec4a24a8aac53f6a49979c944.png"  ><span class="image-caption">在这里插入图片描述</span></p><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android 11 「外部存储」权限适配方案——权限申请框架推荐</title>
      <link href="2021/08/08/Android-11-%E3%80%8C%E5%A4%96%E9%83%A8%E5%AD%98%E5%82%A8%E3%80%8D%E6%9D%83%E9%99%90%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88%E2%80%94%E2%80%94%E6%9D%83%E9%99%90%E7%94%B3%E8%AF%B7%E6%A1%86%E6%9E%B6%E6%8E%A8%E8%8D%90/"/>
      <url>2021/08/08/Android-11-%E3%80%8C%E5%A4%96%E9%83%A8%E5%AD%98%E5%82%A8%E3%80%8D%E6%9D%83%E9%99%90%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88%E2%80%94%E2%80%94%E6%9D%83%E9%99%90%E7%94%B3%E8%AF%B7%E6%A1%86%E6%9E%B6%E6%8E%A8%E8%8D%90/</url>
      
        <content type="html"><![CDATA[<p>@[toc]</p><hr><h1 id="1-权限种类"><a href="#1-权限种类" class="headerlink" title="1.权限种类"></a>1.权限种类</h1><h2 id="1-1权限种类区分-普通权限、危险权限、特殊权限"><a href="#1-1权限种类区分-普通权限、危险权限、特殊权限" class="headerlink" title="1.1权限种类区分-普通权限、危险权限、特殊权限"></a>1.1权限种类区分-普通权限、危险权限、特殊权限</h2><blockquote><p>首先 Android 的权限大致分为三种：<br>普通权限：只需要在清单文件中注册即可<br>危险权限：需要在代码中动态申请，以弹系统 Dialog 的形式进行请求<br>特殊权限：需要在代码中动态申请，以跳系统 Activity 的形式进行请求</p></blockquote><h2 id="1-2存储权限-变化"><a href="#1-2存储权限-变化" class="headerlink" title="1.2存储权限-变化"></a>1.2存储权限-变化</h2><blockquote><p>存储权限：<br>在 Android 6.0 之后就变成了危险权限；<br>在 Android 11 上面变成了特殊权限；<br>申请方式的发生了不同</p></blockquote><hr><h1 id="2-外部存储和内部存储对比"><a href="#2-外部存储和内部存储对比" class="headerlink" title="2.外部存储和内部存储对比"></a>2.外部存储和内部存储对比</h1><h2 id="2-1外部存储在手机哪个位置？"><a href="#2-1外部存储在手机哪个位置？" class="headerlink" title="2.1外部存储在手机哪个位置？"></a>2.1外部存储在手机哪个位置？</h2><blockquote><p>Android4.4之前：<br>内部存储在手机ROM上的一块存储区域；<br>外部存储在SD卡上；</p><p>Android4.4之后：<br>内部存储在手机ROM上的一块存储区域；<br>外部存储也在手机ROM上的一块存储区域；</p></blockquote><p><img  src="https://img-blog.csdnimg.cn/92c32138f23849be9cc6cdca94c0d98d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><h2 id="2-2外部存储和内部存储的访问权限区别"><a href="#2-2外部存储和内部存储的访问权限区别" class="headerlink" title="2.2外部存储和内部存储的访问权限区别"></a>2.2外部存储和内部存储的访问权限区别</h2><p><img  src="https://img-blog.csdnimg.cn/10dd9eeae99d45c392692a101d50bae6.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><hr><h1 id="3-外部存储适配方案"><a href="#3-外部存储适配方案" class="headerlink" title="3.外部存储适配方案"></a>3.外部存储适配方案</h1><h2 id="3-1-Android-10-0-以下外部存储权限适配"><a href="#3-1-Android-10-0-以下外部存储权限适配" class="headerlink" title="3.1 Android 10.0 以下外部存储权限适配"></a>3.1 Android 10.0 以下外部存储权限适配</h2><ul><li><strong>升级 targetSdkVersion</strong></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">android </span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        targetSdkVersion <span class="number">23</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>添加清单权限</strong></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=<span class="string">&quot;android.permission.READ_EXTERNAL_STORAGE&quot;</span> /&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>如果 targetSdkVersion &gt;= 29 上，还需要在清单文件中加上</strong></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;application</span><br><span class="line">    android:requestLegacyExternalStorage=<span class="string">&quot;true&quot;</span>&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>代码动态申请</strong></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">public final class PermissionActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    private static final <span class="keyword">int</span> REQUEST_CODE = <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        requestPermission();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void requestPermission() &#123;</span><br><span class="line">    <span class="comment">//判断版本大于等于android 6.0</span></span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;</span><br><span class="line">            <span class="comment">// 先判断有没有权限</span></span><br><span class="line">            <span class="keyword">if</span> (ActivityCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED &amp;&amp;</span><br><span class="line">                    ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">                writeFile();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ActivityCompat.requestPermissions(this, <span class="built_in">new</span> String[]&#123;Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;, REQUEST_CODE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            writeFile();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onRequestPermissionsResult(<span class="keyword">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class="keyword">int</span>[] grantResults) &#123;</span><br><span class="line">        super.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class="line">        <span class="keyword">if</span> (requestCode == REQUEST_CODE) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ActivityCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED &amp;&amp;</span><br><span class="line">                    ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">                writeFile();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ToastUtils.show(<span class="string">&quot;存储权限获取失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟文件写入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    private void writeFile() &#123;</span><br><span class="line">        ToastUtils.show(<span class="string">&quot;写入文件成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-Android-11-及以上申请外部存储权限"><a href="#3-2-Android-11-及以上申请外部存储权限" class="headerlink" title="3.2 Android 11 及以上申请外部存储权限"></a>3.2 Android 11 及以上申请外部存储权限</h2><ul><li><strong>升级 targetSdkVersion</strong></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">android </span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        targetSdkVersion <span class="number">30</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>添加清单权限</strong></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=<span class="string">&quot;android.permission.READ_EXTERNAL_STORAGE&quot;</span> /&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">&quot;android.permission.MANAGE_EXTERNAL_STORAGE&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>代码动态申请</strong></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">public final class PermissionActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    private static final <span class="keyword">int</span> REQUEST_CODE = <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        requestPermission();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void requestPermission() &#123;</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.R) &#123;</span><br><span class="line">            <span class="comment">// 先判断有没有权限</span></span><br><span class="line">            <span class="keyword">if</span> (Environment.isExternalStorageManager()) &#123;</span><br><span class="line">                writeFile();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Intent intent = <span class="built_in">new</span> Intent(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION);</span><br><span class="line">                intent.setData(Uri.parse(<span class="string">&quot;package:&quot;</span> + context.getPackageName()));</span><br><span class="line">                startActivityForResult(intent, REQUEST_CODE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;</span><br><span class="line">            <span class="comment">// 先判断有没有权限</span></span><br><span class="line">            <span class="keyword">if</span> (ActivityCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED &amp;&amp;</span><br><span class="line">                    ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">                writeFile();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ActivityCompat.requestPermissions(this, <span class="built_in">new</span> String[]&#123;Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;, REQUEST_CODE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            writeFile();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onRequestPermissionsResult(<span class="keyword">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class="keyword">int</span>[] grantResults) &#123;</span><br><span class="line">        super.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class="line">        <span class="keyword">if</span> (requestCode == REQUEST_CODE) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ActivityCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED &amp;&amp;</span><br><span class="line">                    ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">                writeFile();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ToastUtils.show(<span class="string">&quot;存储权限获取失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onActivityResult(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, @Nullable Intent data) &#123;</span><br><span class="line">        super.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">        <span class="keyword">if</span> (requestCode == REQUEST_CODE &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.R) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Environment.isExternalStorageManager()) &#123;</span><br><span class="line">                writeFile();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ToastUtils.show(<span class="string">&quot;存储权限获取失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟文件写入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    private void writeFile() &#123;</span><br><span class="line">        ToastUtils.show(<span class="string">&quot;写入文件成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="4-权限申请框架推荐"><a href="#4-权限申请框架推荐" class="headerlink" title="4.权限申请框架推荐"></a>4.权限申请框架推荐</h1><h2 id="4-1-XXPermissions"><a href="#4-1-XXPermissions" class="headerlink" title="4.1 XXPermissions"></a>4.1 <a href="https://github.com/getActivity/XXPermissions">XXPermissions</a></h2><h2 id="4-1-AndPermission"><a href="#4-1-AndPermission" class="headerlink" title="4.1 AndPermission"></a>4.1 <a href="https://github.com/yanzhenjie/AndPermission">AndPermission</a></h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SQLite数据库——分页搜索查询</title>
      <link href="2021/08/04/SQLite%E6%95%B0%E6%8D%AE%E5%BA%93%E2%80%94%E2%80%94%E5%88%86%E9%A1%B5%E6%90%9C%E7%B4%A2%E6%9F%A5%E8%AF%A2/"/>
      <url>2021/08/04/SQLite%E6%95%B0%E6%8D%AE%E5%BA%93%E2%80%94%E2%80%94%E5%88%86%E9%A1%B5%E6%90%9C%E7%B4%A2%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<p>@[toc]</p><hr><h1 id="1-常用SQl查询语句"><a href="#1-常用SQl查询语句" class="headerlink" title="1.常用SQl查询语句"></a>1.常用SQl查询语句</h1><h2 id="1-1查询所有数据"><a href="#1-1查询所有数据" class="headerlink" title="1.1查询所有数据"></a>1.1查询所有数据</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">&quot;Select * From history&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="1-2倒序查询desc"><a href="#1-2倒序查询desc" class="headerlink" title="1.2倒序查询desc"></a>1.2倒序查询desc</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">&quot;Select * From &quot;</span> + HistoryHelper.TABLE_NAME + <span class="string">&quot; order by &quot;</span> + HistoryHelper.ID + <span class="string">&quot; desc &quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="1-3分页查询Limit、Offset"><a href="#1-3分页查询Limit、Offset" class="headerlink" title="1.3分页查询Limit、Offset"></a>1.3分页查询Limit、Offset</h2><p>这里查询12条，从0到11</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">&quot;Select * From &quot;</span> + HistoryHelper.TABLE_NAME + <span class="string">&quot; Limit 11 Offset 0&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="1-4倒序分页查询"><a href="#1-4倒序分页查询" class="headerlink" title="1.4倒序分页查询"></a>1.4倒序分页查询</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">&quot;Select * From &quot;</span> + HistoryHelper.TABLE_NAME + <span class="string">&quot; order by &quot;</span> + HistoryHelper.ID + <span class="string">&quot; desc &quot;</span> + <span class="string">&quot; Limit &#x27;&quot;</span> + pageCount + <span class="string">&quot;&#x27; Offset &#x27;&quot;</span> + ((page - <span class="number">1</span>) * pageCount) + <span class="string">&quot;&#x27;&quot;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>注意：order by和desc要写在Limit前面，同时非字符串的值需要加上单引号’ ‘，如” Limit ‘“ + pageCount + “’”;pageCount这个值我们就需要用’ ‘。</p></blockquote><h2 id="1-5倒序分页查询-搜索匹配关键字where…like"><a href="#1-5倒序分页查询-搜索匹配关键字where…like" class="headerlink" title="1.5倒序分页查询-搜索匹配关键字where…like"></a>1.5倒序分页查询-搜索匹配关键字where…like</h2><p>搜索用where条件， LIKE 运算符是用来匹配 <strong>通配符</strong> 指定模式的文本值<br>下面的sql语句我们匹配了我们数据表的time字段是否包含s文本值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">&quot;Select * From &quot;</span> + HistoryHelper.TABLE_NAME +  <span class="string">&quot; where &quot;</span> + HistoryHelper.Time + <span class="string">&quot; like &#x27;%&quot;</span> + s + <span class="string">&quot;%&#x27;&quot;</span>  + <span class="string">&quot; order by &quot;</span> + HistoryHelper.ID + <span class="string">&quot; desc &quot;</span>  + <span class="string">&quot; Limit &#x27;&quot;</span> + pageCount + <span class="string">&quot;&#x27; Offset &#x27;&quot;</span> + ((page - <span class="number">1</span>) * pageCount) + <span class="string">&quot;&#x27;&quot;</span>;</span><br></pre></td></tr></table></figure><hr><h1 id="2-源码"><a href="#2-源码" class="headerlink" title="2.源码"></a>2.源码</h1><h2 id="2-1分页查询demo"><a href="#2-1分页查询demo" class="headerlink" title="2.1分页查询demo"></a>2.1分页查询demo</h2><blockquote><p>查询上一页、下一页的方法： </p><ul><li>pageCount为你需要多少条数据 </li><li>page表示当前第几页，默认为1</li><li>当用户点击下一页，我们可以使用currentPage+=1，然后调用此方法 </li><li>同理上一页我们可以使用currentPage-=1</li><li>当然还要判断是不是第一页和最后一页</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果我要去11-20的Account表的数据 </span></span><br><span class="line"><span class="comment">//Select * From Account Limit 9 Offset 10; </span></span><br><span class="line"><span class="comment">//以上语句表示从Account表获取数据，跳过10行，取9行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * context 上下文</span></span><br><span class="line"><span class="comment"> * pageCount 查询多少条数据 </span></span><br><span class="line"><span class="comment"> * page 第几页，默认为1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    public static List&lt;CarResultMap&gt; getHistory(Activity context, <span class="keyword">int</span> pageCount, <span class="keyword">int</span> page) &#123;</span><br><span class="line">        HistoryHelper mHelper = <span class="built_in">new</span> HistoryHelper(context);</span><br><span class="line">        SQLiteDatabase db = mHelper.getReadableDatabase();</span><br><span class="line">        List&lt;CarResultMap&gt; carResultMap = <span class="built_in">new</span> ArrayList&lt;CarResultMap&gt;();</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            String sql = <span class="string">&quot;Select * From &quot;</span> + HistoryHelper.TABLE_NAME + <span class="string">&quot; order by &quot;</span> + HistoryHelper.ID + <span class="string">&quot; desc &quot;</span> + <span class="string">&quot; Limit &#x27;&quot;</span> + pageCount + <span class="string">&quot;&#x27; Offset &#x27;&quot;</span> + ((page - <span class="number">1</span>) * pageCount) + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">            Cursor cursor = db.rawQuery(sql, <span class="built_in">new</span> String[]&#123;&#125;);</span><br><span class="line">            <span class="keyword">if</span> (cursor.moveToFirst()) &#123;</span><br><span class="line">                do &#123;</span><br><span class="line">                    CarResultMap carResult = <span class="built_in">new</span> CarResultMap(cursor.getString(cursor.getColumnIndex(HistoryHelper.Time + <span class="string">&quot;&quot;</span>)),</span><br><span class="line">                            cursor.getString(cursor.getColumnIndex(HistoryHelper.CODE + <span class="string">&quot;&quot;</span>)),</span><br><span class="line">                            cursor.getString(cursor.getColumnIndex(HistoryHelper.CARTYPE + <span class="string">&quot;&quot;</span>)),</span><br><span class="line">                            cursor.getInt(cursor.getColumnIndex(HistoryHelper.TYPE + <span class="string">&quot;&quot;</span>)),</span><br><span class="line">                            cursor.getString(cursor.getColumnIndex(HistoryHelper.USER + <span class="string">&quot;&quot;</span>)),</span><br><span class="line">                            cursor.getString(cursor.getColumnIndex(HistoryHelper.PRESSURE + <span class="string">&quot;&quot;</span>)),</span><br><span class="line">                            cursor.getString(cursor.getColumnIndex(HistoryHelper.LEAKAGE + <span class="string">&quot;&quot;</span>)),</span><br><span class="line">                            cursor.getString(cursor.getColumnIndex(HistoryHelper.UNIT + <span class="string">&quot;&quot;</span>)),</span><br><span class="line">                            cursor.getString(cursor.getColumnIndex(HistoryHelper.RESULT + <span class="string">&quot;&quot;</span>)));</span><br><span class="line">                    carResultMap.add(carResult);</span><br><span class="line">                &#125;</span><br><span class="line">                while (cursor.moveToNext());</span><br><span class="line">            &#125;</span><br><span class="line">            cursor.<span class="built_in">close</span>();</span><br><span class="line">            db.<span class="built_in">close</span>();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            db.<span class="built_in">close</span>();</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> carResultMap;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> carResultMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-2分页查询-搜索关键字demo"><a href="#2-2分页查询-搜索关键字demo" class="headerlink" title="2.2分页查询-搜索关键字demo"></a>2.2分页查询-搜索关键字demo</h2><blockquote><p>搜索框 输入想要查询的关键字<br>根据用户输入的文本s返回我们需要的数据</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * context 上下文</span></span><br><span class="line"><span class="comment"> * pageCount 查询多少条数据 </span></span><br><span class="line"><span class="comment"> * page 第几页，默认为1</span></span><br><span class="line"><span class="comment"> * s 想要匹配的关键字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public static List&lt;CarResultMap&gt; getSearchHistory(Activity context, <span class="keyword">int</span> pageCount, <span class="keyword">int</span> page, String s) &#123;</span><br><span class="line">        HistoryHelper mHelper = <span class="built_in">new</span> HistoryHelper(context);</span><br><span class="line">        SQLiteDatabase db = mHelper.getReadableDatabase();</span><br><span class="line"></span><br><span class="line">        List&lt;CarResultMap&gt; carResultMap = <span class="built_in">new</span> ArrayList&lt;CarResultMap&gt;();</span><br><span class="line">        try &#123;</span><br><span class="line">            String sql = <span class="string">&quot;Select * From &quot;</span> + HistoryHelper.TABLE_NAME +  <span class="string">&quot; where &quot;</span> + HistoryHelper.USER</span><br><span class="line">                    + <span class="string">&quot; like &#x27;%&quot;</span> + s + <span class="string">&quot;%&#x27;&quot;</span></span><br><span class="line">                    + <span class="string">&quot; or &quot;</span> + HistoryHelper.Time</span><br><span class="line">                    + <span class="string">&quot; like &#x27;%&quot;</span> + s + <span class="string">&quot;%&#x27;&quot;</span></span><br><span class="line">                    + <span class="string">&quot; or &quot;</span> + HistoryHelper.USER</span><br><span class="line">                    + <span class="string">&quot; like &#x27;%&quot;</span> + s + <span class="string">&quot;%&#x27;&quot;</span></span><br><span class="line">                    + <span class="string">&quot; or &quot;</span> + HistoryHelper.TYPE</span><br><span class="line">                    + <span class="string">&quot; like &#x27;%&quot;</span> + s + <span class="string">&quot;%&#x27;&quot;</span></span><br><span class="line">                    + <span class="string">&quot; or &quot;</span> + HistoryHelper.CARTYPE</span><br><span class="line">                    + <span class="string">&quot; like &#x27;%&quot;</span> + s + <span class="string">&quot;%&#x27;&quot;</span></span><br><span class="line">                    + <span class="string">&quot; or &quot;</span> + HistoryHelper.CODE</span><br><span class="line">                    + <span class="string">&quot; like &#x27;%&quot;</span> + s + <span class="string">&quot;%&#x27;&quot;</span></span><br><span class="line">                    + <span class="string">&quot; or &quot;</span> + HistoryHelper.PRESSURE</span><br><span class="line">                    + <span class="string">&quot; like &#x27;%&quot;</span> + s + <span class="string">&quot;%&#x27;&quot;</span></span><br><span class="line">                    + <span class="string">&quot; or &quot;</span> + HistoryHelper.LEAKAGE</span><br><span class="line">                    + <span class="string">&quot; like &#x27;%&quot;</span> + s + <span class="string">&quot;%&#x27;&quot;</span></span><br><span class="line">                    + <span class="string">&quot; or &quot;</span> + HistoryHelper.RESULT</span><br><span class="line">                    + <span class="string">&quot; like &#x27;%&quot;</span> + s + <span class="string">&quot;%&#x27;&quot;</span></span><br><span class="line">                    + <span class="string">&quot; order by &quot;</span> + HistoryHelper.ID + <span class="string">&quot; desc &quot;</span>  + <span class="string">&quot; Limit &#x27;&quot;</span> + pageCount + <span class="string">&quot;&#x27; Offset &#x27;&quot;</span> + ((page - <span class="number">1</span>) * pageCount) + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">            Cursor cursor = db.rawQuery(sql,<span class="built_in">new</span> String[]&#123;&#125;);</span><br><span class="line">            <span class="keyword">if</span> (cursor.moveToFirst()) &#123;</span><br><span class="line">                do &#123;</span><br><span class="line">                    CarResultMap carResult = <span class="built_in">new</span> CarResultMap(cursor.getString(cursor.getColumnIndex(HistoryHelper.Time + <span class="string">&quot;&quot;</span>)),</span><br><span class="line">                            cursor.getString(cursor.getColumnIndex(HistoryHelper.CODE + <span class="string">&quot;&quot;</span>)),</span><br><span class="line">                            cursor.getString(cursor.getColumnIndex(HistoryHelper.CARTYPE + <span class="string">&quot;&quot;</span>)),</span><br><span class="line">                            cursor.getInt(cursor.getColumnIndex(HistoryHelper.TYPE + <span class="string">&quot;&quot;</span>)),</span><br><span class="line">                            cursor.getString(cursor.getColumnIndex(HistoryHelper.USER + <span class="string">&quot;&quot;</span>)),</span><br><span class="line">                            cursor.getString(cursor.getColumnIndex(HistoryHelper.PRESSURE + <span class="string">&quot;&quot;</span>)),</span><br><span class="line">                            cursor.getString(cursor.getColumnIndex(HistoryHelper.LEAKAGE + <span class="string">&quot;&quot;</span>)),</span><br><span class="line">                            cursor.getString(cursor.getColumnIndex(HistoryHelper.UNIT + <span class="string">&quot;&quot;</span>)),</span><br><span class="line">                            cursor.getString(cursor.getColumnIndex(HistoryHelper.RESULT + <span class="string">&quot;&quot;</span>)));</span><br><span class="line">                    carResultMap.add(carResult);</span><br><span class="line">                &#125;</span><br><span class="line">                while (cursor.moveToNext());</span><br><span class="line">            &#125;</span><br><span class="line">            cursor.<span class="built_in">close</span>();</span><br><span class="line">            db.<span class="built_in">close</span>();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            db.<span class="built_in">close</span>();</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> carResultMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android File文件「重命名」和「删除」操作</title>
      <link href="2021/07/09/Android-File%E6%96%87%E4%BB%B6%E3%80%8C%E9%87%8D%E5%91%BD%E5%90%8D%E3%80%8D%E5%92%8C%E3%80%8C%E5%88%A0%E9%99%A4%E3%80%8D%E6%93%8D%E4%BD%9C/"/>
      <url>2021/07/09/Android-File%E6%96%87%E4%BB%B6%E3%80%8C%E9%87%8D%E5%91%BD%E5%90%8D%E3%80%8D%E5%92%8C%E3%80%8C%E5%88%A0%E9%99%A4%E3%80%8D%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>@[toc]</p><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>最近做项目遇到一个需求：<br>1.要求当app版本升级覆盖安装后，清除app部分功能的本地缓存。<br>正好需要用到「重命名文件」和「删除文件」操作。</p></blockquote><hr><h1 id="1-重命名文件"><a href="#1-重命名文件" class="headerlink" title="1. 重命名文件"></a>1. 重命名文件</h1><p>renameTo 方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 重命名文件：</span></span><br><span class="line"><span class="comment">    * oldPath 和 newPath必须是新旧文件的绝对路径</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   public static boolean renameFile(String oldPath, String newPath) &#123;</span><br><span class="line">       <span class="keyword">if</span> (TextUtils.isEmpty(oldPath)) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (TextUtils.isEmpty(newPath)) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       File oldFile = <span class="built_in">new</span> File(oldPath);</span><br><span class="line">       File newFile = <span class="built_in">new</span> File(newPath);</span><br><span class="line">       <span class="keyword">if</span> (newFile.exists()) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//重命名</span></span><br><span class="line">       <span class="keyword">return</span> oldFile.renameTo(newFile);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><hr><h1 id="2-删除文件"><a href="#2-删除文件" class="headerlink" title="2. 删除文件"></a>2. 删除文件</h1><p>delete 方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 对文件夹下的文件进行清扫</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * @param topDir 文件夹目录</span></span><br><span class="line"><span class="comment">    * @param skips 需要保存不被清扫的文件</span></span><br><span class="line"><span class="comment">    * @param rmTopDir 是否清扫父文件 true：清扫 false：不清扫</span></span><br><span class="line"><span class="comment">    * @return 清扫结果</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   public static boolean cleanupDirFiles(@NonNull final String topDir, @NonNull final Set&lt;String&gt; skips, boolean rmTopDir) &#123;</span><br><span class="line">       final File file = <span class="built_in">new</span> File(topDir);</span><br><span class="line">       <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">           <span class="comment">//获取子文件列表</span></span><br><span class="line">               final File[] childFiles = file.listFiles();</span><br><span class="line">               <span class="keyword">if</span> ((null == childFiles) || (childFiles.length &lt;= <span class="number">0</span>)) &#123;</span><br><span class="line">               <span class="comment">//判断是否包含不被清扫的文件，如果包含，则不delete</span></span><br><span class="line">                   <span class="keyword">if</span> (!skips.contains(file.getAbsolutePath())) &#123;</span><br><span class="line">                       <span class="keyword">return</span> file.<span class="built_in">delete</span>();</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line">               <span class="keyword">for</span> (File f : childFiles) &#123;</span><br><span class="line">                   final String absPath = f.getAbsolutePath();</span><br><span class="line">                   <span class="comment">//判断是否包含不被清扫的文件，如果包含，则不delete</span></span><br><span class="line">                   <span class="keyword">if</span> (!skips.contains(absPath)) &#123;</span><br><span class="line">                       <span class="keyword">if</span> (!cleanupDirFiles(absPath, skips, <span class="literal">true</span>)) &#123;</span><br><span class="line">                           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//判断是否清扫父文件</span></span><br><span class="line">           <span class="keyword">if</span> (rmTopDir &amp;&amp; (!skips.contains(file.getAbsolutePath()))) &#123;</span><br><span class="line">               <span class="keyword">return</span> file.<span class="built_in">delete</span>();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用shell命令校验Android apk的签名信息、校验apk是否使用v1v2v3v4签名</title>
      <link href="2021/07/07/%E4%BD%BF%E7%94%A8shell%E5%91%BD%E4%BB%A4%E6%A0%A1%E9%AA%8CAndroid-apk%E7%9A%84%E7%AD%BE%E5%90%8D%E4%BF%A1%E6%81%AF%E3%80%81%E6%A0%A1%E9%AA%8Capk%E6%98%AF%E5%90%A6%E4%BD%BF%E7%94%A8v1v2v3v4%E7%AD%BE%E5%90%8D/"/>
      <url>2021/07/07/%E4%BD%BF%E7%94%A8shell%E5%91%BD%E4%BB%A4%E6%A0%A1%E9%AA%8CAndroid-apk%E7%9A%84%E7%AD%BE%E5%90%8D%E4%BF%A1%E6%81%AF%E3%80%81%E6%A0%A1%E9%AA%8Capk%E6%98%AF%E5%90%A6%E4%BD%BF%E7%94%A8v1v2v3v4%E7%AD%BE%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<p>@[toc]</p><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>最近项目打包新增v2签名，于是想在打包完成后校验是否已经成功使用了v2签名<br>故打算写一个shell脚本来执行校验</p></blockquote><hr><h1 id="1-查看apk文件的签名类型的shell命令"><a href="#1-查看apk文件的签名类型的shell命令" class="headerlink" title="1. 查看apk文件的签名类型的shell命令"></a>1. 查看apk文件的签名类型的shell命令</h1><p>shell命令：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apksigner verify --verbose xx.apk</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Verifies</span><br><span class="line">Verified using v1 scheme (JAR signing): <span class="literal">true</span></span><br><span class="line">Verified using v2 scheme (APK Signature Scheme v2): <span class="literal">true</span></span><br><span class="line">Verified using v3 scheme (APK Signature Scheme v3): <span class="literal">false</span></span><br><span class="line">Verified using v4 scheme (APK Signature Scheme v4): <span class="literal">false</span></span><br><span class="line">Verified <span class="keyword">for</span> SourceStamp: <span class="literal">false</span></span><br><span class="line">Number of signers: <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从结果中可以看出：该apk使用了v1和v2签名，没有使用v3和v4签名。</p><hr><h1 id="2-自动校验签名并输出的完整脚本"><a href="#2-自动校验签名并输出的完整脚本" class="headerlink" title="2. 自动校验签名并输出的完整脚本"></a>2. 自动校验签名并输出的完整脚本</h1><blockquote><p>由于项目使用Jenkins自动打包，既然有了shell命令，不妨让命令直接帮我做完，免得每次打完包还需要手动检测。<br>在Jenkins打包命令完成后，再配置校验签名的shell命令即可。</p></blockquote><h2 id="2-1-命令脚本"><a href="#2-1-命令脚本" class="headerlink" title="2.1 命令脚本"></a>2.1 命令脚本</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//本地apksigner的目录</span></span><br><span class="line">export ROOT_DOR=/Users/apple/Library/Android/sdk/build-tools/<span class="number">30.0</span><span class="number">.2</span> </span><br><span class="line"><span class="comment">//待验证签名的apk目录</span></span><br><span class="line">export ROOT_DIR=/Users/apple/Documents/MyWork/androidCode/workCode/ZjnxEbankUat_Scan/app/uat/debug</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历寻找该目录下的apk文件，可能有多个apk</span></span><br><span class="line">find $&#123;ROOT_DIR&#125; -name <span class="string">&quot;*.apk&quot;</span> | while read line</span><br><span class="line">do </span><br><span class="line"><span class="comment">//apk文件</span></span><br><span class="line">FILE=$&#123;line&#125;</span><br><span class="line"><span class="comment">//查看apk的签名信息</span></span><br><span class="line">$&#123;ROOT_DOR&#125;/apksigner verify --verbose <span class="string">&quot;$&#123;FILE&#125;&quot;</span> | while read line2</span><br><span class="line">do</span><br><span class="line"><span class="comment">//校验是否使用v1签名</span></span><br><span class="line">str1=<span class="string">&quot;Verified using v1 scheme&quot;</span></span><br><span class="line"><span class="keyword">if</span> [[ $&#123;line2&#125; =~ $str1 ]]</span><br><span class="line">then</span><br><span class="line">echo <span class="string">&quot;****************&quot;</span></span><br><span class="line">V1_SIGN=$&#123;line2: <span class="number">0</span><span class="number">-4</span>&#125;</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;true&quot;</span> == <span class="string">&quot;$&#123;V1_SIGN&#125;&quot;</span> ]</span><br><span class="line">then</span><br><span class="line">echo <span class="string">&quot;v1签名成功&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">echo <span class="string">&quot;v1签名失败&quot;</span></span><br><span class="line">fi</span><br><span class="line">echo <span class="string">&quot;****************&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="comment">//校验是否使用v2签名</span></span><br><span class="line">str2=<span class="string">&quot;Verified using v2 scheme&quot;</span></span><br><span class="line"><span class="keyword">if</span> [[ $&#123;line2&#125; =~ $str2 ]]</span><br><span class="line">then</span><br><span class="line">echo <span class="string">&quot;****************&quot;</span></span><br><span class="line">V2_SIGN=$&#123;line2: <span class="number">0</span><span class="number">-4</span>&#125;</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;true&quot;</span> == <span class="string">&quot;$&#123;V2_SIGN&#125;&quot;</span> ]</span><br><span class="line">then</span><br><span class="line">echo <span class="string">&quot;v2签名成功&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">echo <span class="string">&quot;v2签名失败&quot;</span></span><br><span class="line">fi</span><br><span class="line">echo <span class="string">&quot;****************&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="comment">//校验是否使用v3签名</span></span><br><span class="line">str3=<span class="string">&quot;Verified using v3 scheme&quot;</span></span><br><span class="line"><span class="keyword">if</span> [[ $&#123;line2&#125; =~ $str3 ]]</span><br><span class="line">then</span><br><span class="line">echo <span class="string">&quot;****************&quot;</span></span><br><span class="line">V3_SIGN=$&#123;line2: <span class="number">0</span><span class="number">-4</span>&#125;</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;true&quot;</span> == <span class="string">&quot;$&#123;V3_SIGN&#125;&quot;</span> ]</span><br><span class="line">then</span><br><span class="line">echo <span class="string">&quot;v3签名成功&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">echo <span class="string">&quot;v3签名失败&quot;</span></span><br><span class="line">fi</span><br><span class="line">echo <span class="string">&quot;****************&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="comment">//校验是否使用v4签名</span></span><br><span class="line">str4=<span class="string">&quot;Verified using v4 scheme&quot;</span></span><br><span class="line"><span class="keyword">if</span> [[ $&#123;line2&#125; =~ $str4 ]]</span><br><span class="line">then</span><br><span class="line">echo <span class="string">&quot;****************&quot;</span></span><br><span class="line">V4_SIGN=$&#123;line2: <span class="number">0</span><span class="number">-4</span>&#125;</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;true&quot;</span> == <span class="string">&quot;$&#123;V4_SIGN&#125;&quot;</span> ]</span><br><span class="line">then</span><br><span class="line">echo <span class="string">&quot;v4签名成功&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">echo <span class="string">&quot;v4签名失败&quot;</span></span><br><span class="line">fi</span><br><span class="line">echo <span class="string">&quot;****************&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">done</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>这样配置完成后，Jenkins日志就会自动输出签名信息。</p><h2 id="2-2-命令脚本更新版2-0"><a href="#2-2-命令脚本更新版2-0" class="headerlink" title="2.2 命令脚本更新版2.0"></a>2.2 命令脚本更新版2.0</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">export ROOT_DOR=/Users/apple/Library/Android/sdk/build-tools/<span class="number">30.0</span><span class="number">.2</span> </span><br><span class="line"></span><br><span class="line">#export ROOT_DIR=/Users/apple/Documents/MyWork/androidCode/workCode/ZjnxEbankUat_Scan/app/uat/debug</span><br><span class="line">export ROOT_DIR=/Users/apple/Desktop/qqq</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">find $&#123;ROOT_DIR&#125; -name <span class="string">&quot;*.apk&quot;</span> | while read line</span><br><span class="line">do </span><br><span class="line"># 默认没有进行v1v2v3v4签名</span><br><span class="line">v1=<span class="string">&quot;false&quot;</span></span><br><span class="line">v2=<span class="string">&quot;false&quot;</span></span><br><span class="line">v3=<span class="string">&quot;false&quot;</span></span><br><span class="line">v4=<span class="string">&quot;false&quot;</span></span><br><span class="line"></span><br><span class="line">FILE=$&#123;line&#125;</span><br><span class="line"></span><br><span class="line"># 内部域分隔符：此处做换行处理</span><br><span class="line">IFS=<span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span></span><br><span class="line"><span class="keyword">for</span> line2 in <span class="string">`$&#123;ROOT_DOR&#125;/apksigner verify --verbose &quot;$&#123;FILE&#125;&quot;`</span></span><br><span class="line">do</span><br><span class="line"></span><br><span class="line">str1=<span class="string">&quot;Verified using v1 scheme&quot;</span></span><br><span class="line"><span class="keyword">if</span> [[ $&#123;line2&#125; =~ $str1 ]]</span><br><span class="line">then</span><br><span class="line">v1=<span class="string">&quot;true&quot;</span></span><br><span class="line">echo <span class="string">&quot;****************&quot;</span></span><br><span class="line">V1_SIGN=$&#123;line2: <span class="number">0</span><span class="number">-4</span>&#125;</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;true&quot;</span> == <span class="string">&quot;$&#123;V1_SIGN&#125;&quot;</span> ]</span><br><span class="line">then</span><br><span class="line">echo <span class="string">&quot;校验v1签名成功&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">echo <span class="string">&quot;校验v1签名失败&quot;</span></span><br><span class="line">exit <span class="number">-1</span></span><br><span class="line">fi</span><br><span class="line">echo <span class="string">&quot;****************&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">str2=<span class="string">&quot;Verified using v2 scheme&quot;</span></span><br><span class="line"><span class="keyword">if</span> [[ $&#123;line2&#125; =~ $str2 ]]</span><br><span class="line">then</span><br><span class="line">v2=<span class="string">&quot;true&quot;</span></span><br><span class="line">echo <span class="string">&quot;****************&quot;</span></span><br><span class="line">V2_SIGN=$&#123;line2: <span class="number">0</span><span class="number">-4</span>&#125;</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;true&quot;</span> == <span class="string">&quot;$&#123;V2_SIGN&#125;&quot;</span> ]</span><br><span class="line">then</span><br><span class="line">echo <span class="string">&quot;校验v2签名成功&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">echo <span class="string">&quot;校验v2签名失败&quot;</span></span><br><span class="line">exit <span class="number">-1</span></span><br><span class="line">fi</span><br><span class="line">echo <span class="string">&quot;****************&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">str3=<span class="string">&quot;Verified using v3 scheme&quot;</span></span><br><span class="line"><span class="keyword">if</span> [[ $&#123;line2&#125; =~ $str3 ]]</span><br><span class="line">then</span><br><span class="line">v3=<span class="string">&quot;true&quot;</span></span><br><span class="line">echo <span class="string">&quot;****************&quot;</span></span><br><span class="line">V3_SIGN=$&#123;line2: <span class="number">0</span><span class="number">-4</span>&#125;</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;true&quot;</span> == <span class="string">&quot;$&#123;V3_SIGN&#125;&quot;</span> ]</span><br><span class="line">then</span><br><span class="line">echo <span class="string">&quot;校验v3签名成功&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">echo <span class="string">&quot;校验v3签名失败&quot;</span></span><br><span class="line">fi</span><br><span class="line">echo <span class="string">&quot;****************&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">str4=<span class="string">&quot;Verified using v4 scheme&quot;</span></span><br><span class="line"><span class="keyword">if</span> [[ $&#123;line2&#125; =~ $str4 ]]</span><br><span class="line">then</span><br><span class="line">v4=<span class="string">&quot;true&quot;</span></span><br><span class="line">echo <span class="string">&quot;****************&quot;</span></span><br><span class="line">V4_SIGN=$&#123;line2: <span class="number">0</span><span class="number">-4</span>&#125;</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;true&quot;</span> == <span class="string">&quot;$&#123;V4_SIGN&#125;&quot;</span> ]</span><br><span class="line">then</span><br><span class="line">echo <span class="string">&quot;校验v4签名成功&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">echo <span class="string">&quot;校验v4签名失败&quot;</span></span><br><span class="line">fi</span><br><span class="line">echo <span class="string">&quot;****************&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;false&quot;</span> == $v1 ]]</span><br><span class="line">then</span><br><span class="line">echo <span class="string">&quot;****************&quot;</span></span><br><span class="line">echo <span class="string">&quot;没有检测到有效的v1签名&quot;</span></span><br><span class="line">echo <span class="string">&quot;****************&quot;</span></span><br><span class="line">exit <span class="number">-1</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;false&quot;</span> == $v2 ]]</span><br><span class="line">then</span><br><span class="line">echo <span class="string">&quot;****************&quot;</span></span><br><span class="line">echo <span class="string">&quot;没有检测到有效的v2签名&quot;</span></span><br><span class="line">echo <span class="string">&quot;****************&quot;</span></span><br><span class="line">exit <span class="number">-1</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;false&quot;</span> == $v3 ]]</span><br><span class="line">then</span><br><span class="line">echo <span class="string">&quot;****************&quot;</span></span><br><span class="line">echo <span class="string">&quot;没有检测到有效的v3签名&quot;</span></span><br><span class="line">echo <span class="string">&quot;****************&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;false&quot;</span> == $v4 ]]</span><br><span class="line">then</span><br><span class="line">echo <span class="string">&quot;****************&quot;</span></span><br><span class="line">echo <span class="string">&quot;没有检测到有效的v4签名&quot;</span></span><br><span class="line">echo <span class="string">&quot;****************&quot;</span></span><br><span class="line">fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><hr><h1 id="3-本文中使用到的shell命令小结"><a href="#3-本文中使用到的shell命令小结" class="headerlink" title="3. 本文中使用到的shell命令小结"></a>3. 本文中使用到的shell命令小结</h1><h2 id="3-1-shell-查看apk的签名信息"><a href="#3-1-shell-查看apk的签名信息" class="headerlink" title="3.1 shell 查看apk的签名信息"></a>3.1 shell 查看apk的签名信息</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apksigner verify --verbose xx.apk</span><br></pre></td></tr></table></figure><h2 id="3-2-shell-字符串包含"><a href="#3-2-shell-字符串包含" class="headerlink" title="3.2 shell 字符串包含"></a>3.2 shell 字符串包含</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">strA=<span class="string">&quot;helloworld&quot;</span></span><br><span class="line">strB=<span class="string">&quot;low&quot;</span></span><br><span class="line"><span class="keyword">if</span> [[ $strA =~ $strB ]]</span><br><span class="line">then</span><br><span class="line">    echo <span class="string">&quot;包含&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    echo <span class="string">&quot;不包含&quot;</span></span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="3-3-shell-if…fi语句"><a href="#3-3-shell-if…fi语句" class="headerlink" title="3.3 shell if…fi语句"></a>3.3 shell if…fi语句</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line">a=<span class="number">10</span></span><br><span class="line">b=<span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ $a == $b ]</span><br><span class="line">then</span><br><span class="line">   echo <span class="string">&quot;a is equal to b&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ $a != $b ]</span><br><span class="line">then</span><br><span class="line">   echo <span class="string">&quot;a is not equal to b&quot;</span></span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="3-4-Shell-字符串截取"><a href="#3-4-Shell-字符串截取" class="headerlink" title="3.4 Shell 字符串截取"></a>3.4 Shell 字符串截取</h2><p><a href="http://c.biancheng.net/view/1120.html">Shell字符串截取完整命令</a></p><h3 id="3-4-1-从字符串左边开始计数"><a href="#3-4-1-从字符串左边开始计数" class="headerlink" title="3.4.1 从字符串左边开始计数"></a>3.4.1 从字符串左边开始计数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;<span class="keyword">string</span>: start :length&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url=<span class="string">&quot;c.biancheng.net&quot;</span></span><br><span class="line">echo $&#123;url: <span class="number">2</span>: <span class="number">9</span>&#125;</span><br></pre></td></tr></table></figure><p>结果为biancheng</p><h3 id="3-4-2-从右边开始计数"><a href="#3-4-2-从右边开始计数" class="headerlink" title="3.4.2 从右边开始计数"></a>3.4.2 从右边开始计数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;<span class="keyword">string</span>: <span class="number">0</span>-start :length&#125;</span><br></pre></td></tr></table></figure><blockquote><p>从左边开始计数时，起始数字是 0（这符合程序员思维）；从右边开始计数时，起始数字是 1（这符合常人思维）</p></blockquote><p>例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url=<span class="string">&quot;c.biancheng.net&quot;</span></span><br><span class="line">echo $&#123;url: <span class="number">0</span><span class="number">-13</span>: <span class="number">9</span>&#125;</span><br></pre></td></tr></table></figure><p>结果为biancheng。从右边数，b是第 13 个字符</p><h2 id="3-5-内部域分隔符IFS"><a href="#3-5-内部域分隔符IFS" class="headerlink" title="3.5 内部域分隔符IFS"></a>3.5 内部域分隔符IFS</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 内部域分隔符：此处做换行处理</span><br><span class="line">IFS=<span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span></span><br><span class="line"><span class="keyword">for</span> line2 in <span class="string">`$&#123;ROOT_DOR&#125;/apksigner verify --verbose &quot;$&#123;FILE&#125;&quot;`</span></span><br><span class="line"># 相当于：执行apksigner verify --verbose 获取apk的签名信息，并且以</span><br><span class="line"># “换行”作为条件进行循环输出给line2；我们就可以逐行对line2进行判断处理即可。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>x++ 与 ++x 的区别整理</title>
      <link href="2021/06/25/x-%E4%B8%8E-x-%E7%9A%84%E5%8C%BA%E5%88%AB%E6%95%B4%E7%90%86/"/>
      <url>2021/06/25/x-%E4%B8%8E-x-%E7%9A%84%E5%8C%BA%E5%88%AB%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>@[toc]</p><h1 id="x-与-x的区别"><a href="#x-与-x的区别" class="headerlink" title="x++与++x的区别"></a>x++与++x的区别</h1><ol><li>==简单的表达式== 中x++和++x表示着相同的意思，比如常用于for循环语句中；</li><li>当 ==递增== 或者 ==递减== 的运算结果被直接用在其他表达式中，x++与++x就代表着 <strong>不同</strong> 的意思了</li></ol><p>++x：变量 ==x的值先增加== ，再 ==计算整个表达式的值== ；<br>x++：变量x的值在 ==表达式计算后== 再增加；</p><h1 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span>;</span><br><span class="line">y = ++x;</span><br><span class="line"></span><br><span class="line"><span class="comment">//x的值先增加</span></span><br><span class="line">结果：x=<span class="number">2</span>，y=<span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span>;</span><br><span class="line">y = x++;</span><br><span class="line"></span><br><span class="line"><span class="comment">//先执行表达式，再增加</span></span><br><span class="line">结果：x=<span class="number">2</span>，y=<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android中的MVP模式学习</title>
      <link href="2021/06/18/Android%E4%B8%AD%E7%9A%84MVP%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0/"/>
      <url>2021/06/18/Android%E4%B8%AD%E7%9A%84MVP%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>@[toc]</p><hr><h1 id="1-MVP模式简介"><a href="#1-MVP模式简介" class="headerlink" title="1. MVP模式简介"></a>1. MVP模式简介</h1><h2 id="1-1-MVP所对应的意义"><a href="#1-1-MVP所对应的意义" class="headerlink" title="1.1 MVP所对应的意义"></a>1.1 MVP所对应的意义</h2><p>MVP所对应的意义：M-Model-模型、V-View-视图、P-Presenter-表示器。</p><blockquote><p>M与V是不直接关联的也是就Model与View不存在直接关系，这两者之间间隔着的是Presenter层，其负责调控View与Model之间的间接交互。<br><img  src="https://img-blog.csdnimg.cn/20210618082457775.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">MVP关系模型</span></p></blockquote><h1 id="2-MVP模式的应用"><a href="#2-MVP模式的应用" class="headerlink" title="2. MVP模式的应用"></a>2. MVP模式的应用</h1><h2 id="2-1-model层描述和具体代码"><a href="#2-1-model层描述和具体代码" class="headerlink" title="2.1 model层描述和具体代码"></a>2.1 model层描述和具体代码</h2><p>提供==想要展示在view层的数据==和==具体业务逻辑处理的实现==</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fw.mvp.mvp.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fw.mvp.callback.MCallback;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * description :Model层接口</span></span><br><span class="line"><span class="comment"> * author : apple</span></span><br><span class="line"><span class="comment"> * date : 2021/6/16 15:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public <span class="keyword">interface</span> IMVPModel &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功：返回数据</span></span><br><span class="line"><span class="comment">     * 失败：回调失败</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param name</span></span><br><span class="line"><span class="comment">     * @param mCallback</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    void getAcountData(String name, MCallback mCallback);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fw.mvp.mvp.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fw.mvp.bean.Acount;</span><br><span class="line"><span class="keyword">import</span> com.fw.mvp.callback.MCallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * description :Model层实现</span></span><br><span class="line"><span class="comment"> * author : apple</span></span><br><span class="line"><span class="comment"> * date : 2021/6/16 11:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public class MVPModel implements IMVPModel &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功：返回数据</span></span><br><span class="line"><span class="comment">     * 失败：回调失败</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param name</span></span><br><span class="line"><span class="comment">     * @param mCallback</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Override</span><br><span class="line">    public void getAcountData(String name, MCallback mCallback) &#123;</span><br><span class="line">        Random random = <span class="built_in">new</span> Random();</span><br><span class="line">        boolean isSuccess = random.nextBoolean();</span><br><span class="line">        <span class="keyword">if</span> (isSuccess) &#123;</span><br><span class="line">            Acount acount = <span class="built_in">new</span> Acount();</span><br><span class="line">            acount.setName(name);</span><br><span class="line">            acount.setLevel(<span class="number">111</span>);</span><br><span class="line">            mCallback.onSuccess(acount);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mCallback.onFail();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-2-view层描述和具体代码"><a href="#2-2-view层描述和具体代码" class="headerlink" title="2.2 view层描述和具体代码"></a>2.2 view层描述和具体代码</h2><p>负责==显示数据==、==提供友好界面==跟用户交互</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fw.mvp.mvp.view;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fw.mvp.bean.Acount;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * description :View层接口，其具体实现类为MVPActivity</span></span><br><span class="line"><span class="comment"> * author : apple</span></span><br><span class="line"><span class="comment"> * date : 2021/6/16 11:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public <span class="keyword">interface</span> IMVPView &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取输入内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String getInputText();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示成功结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param acount</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    void showSuccessPage(Acount acount);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示失败结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    void showFail();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fw.mvp.mvp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.annotation.SuppressLint;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fw.mvp.R;</span><br><span class="line"><span class="keyword">import</span> com.fw.mvp.bean.Acount;</span><br><span class="line"><span class="keyword">import</span> com.fw.mvp.mvp.presenter.IMVPPresenter;</span><br><span class="line"><span class="keyword">import</span> com.fw.mvp.mvp.presenter.MVPPresenter;</span><br><span class="line"><span class="keyword">import</span> com.fw.mvp.mvp.view.IMVPView;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * description :View层实现类</span></span><br><span class="line"><span class="comment"> * author : apple</span></span><br><span class="line"><span class="comment"> * date : 2021/6/15 21:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public class MVPActivity extends AppCompatActivity implements IMVPView, View.OnClickListener &#123;</span><br><span class="line"></span><br><span class="line">    private EditText editText;</span><br><span class="line">    private Button button;</span><br><span class="line">    private TextView textView;</span><br><span class="line"></span><br><span class="line">    private IMVPPresenter mvpPresenter;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_mvp);</span><br><span class="line">        initView();</span><br><span class="line">        initData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void initView() &#123;</span><br><span class="line">        editText = findViewById(R.id.et);</span><br><span class="line">        button = findViewById(R.id.btn);</span><br><span class="line">        textView = findViewById(R.id.tv);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void initData() &#123;</span><br><span class="line">        button.setOnClickListener(this);</span><br><span class="line">        mvpPresenter = <span class="built_in">new</span> MVPPresenter(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View v) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v.getId() == R.id.btn) &#123;</span><br><span class="line">            mvpPresenter.onClick(getInputText());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getInputText() &#123;</span><br><span class="line">        <span class="keyword">return</span> editText.getText().toString().trim();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @SuppressLint(<span class="string">&quot;SetTextI18n&quot;</span>)</span><br><span class="line">    @Override</span><br><span class="line">    public void showSuccessPage(Acount acount) &#123;</span><br><span class="line">        textView.setText(acount.getName() + <span class="string">&quot; | &quot;</span> + acount.getLevel());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void showFail() &#123;</span><br><span class="line">        textView.setText(<span class="string">&quot;数据获取失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-3-presenter层描述和具体代码"><a href="#2-3-presenter层描述和具体代码" class="headerlink" title="2.3 presenter层描述和具体代码"></a>2.3 presenter层描述和具体代码</h2><p>Presenter扮演着view和model的中间层的角色。</p><blockquote><p>获取model层的数据之后构建view层；<br>也可以收到view层UI上的反馈命令后分发处理逻辑，交给model层做业务操作。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fw.mvp.mvp.presenter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * description :Presenter层接口</span></span><br><span class="line"><span class="comment"> * author : apple</span></span><br><span class="line"><span class="comment"> * date : 2021/6/16 15:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public <span class="keyword">interface</span> IMVPPresenter &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 点击事件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    void onClick(String name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fw.mvp.mvp.presenter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fw.mvp.bean.Acount;</span><br><span class="line"><span class="keyword">import</span> com.fw.mvp.callback.MCallback;</span><br><span class="line"><span class="keyword">import</span> com.fw.mvp.mvp.model.IMVPModel;</span><br><span class="line"><span class="keyword">import</span> com.fw.mvp.mvp.model.MVPModel;</span><br><span class="line"><span class="keyword">import</span> com.fw.mvp.mvp.view.IMVPView;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * description :Presenter层实现</span></span><br><span class="line"><span class="comment"> * author : apple</span></span><br><span class="line"><span class="comment"> * date : 2021/6/16 11:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public class MVPPresenter implements IMVPPresenter &#123;</span><br><span class="line">    private IMVPView mView;</span><br><span class="line">    private IMVPModel mModel;</span><br><span class="line"></span><br><span class="line">    public MVPPresenter(IMVPView mView) &#123;</span><br><span class="line">        this.mView = mView;</span><br><span class="line">        mModel = <span class="built_in">new</span> MVPModel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(String name) &#123;</span><br><span class="line">    <span class="comment">//调用model去进行逻辑处理</span></span><br><span class="line">        mModel.getAcountData(name, <span class="built_in">new</span> MCallback() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onSuccess(Acount acount) &#123;</span><br><span class="line">            <span class="comment">//通知view层进行UI构建刷新</span></span><br><span class="line">                mView.showSuccessPage(acount);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onFail() &#123;</span><br><span class="line">            <span class="comment">//通知view层进行UI构建刷新</span></span><br><span class="line">                mView.showFail();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-4-使用到的自定义的接口"><a href="#2-4-使用到的自定义的接口" class="headerlink" title="2.4 使用到的自定义的接口"></a>2.4 使用到的自定义的接口</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fw.mvp.callback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fw.mvp.bean.Acount;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * description :回调接口</span></span><br><span class="line"><span class="comment"> * author : apple</span></span><br><span class="line"><span class="comment"> * date : 2021/6/16 11:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public <span class="keyword">interface</span> MCallback &#123;</span><br><span class="line">    void onSuccess(Acount acount);</span><br><span class="line"></span><br><span class="line">    void onFail();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="3-demo代码流程"><a href="#3-demo代码流程" class="headerlink" title="3. demo代码流程"></a>3. demo代码流程</h1><h2 id="3-1-代码流程"><a href="#3-1-代码流程" class="headerlink" title="3.1 代码流程"></a>3.1 代码流程</h2><blockquote><p>demo的代码流程：（请参考下面的类图）<br>1、 MVPActivity做了一些UI初始化的东西，需要实例化对应IMVPPresenter的引用，和实现 IMVPView的接口，监听界面动作；<br>2、 button按钮按下后出发点击事件，在onClick里接收到即通过MVPPresenter的引用把它交给MVPPresenter处理；<br>3、 然后MVPPresenter把逻辑交给Model层去处理，也就是这里面的MVPModel；<br>4、 MVPModel处理完逻辑之后，结果通过回调通知MVPPresenter；<br>5、MVPPresenter再把结果返回给View层的MVPActivity，最后MVPActivity显示结果。</p></blockquote><h2 id="3-2-代码流程图例"><a href="#3-2-代码流程图例" class="headerlink" title="3.2 代码流程图例"></a>3.2 代码流程图例</h2><p><img  src="https://img-blog.csdnimg.cn/20210618143802889.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>TortoiseGit 使用教程</title>
      <link href="2021/06/09/TortoiseGit-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>2021/06/09/TortoiseGit-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>@[toc]</p><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>　　</p><blockquote><p>作为一个软件开发人员，不可能不知道Git。Git作为一个复杂的版本控制系统，命令之多，即使经常使用，一些命令也记不住，一般只记住几个常用的命令，不是所有使用Git命令行都是高效的。本教程不讲Git命令，而是先让你用上git，再去学习git。本教程应该称作TortoiseGit入门指南。因为下面要借助一个图形化的软件，TortoiseGit来操作git。用GUI（图形界面）再谈CLI（命令行），我相信这会更容易让人接受。</p></blockquote><p><strong>该文章转自</strong>：<a href="https://www.cnblogs.com/anayigeren/p/10177027.html">https://www.cnblogs.com/anayigeren/p/10177027.html</a></p><hr><h1 id="TortoiseGit-简介"><a href="#TortoiseGit-简介" class="headerlink" title="TortoiseGit 简介"></a>TortoiseGit 简介</h1><blockquote><p>TortoiseGit 简称 tgit， 中文名海龟Git。TortoiseGit是一个开放的GIT版本控制系统的源客户端。</p><p>TortoiseGit 支持Winxp/vista/win7/Win10，提供有中文版支持。</p><p>TortoiseGit 可以恢复您的文件的旧版本，并研究如何以及合适改变了历史数据，谁改变了它。下面教程针对使用TortoiseGit<br>的用户。</p></blockquote><hr><h1 id="下载安装Git及Tortoisegit"><a href="#下载安装Git及Tortoisegit" class="headerlink" title="下载安装Git及Tortoisegit"></a>下载安装Git及Tortoisegit</h1><ul><li>环境安装，需要依次安装以下：<br><img  src="https://img-blog.csdnimg.cn/20210609112010316.png"  ><span class="image-caption">在这里插入图片描述</span></li></ul><p><strong>第1步：</strong> 下载Git，下载地址：<a href="https://git-for-windows.github.io/">https://git-for-windows.github.io/</a><br><img  src="https://img-blog.csdnimg.cn/20210609112134453.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span>             Git 安装过程不详述，可参考：<a href="https://www.cnblogs.com/wj-1314/p/7993819.html">https://www.cnblogs.com/wj-1314/p/7993819.html</a><br><strong>第2步：</strong> 下载安装Tortoisegit及中文语言包（Tortoisegit及语言包<a href="https://tortoisegit.org/download/">下载</a> ，Tortoisegit <a href="https://jingyan.baidu.com/article/f3ad7d0f37a75d09c2345b6f.html">安装教程</a>）<br><img  src="https://img-blog.csdnimg.cn/20210609112615759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><hr><h1 id="Tortoisegit-配置"><a href="#Tortoisegit-配置" class="headerlink" title="Tortoisegit 配置"></a>Tortoisegit 配置</h1><ul><li><p><strong>第1步：</strong> 首先，请选定一个存放Git项目的目录，这样方便管理. 如: E:\Git，然后在资源管理器中打开：<br><img  src="https://img-blog.csdnimg.cn/20210609112800498.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p></li><li><p><strong>第2步：</strong> 在空白处点击鼠标右键，选择 –&gt; TortoiseGit –&gt; Settings，然后就可以看到配置界面：<br><img  src="https://img-blog.csdnimg.cn/202106091128418.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p></li><li><p><strong>第3步：</strong> 选中General，在右边的 Language中选择简体中文(当然,你也可以继续使用英文)。取消勾选升级检查的复选框，可能还需要指定 git.exe 文件的路径，如 “D:\Program Files\Git\bin”。完成后，点击应用，确定关闭对话框。<br><img  src="https://img-blog.csdnimg.cn/20210609112920124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p></li><li><p><strong>第4步：</strong> 配置用户，用户作为你操作git的个人标识，进入设置，点选左边的Git标签，可以发现,右边可以配置用户的名字与Email信息. 如下图所示：<br><img  src="https://img-blog.csdnimg.cn/20210609112952280.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><pre><code>因为当前还没有本地项目,所以 “编辑本地 .git/config(L)” 按钮处于灰色不可用状态，如果在某个本地Git项目下打开配置对话框，那么这个按钮就可用,然后就可以编辑此项目的一些属性。点击 “编辑全局 .git/config(O)”按钮,会使用记事本打开全局配置文件，在全局配置文件中，在后面加上下面的内容（记住密码）:</code></pre><blockquote><p>[credential]<br>helper = store</p></blockquote><pre><code>完成后保存，关闭记事本，确定即可。则当你使用 HTTPS URL 方式推送项目到GitHub等在线仓库时，海龟git会记住你输入的用户名和密码（这里不是用户的姓名和Email哦），可以避免每次提交都要输入用户名和密码。（还有种方式，通过使用 SSH URL 来提交代码便可以一劳永逸了~~~）如果你编辑的是 本地 .git/config(L)，其实这个翻译为本地有点问题，应该叫局部，    也就是在某个项目下面设置，只对此项目有效，配置是一样的。</code></pre></li></ul><hr><h1 id="Tortoisegit-使用示例"><a href="#Tortoisegit-使用示例" class="headerlink" title="Tortoisegit 使用示例"></a>Tortoisegit 使用示例</h1><ul><li><p><strong>克隆一个项目（分别从github仓库、自己搭建的gitblit 仓库上获取）</strong></p><blockquote><p>教程开始之前，补充一个知识点：</p><p>本地仓库和远程git仓库的连接方式有两种：<strong>HTTPS</strong> 和 <strong>SSH</strong>，很多时候都是直接使用 HTTPS URL方式克隆项目到本地，当然也有有些人使用SSH URL克隆到本地。这两种方式的主要区别在于：</p><p><strong>HTTPS</strong>：使用起来不用配置，对初学者来说会比较方便，只要复制HTTPS URL然后到git Bash里面直接用clone命令克隆到本地就好了，但是每次 fetch 和 push代码都需要输入账号和密码，这也是HTTPS方式的麻烦之处。<br><strong>SSH</strong>：使用SSH URL方式需要在克隆之前先配置和添加好SSH key，因此，如果你想要使用SSH url克隆的话，你必须是这个项目的拥有者。否则你是无法添加SSH key的，另外ssh默认是每次fetch和push代码都不需要输入账号和密码，如果你想要每次都输入账号密码才能进行fetch和push也可以另外进行设置。多数介绍Git的博客里面采用的都是https的方式作为案例，今天主要是记录如何配置并在海龟git中使用SSH方式来提交和克隆代码。</p></blockquote></li><li><p><strong>第1步：</strong> 此处介绍通过SSH URL方式传输，使用之前需要先将本地的 SSH 公钥配置到 Git 服务器上。</p><pre><code>先查看SSH Key。在C盘用户主目录用户目录下，看看有没有.ssh目录，如果有再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接到第2步。</code></pre><p>  <img  src="https://img-blog.csdnimg.cn/20210609142900600.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span>    </p><pre><code>如果没有上述文件，则需要创建一个SSH Key，在任意文件夹下点击右键，选择Git GUI Here。在弹出的程序中选择主菜单的【Help】→【Show SSH Key】：                            </code></pre><p><img  src="https://img-blog.csdnimg.cn/20210609143544617.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><pre><code>如果没有Key，则点击“Generate Key”生成一个SSH Key：</code></pre><p>  <img  src="https://img-blog.csdnimg.cn/20210609143649549.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><pre><code>把生成的全部内容拷出来。如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。（其他创建SSH Key方式：通过Shell命令方式创建）</code></pre></li><li><p><strong>第2步：</strong> 把 SSH Key 填到Git 服务器的配置中。</p><pre><code>GitHub服务器：登陆GitHub，【头像】→【Settings】→【SSH and GPG Keys】→【New SSH Key】，填入上一步的复制的SSHKey，然后【Add SSH Key】：</code></pre><p><img  src="https://img-blog.csdnimg.cn/20210609143953526.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><pre><code>Gitblit 服务器（自己搭建 Git 服务器，Gitblit的安装教程请看这里），登录 Gitblit账 户，在【头像】→【用户中心】→【SSH Keys】，填入上一步的复制的SSHKey，然后【添加】</code></pre><p><img  src="https://img-blog.csdnimg.cn/2021060914413088.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><pre><code>为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。</code></pre></li><li><p><strong>第3步：</strong> 要克隆 GitHub 或 Gitblit 上的项目，先要获取对应远程存储库的路径（注意：此处使用 SSH URL 方式）：</p><blockquote><p><strong>GitHub仓库</strong>：从 GitHub项目页面上得到对应存储库的 giturl 路径：<br><img  src="https://img-blog.csdnimg.cn/2021060914443068.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p></blockquote><blockquote><p><strong>Gitblit 仓库</strong>：在存储库页面这个位置得到存储库的 giturl 路径：<br><img  src="https://img-blog.csdnimg.cn/20210609144517502.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p></blockquote></li><li><p><strong>第4步：</strong> 在本地文件夹的空白位置处，右击鼠标，在菜单中选择【Git克隆】：</p><p><img  src="https://img-blog.csdnimg.cn/20210609144851167.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><pre><code>把git 路径填写到URL，并选择本地文件目录，点击【确定】，弹出下载进度窗口。（服务器端至少要有一个文件，否则 pull的时候会报错 fatal: Couldn&#39;t find remote ref HEAD）</code></pre><p><img  src="https://img-blog.csdnimg.cn/20210609144933427.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><pre><code>克隆成功，则在文件夹上就可以看到角标标识：</code></pre><p><img  src="https://img-blog.csdnimg.cn/20210609145025285.png"  ><span class="image-caption">在这里插入图片描述</span></p></li></ul><hr><h1 id="将代码提交到服务器"><a href="#将代码提交到服务器" class="headerlink" title="将代码提交到服务器"></a>将代码提交到服务器</h1><p>Git的使用类似TFS、SVN等源代码或者文件管理器，惯例的流程：<br><img  src="https://img-blog.csdnimg.cn/20210609145407537.png"  ><span class="image-caption">在这里插入图片描述</span></p><ul><li><p><strong>第1步：</strong> 改动，修改本地项目中的某些文件，如修改 README.md 内容，还可以增加一些文件， 如Hello.txt。</p></li><li><p><strong>第2步：</strong> 提交本地，在本地项目的空白处点击鼠标右键，选择 【Git提交(C) -&gt; “master”…】</p><p><img  src="https://img-blog.csdnimg.cn/20210609145509262.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><pre><code>在弹出提交（Commit）对话框中完成提交说明信息，和选择需要提交的文件，可根据需要新建分支，然后点击 【提交】 按钮，将修改提交到本地仓库：</code></pre><p><img  src="https://img-blog.csdnimg.cn/20210609145631886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><pre><code>弹出提交进度窗口，提交成功后还需要“推送”将本地仓库的修改推送到远程仓库。</code></pre><p> <img  src="https://img-blog.csdnimg.cn/20210609145717782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p></li><li><p><strong>第3步：</strong> 同步拉取，在实际工作中，如果多人协作或者多个客户端进行修改，那么我们还要拉取别人推送到在线仓库的内容，所以在推送之前需要先执行同步拉取(Pull …)操作。<br>在本地仓库文件夹上【右击鼠标】→【Git同步】：</p><p><img  src="https://img-blog.csdnimg.cn/20210609145833621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><pre><code>打开Git同步窗口（包括常规操作及日志，同右击菜单快捷操作一样），点击【拉取(P)】，将远程分支拉取到本地：</code></pre><p> <img  src="https://img-blog.csdnimg.cn/20210609145921642.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><pre><code>如果服务器上的文件没有被修改过，就会直接提示已经更新到最新，那你就可以直接进行下一步“推送(H)”操作了：</code></pre><p><img  src="https://img-blog.csdnimg.cn/20210609150008412.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><pre><code>反之，如果服务器上的文件被修改过了（本地文件修改前不是最新版本），就会提示冲突。先要解决冲突，然后再提交结果：</code></pre><p><img  src="https://img-blog.csdnimg.cn/20210609151632383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><pre><code>需要注意的是，和使用TFS、SVN的习惯一样，你在修改本地内容之前，最好先 拉取（pull）一下，减少冲突的可能。</code></pre></li><li><p><strong>第四步：</strong> 推送远程，将提交到本地仓库的修改推送到远程仓库，可以直接在提交成功后的提示窗口上点击【推送(H)…】，或者在Git同步窗口点击【推送(H)…】，鼠标右击的菜单上也有相应的快捷操作：选择 【TortoiseGit(T)】→【推送(H)…】</p><pre><code>弹出推送(push)对话框：</code></pre><p><img  src="https://img-blog.csdnimg.cn/20210609151833863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><pre><code>一般保持默认,点击 “确定” 按钮然后弹出推送进度界面，可能要求你输入用户名，点击【确定】，然后要求输入密码，密码输入正确后，显示推送成功界面：</code></pre><p><img  src="https://img-blog.csdnimg.cn/20210609154432437.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><pre><code>如果你按照上一小节Tortoisegit 配置的设置操作，则输入密码以后会记住密码。密码会明文保存在C:\Users\用户名\.git-credentials 这个文件中，请小心保存。</code></pre></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>bash: ./gradlew: Permission denied 报错</title>
      <link href="2021/06/08/bash-gradlew-Permission-denied-%E6%8A%A5%E9%94%99/"/>
      <url>2021/06/08/bash-gradlew-Permission-denied-%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p><strong>问题：</strong></p><blockquote><p>在mac版的Android studio的Terminal命令行中执行./gradlew命令报错<br>bash: ./gradlew: Permission denied</p></blockquote><p><strong>解决方案</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x gradlew</span><br></pre></td></tr></table></figure><p>其实就是因为没有权限了，用ls -l查看是否有对应的平台的该执行文件是否有权限执行，如果没有权限的话可以执行</p><p><strong>chmod +x gradlew 或者 chmod 777 gradlew</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>华为HMS Scankit 扫码SDK集成-实现扫一扫功能</title>
      <link href="2021/06/07/%E5%8D%8E%E4%B8%BAHMS-Scankit-%E6%89%AB%E7%A0%81SDK%E9%9B%86%E6%88%90-%E5%AE%9E%E7%8E%B0%E6%89%AB%E4%B8%80%E6%89%AB%E5%8A%9F%E8%83%BD/"/>
      <url>2021/06/07/%E5%8D%8E%E4%B8%BAHMS-Scankit-%E6%89%AB%E7%A0%81SDK%E9%9B%86%E6%88%90-%E5%AE%9E%E7%8E%B0%E6%89%AB%E4%B8%80%E6%89%AB%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="华为HMS-Scankit-扫码SDK集成-实现扫一扫功能"><a href="#华为HMS-Scankit-扫码SDK集成-实现扫一扫功能" class="headerlink" title="华为HMS Scankit 扫码SDK集成-实现扫一扫功能"></a>华为HMS Scankit 扫码SDK集成-实现扫一扫功能</h2><hr><p>@[toc]</p><hr><h2 id="一、集成HMS-Core-SDK"><a href="#一、集成HMS-Core-SDK" class="headerlink" title="一、集成HMS Core SDK"></a>一、集成HMS Core SDK</h2><p><strong>1.添加当前应用的AppGallery Connect配置文件</strong></p><p>在<a href="https://developer.huawei.com/consumer/cn/">华为开发者联盟</a>注册成为开发者-创建应用-下载agconnect-services.json文件</p><p><img  src="https://img-blog.csdnimg.cn/20210604172137929.png"  ><span class="image-caption">在这里插入图片描述</span><br><strong>2.将“agconnect-services.json”文件拷贝到应用级根目录下</strong><br><img  src="https://img-blog.csdnimg.cn/20210604172431343.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span><br><strong>3.配置HMS Core SDK的Maven仓地址</strong></p><ol><li>打开Android Studio项目级“build.gradle”文件。</li><li>添加HUAWEI agcp插件以及Maven代码库。</li></ol><blockquote><p>在“buildscript &gt; repositories”中配置HMS Core SDK的Maven仓地址。<br>在“allprojects &gt; repositories”中配置HMS Core SDK的Maven仓地址。<br>如果App中添加了“agconnect-services.json”文件则需要在“buildscript &gt;<br>dependencies”中增加agcp配置。</p></blockquote><p><img  src="https://img-blog.csdnimg.cn/20210604173100269.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span><br><strong>4.添加编译依赖</strong></p><ol><li>打开应用级的“build.gradle”文件。</li><li>引用SDK，Scan Kit提供两种SDK，您可以根据需求选择合适的SDK。</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies&#123;</span><br><span class="line">  implementation <span class="string">&#x27;com.huawei.hms:scan:1.3.2.300&#x27;</span></span><br><span class="line">  implementation <span class="string">&#x27;com.huawei.hms:scanplus:1.3.2.300&#x27;</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明<br>如果在非华为手机使用多码能力接口，请使用Scan SDK-Plus，否则会影响识别。<br>com.huawei.hms:scanplus:{version}</p></blockquote><ol start="3"><li>添加AGC插件配置。请根据实际情况选择：</li></ol><ul><li>方式一：在文件头部声明下一行添加如下配置</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">&#x27;com.huawei.agconnect&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>方式二：在plugins中添加如下配置。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;com.android.application&#x27;</span></span><br><span class="line">    <span class="comment">//添加如下配置</span></span><br><span class="line">    id <span class="string">&#x27;com.huawei.agconnect&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="二、配置混淆脚本"><a href="#二、配置混淆脚本" class="headerlink" title="二、配置混淆脚本"></a>二、配置混淆脚本</h2><ol><li>在应用级根目录下打开混淆配置文件“proguard-rules.pro”，加入排除HMS Core SDK的混淆配置脚本。</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-ignorewarnings</span><br><span class="line">-keepattributes *Annotation*</span><br><span class="line">-keepattributes Exceptions</span><br><span class="line">-keepattributes InnerClasses</span><br><span class="line">-keepattributes Signature</span><br><span class="line">-keepattributes SourceFile,LineNumberTable</span><br><span class="line">-keep class com.huawei.hianalytics.**&#123;*;&#125;</span><br><span class="line">-keep class com.huawei.updatesdk.**&#123;*;&#125;</span><br><span class="line">-keep class com.huawei.hms.**&#123;*;&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>如果您使用了AndResGuard，需要在应用级的“build.gradle”文件中加入AndResGuard允许清单。</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;R.string.hms*&quot;</span>,</span><br><span class="line"><span class="string">&quot;R.string.connect_server_fail_prompt_toast&quot;</span>,</span><br><span class="line"><span class="string">&quot;R.string.getting_message_fail_prompt_toast&quot;</span>,</span><br><span class="line"><span class="string">&quot;R.string.no_available_network_prompt_toast&quot;</span>,</span><br><span class="line"><span class="string">&quot;R.string.third_app_*&quot;</span>,</span><br><span class="line"><span class="string">&quot;R.string.upsdk_*&quot;</span>,</span><br><span class="line"><span class="string">&quot;R.layout.hms*&quot;</span>,</span><br><span class="line"><span class="string">&quot;R.layout.upsdk_*&quot;</span>,</span><br><span class="line"><span class="string">&quot;R.drawable.upsdk*&quot;</span>,</span><br><span class="line"><span class="string">&quot;R.color.upsdk*&quot;</span>,</span><br><span class="line"><span class="string">&quot;R.dimen.upsdk*&quot;</span>,</span><br><span class="line"><span class="string">&quot;R.style.upsdk*&quot;</span>, </span><br><span class="line"><span class="string">&quot;R.string.agc*&quot;</span></span><br></pre></td></tr></table></figure><hr><h2 id="三、指定权限"><a href="#三、指定权限" class="headerlink" title="三、指定权限"></a>三、指定权限</h2><ol><li>AndroidManifest.xml中指定相应的权限</li><li>代码中动态申请一下权限</li><li>校验是否开启相应的权限，决定是否继续扫码</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--相机权限--&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">&quot;android.permission.CAMERA&quot;</span> /&gt;</span><br><span class="line">&lt;!--读文件权限--&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">&quot;android.permission.READ_EXTERNAL_STORAGE&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CAMERA_REQ_CODE为用户自定义，用于接收权限校验结果</span></span><br><span class="line">ActivityCompat.requestPermissions(this,<span class="built_in">new</span> String[]&#123;Manifest.permission.CAMERA, Manifest.permission.READ_EXTERNAL_STORAGE&#125;, CAMERA_REQ_CODE);</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现“onRequestPermissionsResult”函数接收校验权限结果</span></span><br><span class="line">@Override</span><br><span class="line">public void onRequestPermissionsResult(<span class="keyword">int</span> requestCode, String[] permissions, <span class="keyword">int</span>[] grantResults) &#123;</span><br><span class="line">    <span class="comment">//判断“requestCode”是否为申请权限时设置请求码CAMERA_REQ_CODE，然后校验权限开启状态</span></span><br><span class="line">    <span class="keyword">if</span> (requestCode == CAMERA_REQ_CODE &amp;&amp; grantResults.length == <span class="number">2</span> &amp;&amp; grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED &amp;&amp; grantResults[<span class="number">1</span>] == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">        <span class="comment">//调用扫码接口，构建扫码能力，需您实现</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="四、调用扫码功能"><a href="#四、调用扫码功能" class="headerlink" title="四、调用扫码功能"></a>四、调用扫码功能</h2><p>调用HMS Core SDK的“startScan”扫码接口，启动扫码界面</p><hr><h2 id="五、官方文档demo"><a href="#五、官方文档demo" class="headerlink" title="五、官方文档demo"></a>五、官方文档demo</h2><p><a href="https://developer.huawei.com/consumer/cn/doc/development/HMSCore-Guides/service-introduction-0000001050041994">官方文档Demo</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>TortoiseSVN 打Tags</title>
      <link href="2021/06/03/TortoiseSVN-%E6%89%93Tags/"/>
      <url>2021/06/03/TortoiseSVN-%E6%89%93Tags/</url>
      
        <content type="html"><![CDATA[<h2 id="TortoiseSVN打Tags"><a href="#TortoiseSVN打Tags" class="headerlink" title="TortoiseSVN打Tags"></a><strong>TortoiseSVN打Tags</strong></h2><blockquote><p>TortoiseSvn打Tag的坑：</p><ol><li>必须把svn上的代码拉到本地，然后在本地代码上“右键”选择brandh/tag。</li></ol></blockquote><p><strong>步骤：</strong></p><ol><li><p><strong>把svn上需要打Tag的代码拉到本地；</strong></p></li><li><p>进入代码目录，在想要打tag的文件夹上右键依次选择<br>“TortoiseSVN” —-&gt; “Branch/tag…”，如下所示：<br><img  src="https://img-blog.csdnimg.cn/20210603162308203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p></li><li><p><strong>修改Tag目录</strong>：把Tag保存到自己需要的<strong>目录</strong>下。</p></li></ol><blockquote><p>注意：「该目录」必须在svn中存在，否则会报错。</p><ol><li>比如：保存目录为 ../code/trunk/tag/1.0/myProject<br>但是，svn中只有../code/trunk/tag，tag目录下并没有「1.0」这个目录，就会报错。</li></ol></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android Studio 引入aar文件</title>
      <link href="2021/05/25/Android-Studio-%E5%BC%95%E5%85%A5aar%E6%96%87%E4%BB%B6/"/>
      <url>2021/05/25/Android-Studio-%E5%BC%95%E5%85%A5aar%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p><strong>方法一：在app目录下导入aar</strong></p><ol><li>在app-libs目录下导入aar<br><img  src="https://img-blog.csdnimg.cn/20210525154702447.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></li><li>在app-build.gradle中配置</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">        flatDir &#123;</span><br><span class="line">            dir <span class="string">&#x27;libs&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation(name:<span class="string">&#x27;Test_debug&#x27;</span>, ext:<span class="string">&#x27;aar&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>构建项目，在External Libraries目录下会生成该依赖<br><img  src="https://img-blog.csdnimg.cn/20210525154920151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></li></ol><hr><p><strong>方法二、在项目根目录下导入aar</strong>（<em>该方法更加实用，如果某一个library想依赖该aar，只需要在其build.gradle中引入即可</em>）</p><ol><li>在项目根目录新建一个文件夹（此处测试用repositories命名），并把aar放在该目录下<br><img  src="https://img-blog.csdnimg.cn/20210525160121131.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></li><li>在项目根build.gradle文件中配置</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        flatDir &#123;</span><br><span class="line">            dirs <span class="string">&#x27;../repositories&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>在library-build.gradle中导入配置aar即可（此处测试在app中导入aar）</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation(name:<span class="string">&#x27;Test_debug_2&#x27;</span>, ext:<span class="string">&#x27;aar&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img  src="https://img-blog.csdnimg.cn/20210525160434130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android String字符串截取方法总结</title>
      <link href="2021/05/25/Android-String%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%88%AA%E5%8F%96%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>2021/05/25/Android-String%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%88%AA%E5%8F%96%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="Android-String字符串截取方法总结"><a href="#Android-String字符串截取方法总结" class="headerlink" title="Android String字符串截取方法总结"></a><strong>Android String字符串截取方法总结</strong></h2><ol><li><strong>指定字符，截取字符串，返回字符串数组：</strong></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">String str = <span class="string">&quot;abcd.efg.123456.hijk.345&quot;</span>;</span><br><span class="line">String[] strs=str.split(<span class="string">&quot;.&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><ol start="2"><li><strong>指定索引号，截取字符串：</strong></li></ol><ul><li>将字符串从索引号为3开始截取，一直到字符串末尾（索引值从0开始）:</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">String str = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;</span><br><span class="line">str.substring(<span class="number">3</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>从索引号1开始到索引好7结束（并且不包含索引7截取在内，也就是说实际截取的是1、2、3、4、5、6号字符）:</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">String str = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;</span><br><span class="line">str.substring(<span class="number">1</span>, <span class="number">7</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><ol start="3"><li><strong>indexOf(String str):</strong> 返回指定字符在字符串中第一次出现处的索引，如果此字符串中没有这样的字符，则返回 -1。</li><li><strong>indexOf(String str, int fromIndex):</strong> 返回从 fromIndex 位置开始查找指定字符在字符串中第一次出现处的索引，如果此字符串中没有这样的字符，则返回 -1。</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">String str = <span class="string">&quot;abcde.fghi.jkl.mno.pqrstu.vwxyz&quot;</span></span><br><span class="line"><span class="comment">//截取 0-第一次遇到“.”的字符串</span></span><br><span class="line">str.substring(<span class="number">0</span>, str.indexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"><span class="comment">//截取 0-最后一次遇到“.”的字符串</span></span><br><span class="line">str.substring(<span class="number">0</span>, str.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"><span class="comment">//从第7位开始，截取第一次遇到“.”的字符串</span></span><br><span class="line">str.substring(<span class="number">7</span>, str.indexOf(<span class="string">&quot;.&quot;</span>, <span class="number">7</span>));</span><br><span class="line"><span class="comment">//截取“mno”之后的字符</span></span><br><span class="line">str.substring(str.indexOf(<span class="string">&quot;mno&quot;</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac OS系统怎么修改mac地址</title>
      <link href="2021/05/06/Mac-OS%E7%B3%BB%E7%BB%9F%E6%80%8E%E4%B9%88%E4%BF%AE%E6%94%B9mac%E5%9C%B0%E5%9D%80/"/>
      <url>2021/05/06/Mac-OS%E7%B3%BB%E7%BB%9F%E6%80%8E%E4%B9%88%E4%BF%AE%E6%94%B9mac%E5%9C%B0%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<blockquote><p>有时候我们需要指定固定的mac地址上网</p></blockquote><p><strong>具体方法：</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">networksetup -listallhardwareports <span class="comment">//查看当前所有端口Mac地址</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo ifconfig en0 ether e4:ce:<span class="number">8</span>f:<span class="number">32</span>:<span class="number">51</span>:<span class="number">82</span> <span class="comment">//修改</span></span><br><span class="line"></span><br><span class="line">ifconfig en1 | grep ether <span class="comment">//查看是否修改成功,这里修改的是虚拟Mac,看硬件是看不出来的</span></span><br></pre></td></tr></table></figure><hr><p><strong>demo案例</strong>：修改en8的mac地址</p><p><strong>1、查看当前所有端口mac地址</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">apple@fenglolodeMacBook-Pro ~ % networksetup -listallhardwareports</span><br><span class="line"></span><br><span class="line">Hardware Port: USB Ethernet</span><br><span class="line">Device: en8</span><br><span class="line">Ethernet Address: <span class="number">00</span>:<span class="number">0</span>e:c6:<span class="number">68</span>:<span class="number">7</span>d:c1</span><br><span class="line"></span><br><span class="line">Hardware Port: Wi-Fi</span><br><span class="line">Device: en0</span><br><span class="line">Ethernet Address: <span class="number">78</span>:<span class="number">4</span>f:<span class="number">43</span>:<span class="number">83</span>:<span class="number">5</span>a:<span class="number">5</span>a</span><br><span class="line"></span><br><span class="line">Hardware Port: Bluetooth PAN</span><br><span class="line">Device: en5</span><br><span class="line">Ethernet Address: <span class="number">78</span>:<span class="number">4</span>f:<span class="number">43</span>:<span class="number">84</span>:d0:d8</span><br><span class="line"></span><br><span class="line">Hardware Port: Thunderbolt <span class="number">1</span></span><br><span class="line">Device: en1</span><br><span class="line">Ethernet Address: <span class="number">82</span>:c9:<span class="number">93</span>:e2:<span class="number">54</span>:<span class="number">01</span></span><br><span class="line"></span><br><span class="line">Hardware Port: Thunderbolt <span class="number">2</span></span><br><span class="line">Device: en2</span><br><span class="line">Ethernet Address: <span class="number">82</span>:c9:<span class="number">93</span>:e2:<span class="number">54</span>:<span class="number">00</span></span><br><span class="line"></span><br><span class="line">Hardware Port: Thunderbolt <span class="number">3</span></span><br><span class="line">Device: en3</span><br><span class="line">Ethernet Address: <span class="number">82</span>:c9:<span class="number">93</span>:e2:<span class="number">54</span>:<span class="number">05</span></span><br><span class="line"></span><br><span class="line">Hardware Port: Thunderbolt <span class="number">4</span></span><br><span class="line">Device: en4</span><br><span class="line">Ethernet Address: <span class="number">82</span>:c9:<span class="number">93</span>:e2:<span class="number">54</span>:<span class="number">04</span></span><br><span class="line"></span><br><span class="line">Hardware Port: Thunderbolt Bridge</span><br><span class="line">Device: bridge0</span><br><span class="line">Ethernet Address: <span class="number">82</span>:c9:<span class="number">93</span>:e2:<span class="number">54</span>:<span class="number">01</span></span><br><span class="line"></span><br><span class="line">VLAN Configurations</span><br><span class="line">===================</span><br></pre></td></tr></table></figure><p><strong>2、修改en8的mac地址为98:ee:cb:a3:8d:bf</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apple@fenglolodeMacBook-Pro ~ % sudo ifconfig en8 ether <span class="number">98</span>:ee:cb:a3:<span class="number">8</span>d:bf</span><br><span class="line">Password:</span><br></pre></td></tr></table></figure><p><strong>3、查看修改后的en8的mac地址，确认是否修改成功。</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apple@fenglolodeMacBook-Pro ~ % ifconfig en8 | grep ether</span><br><span class="line">ether <span class="number">98</span>:ee:cb:a3:<span class="number">8</span>d:bf </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android OkHttp请求报错：java.net.UnknownServiceException：..not permitted by network security policy</title>
      <link href="2021/04/29/Android-OkHttp%E8%AF%B7%E6%B1%82%E6%8A%A5%E9%94%99%EF%BC%9Ajava-net-UnknownServiceException%EF%BC%9A-not-permitted-by-network-security-policy/"/>
      <url>2021/04/29/Android-OkHttp%E8%AF%B7%E6%B1%82%E6%8A%A5%E9%94%99%EF%BC%9Ajava-net-UnknownServiceException%EF%BC%9A-not-permitted-by-network-security-policy/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><strong>在Android 9.0手机使用OkHttp请求一个http地址，会报如下错误。</strong></p><blockquote><p>java.net.UnknownServiceException: CLEARTEXT communication to **** not permitted by network security policy</p></blockquote><p><strong>原因是Android 9.0以后，Google官方解释：</strong></p><blockquote><p>为保证用户数据和设备的安全，Google针对下一代 Android 系统(Android P) 的应用程序，将要求默认使用加密连接，这意味着<br>Android P 将禁止 App 使用所有未加密的连接，因此运行 Android P<br>系统的安卓设备无论是接收或者发送流量，未来都不能明码传输。</p></blockquote><h2 id="三种解决办法"><a href="#三种解决办法" class="headerlink" title="三种解决办法"></a>三种解决办法</h2><blockquote><ol><li>APP 改用 https 请求</li><li>argetSdkVersion 降到27以下更改</li><li>网络安全配置</li></ol></blockquote><p>其中前两种方法不用过多解释，主要讲一下第三种方法实现。</p><ul><li>在res文件夹下创建一个xml文件夹，然后在xml目录下创建一个network_security_config.xml文件，文件内容如下：</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;network-security-config&gt;             </span><br><span class="line">    &lt;base-config cleartextTrafficPermitted=<span class="string">&quot;true&quot;</span> /&gt;</span><br><span class="line">&lt;/network-security-config&gt;</span><br></pre></td></tr></table></figure><ul><li>在AndroidManifest.xml文件下的application标签增加属性</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:networkSecurityConfig=<span class="string">&quot;@xml/network_security_config&quot;</span></span><br></pre></td></tr></table></figure><p>配置完毕，就可以访问http地址了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LitePal的使用——Android开源数据库</title>
      <link href="2021/04/28/LitePal%E7%9A%84%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94Android%E5%BC%80%E6%BA%90%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>2021/04/28/LitePal%E7%9A%84%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94Android%E5%BC%80%E6%BA%90%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="本文知识点"><a href="#本文知识点" class="headerlink" title="本文知识点"></a>本文知识点</h2><blockquote><ol><li>LitePal的集成</li><li>LitePal实现数据库的增删改查</li><li>LitePal常用的API</li></ol></blockquote><h2 id="1-LitePal的集成"><a href="#1-LitePal的集成" class="headerlink" title="1. LitePal的集成"></a>1. LitePal的集成</h2><blockquote><ul><li>引入相应的类库</li><li>创建litepal.xml</li><li>更换继承的Application</li></ul></blockquote><p><strong>1.1 引入相应的类库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//litepal数据库</span><br><span class="line">   implementation <span class="string">&#x27;org.litepal.guolindev:core:3.2.3&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>1.2 创建litepal.xml</strong></p><blockquote><p>litepal.xml是在assets文件夹下，<br>项目main路径下New-&gt;Folder-&gt;AssetsFolder就可以创建相应的assets文件夹，<br>然后在assets文件夹下创建一个相应的litepal.xml文件夹。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;litepal&gt;</span><br><span class="line">    &lt;!--数据库名--&gt;</span><br><span class="line">    &lt;dbname value=<span class="string">&quot;BookStore&quot;</span> /&gt;</span><br><span class="line">    &lt;!--数据库版本号--&gt;</span><br><span class="line">    &lt;version value=<span class="string">&quot;1&quot;</span> /&gt;</span><br><span class="line">    &lt;!--映射模型--&gt;</span><br><span class="line">    &lt;list&gt;</span><br><span class="line">        &lt;mapping class=<span class="string">&quot;com.fw.androidone.sqlitelitepal.entity.Book&quot;</span> /&gt;</span><br><span class="line">    &lt;/list&gt;</span><br><span class="line">&lt;/litepal&gt;</span><br></pre></td></tr></table></figure><blockquote><ul><li>dbname标签是相应的数据库名称<ul><li>version标签是相应的数据库的版本 （当里面引用的内容发生改变的时候,要升级相应的版本）</li><li>list标签哪些对象需要数据库管理 （mapping里面的路径一定要是全路径名称） （list标签中的实体类都应该继承LitePalSupport这个类）</li></ul></li></ul></blockquote><p><strong>1.3 更换继承的Application</strong></p><blockquote><p>（1）已经有继承的Application<br>（2）直接继承LitePalApplication</p></blockquote><p>（1）已经有继承的Application</p><blockquote><p>直接在Application的onCreate方法中对数据库进行初始化</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">   public void <span class="function"><span class="title">onCreate</span></span>() &#123;</span><br><span class="line">       super.onCreate();</span><br><span class="line">       //数据库初始化</span><br><span class="line">       LitePal.initialize(this);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>（2）直接继承LitePalApplication</p><blockquote><p>直接继承相应的LitePalApplication这里就不用在onCreate()中调用LitePal.initialize(this);<br>在application标签中添加Application的时候要这样写<br><code>android:name=&quot;org.litepal.LitePalApplication&quot;</code></p></blockquote><h2 id="2-LitePal中实现增删改查"><a href="#2-LitePal中实现增删改查" class="headerlink" title="2.LitePal中实现增删改查"></a>2.LitePal中实现增删改查</h2><p><strong>2.1 新增数据</strong></p><blockquote><p>使用save()方法</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Book book = new Book();</span><br><span class="line">book.setAuthor(<span class="string">&quot;王天一&quot;</span>);</span><br><span class="line">book.setName(<span class="string">&quot;王天一的第一本书&quot;</span>);</span><br><span class="line">book.save();</span><br></pre></td></tr></table></figure><p><strong>2.2 删除数据</strong></p><blockquote><p>delete()或者deleteAll()进行删除</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Book book = new Book();</span><br><span class="line">book.setAuthor(<span class="string">&quot;王天二&quot;</span>);</span><br><span class="line">book.setName(<span class="string">&quot;王天二的第一本书&quot;</span>);</span><br><span class="line">book.save();</span><br><span class="line">book.delete();</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//删除book表中price=44.6786的这条数据</span><br><span class="line">LitePal.deleteAll(Book.class, <span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;王天二&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>2.3 更新数据</strong></p><blockquote><p>1、更改完相应的数据直接save保存<br>2、updateAll方法实现</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//方式一：对已经存储的数据进行更新</span><br><span class="line">Book book = new Book();</span><br><span class="line">book.setAuthor(<span class="string">&quot;王天二&quot;</span>);</span><br><span class="line">book.setName(<span class="string">&quot;王天二的第一本书&quot;</span>);</span><br><span class="line">book.save();</span><br><span class="line">// 重新修改价格，然后点用save方法，</span><br><span class="line">// 此时，litapal数据库中会发现该数据之前已经存储在数据库中，所以进行更新价格操作。而不会重新插入一条数据。</span><br><span class="line">book.setName(<span class="string">&quot;王天三&quot;</span>);</span><br><span class="line">book.save();</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//方式二：updateAll方法实现</span><br><span class="line">Book book1 = new Book();</span><br><span class="line">book1.setPrice(44.6786);</span><br><span class="line">book1.updateAll(<span class="string">&quot;name = ? and author = ?&quot;</span>, <span class="string">&quot;王天二的第一本书&quot;</span>, <span class="string">&quot;王天二&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>2.4 查询数据</strong></p><blockquote><p>主要用到find()和findAll()等相应的方法、</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">//查询所有数据</span><br><span class="line">List&lt;Book&gt; bookList = LitePal.findAll(Book.class);</span><br><span class="line"></span><br><span class="line">//查询第一条数据</span><br><span class="line">Book firstBook = LitePal.findFirst(Book.class);</span><br><span class="line"></span><br><span class="line">//查询最后一条数据</span><br><span class="line">Book lastBook = LitePal.findLast(Book.class);</span><br><span class="line"></span><br><span class="line">//按照条件查询</span><br><span class="line">//(1）select()方法用于指定查询哪几列的数据，对应sql中的select关键字</span><br><span class="line">List&lt;Book&gt; books = LitePal.select(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;author&quot;</span>).find(Book.class);</span><br><span class="line"></span><br><span class="line">//(2) <span class="built_in">where</span>()用于指定查询的约束条件，对应了sql中的<span class="built_in">where</span>关键字</span><br><span class="line">List&lt;Book&gt; books1 = LitePal.where(<span class="string">&quot;page &gt; ?&quot;</span>, <span class="string">&quot;100&quot;</span>).find(Book.class);</span><br><span class="line"></span><br><span class="line">//(3) order()方法用于指定结果的排序方式，对应了sql当中的order by 关键字</span><br><span class="line">List&lt;Book&gt; books2 = LitePal.order(<span class="string">&quot;price desc&quot;</span>).find(Book.class);</span><br><span class="line"></span><br><span class="line">//(4) limint()方法用于指定查询结果的数量</span><br><span class="line">List&lt;Book&gt; books3 = LitePal.limit(3).find(Book.class);//查询表中前3条数据</span><br><span class="line"></span><br><span class="line">//(5)offset() 方法用于指定查询结果的偏移量</span><br><span class="line">List&lt;Book&gt; books4 = LitePal.limit(3).offset(1).find(Book.class);//查询表中第2条、第3条、第4条数据</span><br><span class="line"></span><br><span class="line">//(6) 组合使用查询</span><br><span class="line">List&lt;Book&gt; books5 = LitePal.select(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;author&quot;</span>)</span><br><span class="line">           .<span class="built_in">where</span>(<span class="string">&quot;page &gt; ?&quot;</span>, <span class="string">&quot;100&quot;</span>)</span><br><span class="line">           .order(<span class="string">&quot;price&quot;</span>)</span><br><span class="line">           .<span class="built_in">limit</span>(3)</span><br><span class="line">           .offset(2)</span><br><span class="line">           .find(Book.class);//查询Book表中第3～5条满足page&gt;100页这个条件的name、author这两列数据，并且查询结果按照price升序排序</span><br><span class="line"></span><br><span class="line">//LitePal使用原声SQL查询</span><br><span class="line">Cursor cursor = LitePal.findBySQL(<span class="string">&quot;select * form Book where page &gt; ? and price &lt; ?&quot;</span>, <span class="string">&quot;100&quot;</span>, <span class="string">&quot;60&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="3-LitePal常用的API"><a href="#3-LitePal常用的API" class="headerlink" title="3.LitePal常用的API"></a>3.LitePal常用的API</h2><blockquote><ul><li>查询第一条数据<br>LitePal.findFirst(Book.class);</li><li>查询最后一条数据<br>LitePal.findLast(Book.class);</li><li>select()方法用于指定查询哪几列的数据，对应sql中的select关键字 LitePal.select(“name”,”author”).find(Book.class);</li><li>where()用于指定查询的约束条件，对应了sql中的where关键字<br>LitePal.where(“page &gt; ?”, “100”).find(Book.class);</li><li>order()方法用于指定结果的排序方式，对应了sql当中的order by 关键字 LitePal.order(“price desc”).find(Book.class);</li><li>limint()方法用于指定查询结果的数量<br>LitePal.limit(3).find(Book.class);//查询表中前3条数据</li><li>offset() 方法用于指定查询结果的偏移量<br>LitePal.limit(3).offset(1).find(Book.class);//查询表中第2条、第3条、第4条数据</li></ul></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android Studio 使用Lambda表达式「详细配置」</title>
      <link href="2021/04/27/Android-Studio-%E4%BD%BF%E7%94%A8Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E3%80%8C%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE%E3%80%8D/"/>
      <url>2021/04/27/Android-Studio-%E4%BD%BF%E7%94%A8Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E3%80%8C%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE%E3%80%8D/</url>
      
        <content type="html"><![CDATA[<p><strong>前言：</strong></p><blockquote><p>Lambda 表达式，也可称为闭包，它是推动 Java 8 发布的最重要新特性。<br>Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。<br>使用 Lambda 表达式可以使代码变的更加简洁紧凑。</p></blockquote><hr><p><strong>配置：</strong></p><p>1、安装java 8，并在android studio中配置使用；<br><img  src="https://img-blog.csdnimg.cn/20210427154850873.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span><br>2、app build.gradle中配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">compileOptions &#123;</span><br><span class="line">        sourceCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">        targetCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>3、解决用JDK1.8 Lambda表达式中文乱码的问题</p><p>gradle.properties文件中配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.gradle.jvmargs=-Dfile.encoding=UTF-8</span><br></pre></td></tr></table></figure><hr><p><strong>使用：</strong><br>demo：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//普通写法</span><br><span class="line">adapter.setItemClickListener(new SelectAdapter.<span class="function"><span class="title">ItemClickListener</span></span>() &#123;</span><br><span class="line">          @Override</span><br><span class="line">          public void onClick(int position) &#123;</span><br><span class="line">              Select select = list.get(position);</span><br><span class="line">              startActivity(new Intent(SelectActivity.this, select.getActivity().getClass()));</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      //使用Lambda表达式</span><br><span class="line">      adapter.setItemClickListener(position -&gt; &#123;</span><br><span class="line">          Select select = list.get(position);</span><br><span class="line">          startActivity(new Intent(SelectActivity.this, select.getActivity().getClass()));</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//普通写法</span><br><span class="line">listView.setOnItemClickListener(new AdapterView.<span class="function"><span class="title">OnItemClickListener</span></span>() &#123;</span><br><span class="line">          @Override</span><br><span class="line">          public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) &#123;</span><br><span class="line">              Intent intent = new Intent(MainActivity.this, SelectActivity.class);</span><br><span class="line">              intent.putExtra(<span class="string">&quot;type&quot;</span>, position + 1);</span><br><span class="line">              startActivity(intent);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      //使用Lambda表达式</span><br><span class="line">      listView.setOnItemClickListener((parent, view, position, id) -&gt; &#123;</span><br><span class="line">          Intent intent = new Intent(MainActivity.this, SelectActivity.class);</span><br><span class="line">          intent.putExtra(<span class="string">&quot;type&quot;</span>, position + 1);</span><br><span class="line">          startActivity(intent);</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android中EditText优先弹出数字输入法</title>
      <link href="2021/04/26/Android%E4%B8%ADEditText%E4%BC%98%E5%85%88%E5%BC%B9%E5%87%BA%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E6%B3%95/"/>
      <url>2021/04/26/Android%E4%B8%ADEditText%E4%BC%98%E5%85%88%E5%BC%B9%E5%87%BA%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="Android中EditText优先弹出数字输入法"><a href="#Android中EditText优先弹出数字输入法" class="headerlink" title="Android中EditText优先弹出数字输入法"></a>Android中EditText优先弹出数字输入法</h2><p>当一个EditText使用数字的频率很高，比如用来输入手机号等等，但是有时候可能也需要使用到输入英文和汉字的需求。这个时候，我们默认当EditText弹出时，优化弹出数字键盘比较好。</p><p><strong>解决方案</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//默认直接显示数字键盘</span><br><span class="line">editText.setInputType(InputType.TYPE_CLASS_TEXT);</span><br><span class="line">editText.setRawInputType(InputType.TYPE_CLASS_NUMBER);</span><br></pre></td></tr></table></figure><p><strong>setInputType</strong>和<strong>setRawInputType</strong>的不同之处是：前者是输入内容限制，后者是改变输入法格式</p><hr><p>如果想限制输入的格式，比如只能输入“0123456789abc”这些字符，该怎么办呢？<br>这个时候就需要使用到setKeyListener属性。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//这里自定义过滤规则，比如只能输入0-9和小写abc</span><br><span class="line">String digits = <span class="string">&quot;0123456789abc&quot;</span>;</span><br><span class="line"></span><br><span class="line">editText.setInputType(InputType.TYPE_CLASS_TEXT);</span><br><span class="line">editText.setKeyListener(DigitsKeyListener.getInstance(digits));</span><br><span class="line">editText.setRawInputType(InputType.TYPE_CLASS_NUMBER);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android 11 调用手机系统摄像头新策略 IMAGE_CAPTURE</title>
      <link href="2021/03/30/Android-11-%E8%B0%83%E7%94%A8%E6%89%8B%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%91%84%E5%83%8F%E5%A4%B4%E6%96%B0%E7%AD%96%E7%95%A5-IMAGE-CAPTURE/"/>
      <url>2021/03/30/Android-11-%E8%B0%83%E7%94%A8%E6%89%8B%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%91%84%E5%83%8F%E5%A4%B4%E6%96%B0%E7%AD%96%E7%95%A5-IMAGE-CAPTURE/</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong></p><blockquote><p>android 11 调用系统摄像头有了新的策略，需兼容才可行</p></blockquote><hr><p>1、在Android11之前调用系统摄像头代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent captureIntent = new Intent(<span class="string">&quot;android.media.action.IMAGE_CAPTURE&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (captureIntent.resolveActivity(this.getPackageManager()) != null) &#123;&#125;</span><br></pre></td></tr></table></figure><p>2、在Android11之后，captureIntent.resolveActivity(this.getPackageManager())方法将返回null，导致调用相机失败。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Starting <span class="keyword">in</span> Android 11, only pre-installed system camera apps can respond to the following intent actions:</span><br><span class="line"></span><br><span class="line">android.media.action.VIDEO_CAPTURE</span><br><span class="line">android.media.action.IMAGE_CAPTURE</span><br><span class="line">android.media.action.IMAGE_CAPTURE_SECURE</span><br><span class="line">If more than one pre-installed system camera app is available, the system presents a dialog <span class="keyword">for</span> the user to select an app. If you want your app to use a specific third-party camera app to capture images or videos on its behalf, you can make these intents explicit by setting a package name or component <span class="keyword">for</span> the intent.</span><br></pre></td></tr></table></figure><hr><p><strong>优化方案</strong></p><p>在manifest中配置queries</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;manifest package=<span class="string">&quot;your.package.name&quot;</span>&gt;</span><br><span class="line">&lt;queries&gt;</span><br><span class="line">    &lt;intent&gt;</span><br><span class="line">        &lt;action android:name=<span class="string">&quot;android.media.action.IMAGE_CAPTURE&quot;</span> /&gt;</span><br><span class="line">    &lt;/intent&gt;</span><br><span class="line">&lt;/queries&gt;</span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android 防止按钮(View)多次重复点击之「防重复点击」——2.0（控制view的click事件）</title>
      <link href="2021/03/10/Android-%E9%98%B2%E6%AD%A2%E6%8C%89%E9%92%AE-View-%E5%A4%9A%E6%AC%A1%E9%87%8D%E5%A4%8D%E7%82%B9%E5%87%BB%E4%B9%8B%E3%80%8C%E9%98%B2%E9%87%8D%E5%A4%8D%E7%82%B9%E5%87%BB%E3%80%8D%E2%80%94%E2%80%942-0%EF%BC%88%E6%8E%A7%E5%88%B6view%E7%9A%84click%E4%BA%8B%E4%BB%B6%EF%BC%89/"/>
      <url>2021/03/10/Android-%E9%98%B2%E6%AD%A2%E6%8C%89%E9%92%AE-View-%E5%A4%9A%E6%AC%A1%E9%87%8D%E5%A4%8D%E7%82%B9%E5%87%BB%E4%B9%8B%E3%80%8C%E9%98%B2%E9%87%8D%E5%A4%8D%E7%82%B9%E5%87%BB%E3%80%8D%E2%80%94%E2%80%942-0%EF%BC%88%E6%8E%A7%E5%88%B6view%E7%9A%84click%E4%BA%8B%E4%BB%B6%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong></p><blockquote><p>为了防止“按钮”的点击事件在短时间内多次点击从而触发了多次处理操作；<br>比如：快速点击“登录按钮”发送了多次登录接口，导致程序在短时间内进行多次数据提交or数据处理，这样的体验就不太好了。</p></blockquote><hr><p><strong>方法</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClickHelper</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> android.os.Handler mHandler = <span class="keyword">new</span> android.os.Handler(android.os.Looper.getMainLooper());</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">isFastDoubleClick</span><span class="params">(@NonNull <span class="keyword">final</span> View view, @NonNull <span class="keyword">final</span> View.OnClickListener listener)</span> </span>&#123;</span><br><span class="line">        view.setOnClickListener(null);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> WeakReference&lt;View&gt; weakReference = <span class="keyword">new</span> WeakReference&lt;&gt;(view);</span><br><span class="line">        <span class="keyword">final</span> WeakReference&lt;View.OnClickListener&gt; listeneWeakReference = <span class="keyword">new</span> WeakReference&lt;&gt;(listener);</span><br><span class="line">        mHandler.postDelayed(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</span><br><span class="line">                <span class="keyword">final</span> View view1 = weakReference.get();</span><br><span class="line">                <span class="keyword">final</span> View.OnClickListener listener1 = listeneWeakReference.get();</span><br><span class="line">                <span class="keyword">if</span> (null != view1 &amp;&amp; null != listener1) &#123;</span><br><span class="line">                    view1.setOnClickListener(listener1);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">1000</span>);<span class="comment">//延迟一秒</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>方法原理</strong></p><p>1）当用户点击view之后，传入view和其listener；<br>2）设置view.setOnClickListener(null)，使其点击事件失效；<br>3）把传入的view和listener使用<strong>弱引用</strong>（weakReference）保存；<br>4）使用handler延迟一秒之后执行操作；<br>5）从weakReference中获取view和listener，若view和listener都存在，则设置view1.setOnClickListener(listener1)；重新给view设置点击事件；</p><hr><p><strong>为什么要使用弱引用？</strong><br>为了不把传入的view和listener绑定死，故使用弱引用；</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android-沉浸式状态栏的实现</title>
      <link href="2021/01/21/Android-%E6%B2%89%E6%B5%B8%E5%BC%8F%E7%8A%B6%E6%80%81%E6%A0%8F%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>2021/01/21/Android-%E6%B2%89%E6%B5%B8%E5%BC%8F%E7%8A%B6%E6%80%81%E6%A0%8F%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p><strong>1、取得状态栏的高度值</strong></p><blockquote><p>通过反射获取状态栏高度（部分手机可能获取不到）</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取状态栏的高度</span></span><br><span class="line"><span class="comment">    * @return</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getStatusBarHeight</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//通过反射获取到类</span></span><br><span class="line">           Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.android.internal.R$dimen&quot;</span>);</span><br><span class="line">           <span class="comment">//创建对象</span></span><br><span class="line">           Object o = aClass.newInstance();</span><br><span class="line">           <span class="comment">//拿取属性</span></span><br><span class="line">           Field status_bar_height = aClass.getField(<span class="string">&quot;status_bar_height&quot;</span>);</span><br><span class="line">           <span class="comment">//获取值</span></span><br><span class="line">           Object o1 = status_bar_height.get(o);</span><br><span class="line">           <span class="keyword">int</span> height = Integer.parseInt(o1.toString());</span><br><span class="line">           <span class="comment">//</span></span><br><span class="line">           <span class="keyword">return</span> getResources().getDimensionPixelSize(height);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>2、设置沉浸式状态栏（状态栏设置透明后，将顶层布局高度动态增加状态栏的高度）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 系统版本4.4或以上才可以设置沉浸式状态栏</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 设置沉浸式状态栏</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</span><br><span class="line">           <span class="comment">//设置状态栏透明</span></span><br><span class="line">           getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</span><br><span class="line">           <span class="comment">//设置导航栏透明（如需要设置导航栏）</span></span><br><span class="line">           getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);</span><br><span class="line"></span><br><span class="line">           title_bar = (ViewGroup) findViewById(R.id.title_bar);</span><br><span class="line">           <span class="keyword">final</span> <span class="keyword">int</span> statusBarHeight = getStatusBarHeight();</span><br><span class="line">           title_bar.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">               @Override</span><br><span class="line">               <span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</span><br><span class="line">                   <span class="keyword">int</span> height = title_bar.getHeight();</span><br><span class="line">                   ViewGroup.LayoutParams layoutParams = title_bar.getLayoutParams();</span><br><span class="line"></span><br><span class="line">                   layoutParams.height = statusBarHeight + height ;</span><br><span class="line">                   title_bar.setLayoutParams(layoutParams);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HashMap和LinkedHashMap的比较使用</title>
      <link href="2021/01/14/HashMap%E5%92%8CLinkedHashMap%E7%9A%84%E6%AF%94%E8%BE%83%E4%BD%BF%E7%94%A8/"/>
      <url>2021/01/14/HashMap%E5%92%8CLinkedHashMap%E7%9A%84%E6%AF%94%E8%BE%83%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p><strong>Hashmap</strong></p><blockquote><p>1&gt; Hashmap 是一个最常用的Map,它根据键的HashCode值存储数据,根据键可以直接获取它的值，具有很快的访问速度，遍历时，**<em>取得数据的顺序是完全随机的**</em>。<br>2&gt; HashMap最多只允许一条记录的键为Null;允许多条记录的值为 Null;HashMap不支持线程的同步，即任一时刻可以有多个线程同时写HashMap;可能会导致数据的不一致。如果需要同步，可以用 Collections的synchronizedMap方法使HashMap具有同步的能力，或者使用ConcurrentHashMap。</p></blockquote><p><strong>LinkedHashMap</strong></p><blockquote><p>1&gt; LinkedHashMap 是HashMap的一个子类，保存了记录的插入顺序，在用Iterator遍历LinkedHashMap时，**<em>先得到的记录肯定是先插入的**</em>.也可以在构造时用带参数，按照应用次数排序。<br>2&gt; 在遍历的时候会比HashMap慢，不过有种情况例外，当HashMap容量很大，实际数据较少时，遍历起来可能会比 LinkedHashMap慢，因为LinkedHashMap的遍历速度只和实际数据有关，和容量无关，而HashMap的遍历速度和他的容量有关。</p></blockquote><hr><p><strong>测试案例</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hashTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;*************************LinkedHashMap*************&quot;</span>);</span><br><span class="line">        Map&lt;String, String&gt; linkedHashMap = <span class="keyword">new</span> LinkedHashMap&lt;String, String&gt;();</span><br><span class="line">        linkedHashMap.put(<span class="string">&quot;小红&quot;</span>, <span class="string">&quot;fkdks&quot;</span>);</span><br><span class="line">        linkedHashMap.put(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;pshad&quot;</span>);</span><br><span class="line">        linkedHashMap.put(<span class="string">&quot;李浩&quot;</span>, <span class="string">&quot;jfhen&quot;</span>);</span><br><span class="line">        linkedHashMap.put(<span class="string">&quot;王武&quot;</span>, <span class="string">&quot;kkkdn&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String,String&gt; entry : linkedHashMap.entrySet()) &#123;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">&quot;-&quot;</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;*************************HashMap*************&quot;</span>);</span><br><span class="line">        Map&lt;String, String&gt; hashMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        hashMap.put(<span class="string">&quot;小红&quot;</span>, <span class="string">&quot;fkdks&quot;</span>);</span><br><span class="line">        hashMap.put(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;pshad&quot;</span>);</span><br><span class="line">        hashMap.put(<span class="string">&quot;李浩&quot;</span>, <span class="string">&quot;jfhen&quot;</span>);</span><br><span class="line">        hashMap.put(<span class="string">&quot;王武&quot;</span>, <span class="string">&quot;kkkdn&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String,String&gt; entry : hashMap.entrySet()) &#123;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">&quot;-&quot;</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">I/System.out: *************************LinkedHashMap*************</span><br><span class="line">I/System.out: 小红-fkdks</span><br><span class="line">I/System.out: 张三-pshad</span><br><span class="line">I/System.out: 李浩-jfhen</span><br><span class="line">I/System.out: 王武-kkkdn</span><br><span class="line">I/System.out: *************************HashMap*************</span><br><span class="line">I/System.out: 张三-pshad</span><br><span class="line">I/System.out: 王武-kkkdn</span><br><span class="line">I/System.out: 李浩-jfhen</span><br><span class="line">I/System.out: 小红-fkdks</span><br></pre></td></tr></table></figure><p>可以得出：</p><p><strong>HashMap获取数据是乱序的；<br>LinkedHashMap获取数据的有序的。</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HashSet和LinkedHashSet的比较使用</title>
      <link href="2021/01/14/HashSet%E5%92%8CLinkedHashSet%E7%9A%84%E6%AF%94%E8%BE%83%E4%BD%BF%E7%94%A8/"/>
      <url>2021/01/14/HashSet%E5%92%8CLinkedHashSet%E7%9A%84%E6%AF%94%E8%BE%83%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p><strong>HashSet</strong></p><blockquote><p>HashSet有以下特点<br>—— <strong><em>不能保证元素的排列顺序，顺序有可能发生变化</em></strong><br>—— <strong><em>不是同步的</em></strong><br>—— <strong><em>集合元素可以是null,但只能放入一个null</em></strong><br>当向HashSet结合中存入一个元素时，HashSet会调用该对象的hashCode()方法来得到该对象的hashCode值，然后根据 hashCode值来决定该对象在HashSet中存储位置。<br>简单的说，HashSet集合判断两个元素相等的标准是两个对象通过equals方法比较相等，并且两个对象的hashCode()方法返回值相 等<br>注意，如果要把一个对象放入HashSet中，重写该对象对应类的equals方法，也应该重写其hashCode()方法。其规则是如果两个对 象通过equals方法比较返回true时，其hashCode也应该相同。另外，对象中用作equals比较标准的属性，都应该用来计算 hashCode的值。</p></blockquote><p><strong>LinkedHashSet</strong></p><blockquote><p>LinkedHashSet集合同样是根据元素的hashCode值来决定元素的存储位置，但是它同时使用链表维护元素的次序。这样使得元素看起来像是以插入顺序保存的，也就是说，当遍历该集合时候，**<em>LinkedHashSet将会以元素的添加顺序访问集合的元素**</em>。<br>LinkedHashSet在迭代访问Set中的全部元素时，性能比HashSet好，但是插入时性能稍微逊色于HashSet。</p></blockquote><hr><p><strong>测试案例</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hashTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// HashSet不保证集合的迭代顺序；也许在某些时间迭代的顺序与插入顺序一致，但是不保证该顺序恒久不变。</span></span><br><span class="line">        Set&lt;String&gt; mSetString = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">        <span class="comment">// LinkedHashSet按照元素插入的顺序进行迭代，LinkedHashSet不是线程安全的。</span></span><br><span class="line">        Set&lt;String&gt; mLinkedSetString = Collections.synchronizedSet(<span class="keyword">new</span> LinkedHashSet&lt;String&gt;());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            mSetString.add(String.valueOf(i));</span><br><span class="line">            mLinkedSetString.add(String.valueOf(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;***********HashSet for String***************&quot;</span>);</span><br><span class="line">        Iterator&lt;String&gt; setStringIt = mSetString.iterator();</span><br><span class="line">        <span class="keyword">while</span>(setStringIt.hasNext()) &#123;</span><br><span class="line">            System.out.print(setStringIt.next() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;***********LinkedHashSet for String***************&quot;</span>);</span><br><span class="line">        Iterator&lt;String&gt; linkedSetStringIt = mLinkedSetString.iterator();</span><br><span class="line">        <span class="keyword">while</span>(linkedSetStringIt.hasNext()) &#123;</span><br><span class="line">            System.out.print(linkedSetStringIt.next() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出日志如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-14</span> <span class="number">14</span>:<span class="number">21</span>:<span class="number">39.154</span> <span class="number">32383</span><span class="number">-32383</span>/com.zjrc.cba2 I/System.out: ***********HashSet <span class="keyword">for</span> String***************</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-14</span> <span class="number">14</span>:<span class="number">21</span>:<span class="number">39.156</span> <span class="number">32383</span><span class="number">-32383</span>/com.zjrc.cba2 I/System.out: <span class="number">22</span> <span class="number">23</span> <span class="number">24</span> <span class="number">25</span> <span class="number">26</span> <span class="number">27</span> <span class="number">28</span> <span class="number">29</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">20</span> <span class="number">21</span> </span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-14</span> <span class="number">14</span>:<span class="number">21</span>:<span class="number">39.156</span> <span class="number">32383</span><span class="number">-32383</span>/com.zjrc.cba2 I/System.out: ***********LinkedHashSet <span class="keyword">for</span> String***************</span><br><span class="line"><span class="number">2021</span><span class="number">-01</span><span class="number">-14</span> <span class="number">14</span>:<span class="number">21</span>:<span class="number">39.157</span> <span class="number">32383</span><span class="number">-32383</span>/com.zjrc.cba2 I/System.out: <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span> <span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span> <span class="number">24</span> <span class="number">25</span> <span class="number">26</span> <span class="number">27</span> <span class="number">28</span> <span class="number">29</span> </span><br></pre></td></tr></table></figure><p>从输出结果看：</p><p><strong>HastSet迭代的顺序与插入的顺序不一致；<br>LinkedHashSet迭代的顺序与插入的顺序一致；</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac AndroidStudio 中安装plantUML插件</title>
      <link href="2021/01/13/Mac-AndroidStudio-%E4%B8%AD%E5%AE%89%E8%A3%85plantUML%E6%8F%92%E4%BB%B6/"/>
      <url>2021/01/13/Mac-AndroidStudio-%E4%B8%AD%E5%AE%89%E8%A3%85plantUML%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p><strong>Mac版 AS 安装plantUML插件</strong></p><p>1、打开setting面板；<br>2、找到Plugins；<br>3、在搜索框中输入plantUML，进行搜索；<br><img  src="https://img-blog.csdnimg.cn/20210113152500855.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span><br>4、点击安装插件，并重启AS；<br>5、File双击 -&gt; New，就可以看到一个PlantUML File了。<br>6、新建一个PlantUML File格式的文件，就可以用代码来愉快的画图了。<br><img  src="https://img-blog.csdnimg.cn/2021011315283237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><hr><p>PlantUML语法使用详见</p><p><a href="https://blog.csdn.net/fenglolo/article/details/112562026">https://blog.csdn.net/fenglolo/article/details/112562026</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PlantUML-程序员绘图工具「流程图、用例图、时序图等等」</title>
      <link href="2021/01/13/PlantUML-%E7%A8%8B%E5%BA%8F%E5%91%98%E7%BB%98%E5%9B%BE%E5%B7%A5%E5%85%B7%E3%80%8C%E6%B5%81%E7%A8%8B%E5%9B%BE%E3%80%81%E7%94%A8%E4%BE%8B%E5%9B%BE%E3%80%81%E6%97%B6%E5%BA%8F%E5%9B%BE%E7%AD%89%E7%AD%89%E3%80%8D/"/>
      <url>2021/01/13/PlantUML-%E7%A8%8B%E5%BA%8F%E5%91%98%E7%BB%98%E5%9B%BE%E5%B7%A5%E5%85%B7%E3%80%8C%E6%B5%81%E7%A8%8B%E5%9B%BE%E3%80%81%E7%94%A8%E4%BE%8B%E5%9B%BE%E3%80%81%E6%97%B6%E5%BA%8F%E5%9B%BE%E7%AD%89%E7%AD%89%E3%80%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><blockquote><p>1、PlantUML 是一个开源项目，支持快速绘制时序图、用例图、类图、活动图、组件图、状态图、对象图、部署图等。<br>2、PlantUML拥有独立的一套语法，实现代码控制画图，便于后期的修改等操作</p></blockquote><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a><strong>参考文献</strong></h2><p>1、<a href="https://plantuml.com/zh/activity-diagram-beta">https://plantuml.com/zh/activity-diagram-beta</a><br>2、<a href="https://www.yuque.com/yuque/help/editor-puml">https://www.yuque.com/yuque/help/editor-puml</a></p><h2 id="PlantUML语法"><a href="#PlantUML语法" class="headerlink" title="PlantUML语法"></a><strong>PlantUML语法</strong></h2><hr><p><strong>简单活动图</strong></p><p>活动标签(activity label)以冒号开始，以分号结束。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@startuml</span></span><br><span class="line"></span><br><span class="line">:Hello world;</span><br><span class="line">:这是一个测试步骤;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@enduml</span></span><br></pre></td></tr></table></figure><p><img  src="https://img-blog.csdnimg.cn/20210113140737752.png"  ><span class="image-caption">在这里插入图片描述</span></p><hr><p><strong>开始/结束</strong></p><p>你可以使用关键字 <strong>start</strong> 和 <strong>stop</strong> 表示图示的开始和结束。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@startuml</span></span><br><span class="line"></span><br><span class="line">start</span><br><span class="line"></span><br><span class="line">:Hello world;</span><br><span class="line">:这是一个测试步骤;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">stop</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@enduml</span></span><br></pre></td></tr></table></figure><p><img  src="https://img-blog.csdnimg.cn/20210113141037715.png"  ><span class="image-caption">在这里插入图片描述</span><br>也可以使用 <strong>end</strong> 关键字。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@startuml</span></span><br><span class="line"></span><br><span class="line">start</span><br><span class="line"></span><br><span class="line">:Hello world;</span><br><span class="line">:这是一个测试步骤;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@enduml</span></span><br></pre></td></tr></table></figure><p><img  src="https://img-blog.csdnimg.cn/20210113141351556.png"  ><span class="image-caption">在这里插入图片描述</span></p><hr><p><strong>条件语句</strong></p><p>在图示中可以使用关键字<strong>if</strong>，<strong>then</strong>和<strong>else</strong>设置分支测试。标注文字则放在括号中。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@startuml</span></span><br><span class="line"></span><br><span class="line">start</span><br><span class="line"></span><br><span class="line">    if(是否已经吃饭) then(是)</span><br><span class="line">        :不再吃饭;</span><br><span class="line">    <span class="selector-tag">else</span>(否)</span><br><span class="line">        :去吃饭;</span><br><span class="line">    <span class="selector-tag">endif</span></span><br><span class="line">    </span><br><span class="line"><span class="selector-tag">stop</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@enduml</span></span><br></pre></td></tr></table></figure><p><img  src="https://img-blog.csdnimg.cn/20210113142049782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><p>也可以使用关键字<strong>elseif</strong>设置多个分支测试。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@startuml</span></span><br><span class="line"></span><br><span class="line">start</span><br><span class="line"></span><br><span class="line">    if(条件a) then(yes)</span><br><span class="line">        :do 条件a;</span><br><span class="line">    <span class="selector-tag">elseif</span>(条件<span class="selector-tag">b</span>) <span class="selector-tag">then</span>(<span class="selector-tag">yes</span>)</span><br><span class="line">        <span class="selector-pseudo">:do</span> 条件<span class="selector-tag">b</span>;</span><br><span class="line">        <span class="selector-tag">end</span></span><br><span class="line">    <span class="selector-tag">elseif</span>(条件<span class="selector-tag">c</span>) <span class="selector-tag">then</span>(<span class="selector-tag">yes</span>)</span><br><span class="line">        <span class="selector-pseudo">:do</span> 条件<span class="selector-tag">c</span>;</span><br><span class="line">    <span class="selector-tag">elseif</span>(条件<span class="selector-tag">d</span>) <span class="selector-tag">then</span>(<span class="selector-tag">yes</span>)</span><br><span class="line">        <span class="selector-pseudo">:do</span> 条件<span class="selector-tag">d</span>;</span><br><span class="line">    <span class="selector-tag">else</span>(<span class="selector-tag">nothing</span>)</span><br><span class="line">        <span class="selector-pseudo">:do</span> <span class="selector-tag">nothing</span>;</span><br><span class="line">    <span class="selector-tag">endif</span></span><br><span class="line"><span class="selector-tag">stop</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@enduml</span></span><br></pre></td></tr></table></figure><p><img  src="https://img-blog.csdnimg.cn/20210113142533870.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span><br>如果想要中段一个判断，可以使用<strong>kill</strong>或者<strong>detach</strong>关键字。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@startuml</span></span><br><span class="line"></span><br><span class="line">if (条件满足?) then</span><br><span class="line">  #<span class="attribute">pink:</span>error;</span><br><span class="line">  <span class="selector-tag">kill</span></span><br><span class="line"><span class="selector-tag">endif</span></span><br><span class="line"><span class="selector-id">#palegreen</span><span class="selector-pseudo">:action</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@enduml</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@startuml</span></span><br><span class="line"></span><br><span class="line">if (条件满足?) then</span><br><span class="line">  #<span class="attribute">pink:</span>error;</span><br><span class="line">  <span class="selector-tag">detach</span></span><br><span class="line"><span class="selector-tag">endif</span></span><br><span class="line"><span class="selector-id">#palegreen</span><span class="selector-pseudo">:action</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@enduml</span></span><br></pre></td></tr></table></figure><p><img  src="https://img-blog.csdnimg.cn/20210113143018170.png"  ><span class="image-caption">在这里插入图片描述</span></p><hr><p><strong>重复循环</strong></p><p>你可以使用关键字<strong>repeat</strong>和<strong>repeat while</strong>和<strong>backward</strong>进行重复循环。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@startuml</span></span><br><span class="line"></span><br><span class="line">start</span><br><span class="line"></span><br><span class="line">repeat :开始;</span><br><span class="line">  :步骤1;</span><br><span class="line">  :步骤2;</span><br><span class="line"><span class="selector-tag">backward</span>:返回到开始;</span><br><span class="line"><span class="selector-tag">repeat</span> <span class="selector-tag">while</span> (返回?)</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">stop</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@enduml</span></span><br></pre></td></tr></table></figure><p><img  src="https://img-blog.csdnimg.cn/20210113143518920.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><hr><p><strong>while循环</strong></p><p>可以使用关键字while和end while进行while循环。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@startuml</span></span><br><span class="line"></span><br><span class="line">:i = 5;</span><br><span class="line">while (i = 2 ?) is (no)</span><br><span class="line">  <span class="selector-pseudo">:i--</span>;</span><br><span class="line"><span class="selector-tag">endwhile</span> (<span class="selector-tag">yes</span>)</span><br><span class="line"><span class="selector-pseudo">:next</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@enduml</span></span><br></pre></td></tr></table></figure><p><img  src="https://img-blog.csdnimg.cn/20210113144108819.png"  ><span class="image-caption">在这里插入图片描述</span></p><hr><p><strong>注释</strong></p><p>使用floating关键字给流程添加注释。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@startuml</span></span><br><span class="line"></span><br><span class="line">start</span><br><span class="line"></span><br><span class="line">:步骤1;</span><br><span class="line"><span class="selector-tag">floating</span> <span class="selector-tag">note</span> <span class="selector-tag">left</span>: 这是一个注释</span><br><span class="line">:步骤2;</span><br><span class="line"><span class="selector-tag">note</span> <span class="selector-tag">right</span></span><br><span class="line">  这是一个注释</span><br><span class="line">  //lines// and can</span><br><span class="line">  contain &lt;b&gt;HTML&lt;/b&gt;</span><br><span class="line">  ====</span><br><span class="line">  * <span class="selector-tag">Calling</span> <span class="selector-tag">the</span> <span class="selector-tag">method</span> &quot;&quot;<span class="selector-tag">foo</span>()&quot;&quot; <span class="selector-tag">is</span> <span class="selector-tag">prohibited</span></span><br><span class="line"><span class="selector-tag">end</span> <span class="selector-tag">note</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">stop</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@enduml</span></span><br></pre></td></tr></table></figure><p><img  src="https://img-blog.csdnimg.cn/2021011314475297.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><hr><p><strong>颜色</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@startuml</span></span><br><span class="line"></span><br><span class="line">start</span><br><span class="line"></span><br><span class="line">:步骤1;</span><br><span class="line"><span class="selector-id">#HotPink</span>:步骤2;</span><br><span class="line"><span class="selector-id">#AAAAAA</span>:步骤3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@enduml</span></span><br></pre></td></tr></table></figure><p><img  src="https://img-blog.csdnimg.cn/20210113145900387.png"  ><span class="image-caption">在这里插入图片描述</span></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android 调试桥 (adb)</title>
      <link href="2020/11/30/Android-%E8%B0%83%E8%AF%95%E6%A1%A5-adb/"/>
      <url>2020/11/30/Android-%E8%B0%83%E8%AF%95%E6%A1%A5-adb/</url>
      
        <content type="html"><![CDATA[<h2 id="Android-调试桥-adb"><a href="#Android-调试桥-adb" class="headerlink" title="Android 调试桥 (adb)"></a><strong>Android 调试桥 (adb)</strong></h2><h2 id="1-基本用法"><a href="#1-基本用法" class="headerlink" title="1- 基本用法"></a><strong>1- 基本用法</strong></h2><hr><p><strong>1.1- 命令语法</strong></p><p>adb 命令的基本语法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb [-d|-e|-s &lt;serialNumber&gt;] &lt;command&gt;</span><br></pre></td></tr></table></figure><p>如果只有一个设备/模拟器连接时，可以省略掉 [-d|-e|-s <serialNumber>] 这一部分，直接使用 adb <command>。</p><p>如果有多个设备/模拟器连接，则需要为命令指定目标设备。</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-d</td><td>指定当前唯一通过 USB 连接的 Android 设备为命令目标</td></tr><tr><td>-e</td><td>指定当前唯一运行的模拟器为命令目标</td></tr><tr><td>-s &lt;**serialNumber**&gt;</td><td>指定相应 serialNumber 号的设备/模拟器为命令目标</td></tr></tbody></table><p>在多个设备/模拟器连接的情况下较常用的是 -s <serialNumber> 参数，serialNumber 可以通过 adb devices 命令获取</p><p><strong>1.2- 启动/停止</strong></p><p>启动 adb server 命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb start-server</span><br></pre></td></tr></table></figure><p>（一般无需手动执行此命令，在运行 adb 命令时若发现 adb server 没有启动会自动调起。）</p><p>停止 adb server 命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb kill-server</span><br></pre></td></tr></table></figure><p><strong>1.3- 查看 adb 版本</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb version</span><br></pre></td></tr></table></figure><p>示例输出：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apple@fenglolodeMacBook-Pro ~ % adb devices -l</span><br><span class="line">List of devices attached</span><br><span class="line"><span class="number">8b</span>112f28               device usb:<span class="number">336658432</span>X product:virgo model:MI_NOTE_LTE device:virgo transport_id:<span class="number">3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>1.4- 以 root 权限运行 adbd</strong></p><p>adb 的运行原理是 PC 端的 adb server 与手机端的守护进程 adbd 建立连接，然后 PC 端的 adb client 通过 adb server 转发命令，adbd 接收命令后解析运行。</p><p>所以如果 adbd 以普通权限执行，有些需要 root 权限才能执行的命令无法直接用 adb xxx 执行。这时可以 adb shell 然后 su 后执行命令，也可以让 adbd 以 root 权限执行，这个就能随意执行高权限命令了。</p><p>命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb root</span><br></pre></td></tr></table></figure><p>正常输出：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">restarting adbd as root</span><br></pre></td></tr></table></figure><p>现在再运行 adb shell，看看命令行提示符是不是变成 # 了？</p><p>有些手机 root 后也无法通过 <em>adb root</em> 命令让 adbd 以 root 权限执行，比如三星的部分机型，会提示 <em>adbd cannot run as root in production builds</em>，此时可以先安装 adbd Insecure，然后 <em>adb root</em> 试试。</p><p>相应地，如果要恢复 adbd 为非 root 权限的话，可以使用 <em>adb unroot</em> 命令。</p><p><strong>1.5- 指定 adb server 的网络端口</strong><br>命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb -P &lt;port&gt; start-server</span><br></pre></td></tr></table></figure><p>默认端口为 5037。</p><hr><h2 id="2-设备连接管理"><a href="#2-设备连接管理" class="headerlink" title="2- 设备连接管理"></a><strong>2- 设备连接管理</strong></h2><hr><p><strong>2.1- 查询已连接设备/模拟器</strong></p><p>命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List of devices attached</span><br><span class="line">cf264b8fdevice</span><br><span class="line">emulator<span class="number">-5554</span>device</span><br><span class="line"><span class="number">10.129</span><span class="number">.164</span><span class="number">.6</span>:<span class="number">5555</span>device</span><br></pre></td></tr></table></figure><p>输出格式为 [serialNumber] [state]，serialNumber 即我们常说的 SN，state 有如下几种：</p><p>offline —— 表示设备未连接成功或无响应。</p><p>device —— 设备已连接。注意这个状态并不能标识 Android 系统已经完全启动和可操作，在设备启动过程中设备实例就可连接到 adb，但启动完毕后系统才处于可操作状态。</p><p>no device —— 没有设备/模拟器连接。</p><hr><h2 id="3-应用管理"><a href="#3-应用管理" class="headerlink" title="3- 应用管理"></a><strong>3- 应用管理</strong></h2><hr><p><strong>3.1- 查看应用列表</strong></p><p>查看应用列表的基本命令格式是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm <span class="built_in">list</span> packages [-f] [-d] [-e] [-s] [<span class="number">-3</span>] [-i] [-u] [--user USER_ID] [FILTER]</span><br></pre></td></tr></table></figure><p>即在 adb shell pm list packages 的基础上可以加一些参数进行过滤查看不同的列表，支持的过滤参数如下：<br>| 参数 | 显示列表 |<br>|–|–|<br>| 无 | 所有应用 |<br>| -f| 显示应用关联的 apk 文件 |<br>| -d | 只显示 disabled 的应用|<br>| -e | 只显示 enabled 的应用 |<br>| -s | 只显示系统应用 |<br>| -3 | 只显示第三方应用 |<br>| -i | 显示应用的 installer |<br>| -u | 包含已卸载应用 |<br>| &lt;**FILTER**&gt; | 包名包含 &lt;**FILTER**&gt; 字符串 |</p><p><strong>所有应用</strong></p><p>命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm <span class="built_in">list</span> packages</span><br></pre></td></tr></table></figure><p><strong>系统应用</strong> </p><p>命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm <span class="built_in">list</span> packages -s</span><br></pre></td></tr></table></figure><p><strong>第三方应用</strong></p><p>命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm <span class="built_in">list</span> packages <span class="number">-3</span></span><br></pre></td></tr></table></figure><p><strong>3.2- 安装 APK</strong></p><p>命令格式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb install [-lrtsdg] &lt;path_to_apk&gt;</span><br></pre></td></tr></table></figure><p>参数：</p><p>adb install 后面可以跟一些可选参数来控制安装 APK 的行为，可用参数及含义如下：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-l</td><td>将应用安装到保护目录 /mnt/asec</td></tr><tr><td>-r</td><td>允许覆盖安装</td></tr><tr><td>-t</td><td>允许安装 AndroidManifest.xml 里 application 指定 android:testOnly=”true” 的应用</td></tr><tr><td>-s</td><td>将应用安装到 sdcard</td></tr><tr><td>-d</td><td>允许降级覆盖安装</td></tr><tr><td>-g</td><td>授予所有运行时权限</td></tr></tbody></table><p><strong>3.3- 卸载应用</strong></p><p>命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb uninstall [-k] &lt;packagename&gt;</span><br></pre></td></tr></table></figure><p>&lt;**packagename**&gt; 表示应用的包名，-k 参数可选，表示卸载应用但保留数据和缓存目录。</p><p>命令示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb uninstall com.qihoo360.mobilesafe</span><br></pre></td></tr></table></figure><p>表示卸载 360 手机卫士。</p><p><strong>3.4- 清除应用数据与缓存</strong></p><p>命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm clear &lt;packagename&gt;</span><br></pre></td></tr></table></figure><p>&lt;**packagename**&gt; 表示应用名包，这条命令的效果相当于在设置里的应用信息界面点击了「清除缓存」和「清除数据」。</p><p>命令示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm clear com.qihoo360.mobilesafe</span><br></pre></td></tr></table></figure><p>表示清除 360 手机卫士的数据和缓存。</p><p><strong>3.5- 查看应用详细信息</strong></p><p>命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys package &lt;packagename&gt;</span><br></pre></td></tr></table></figure><p>输出中包含很多信息，包括 Activity Resolver Table、Registered ContentProviders、包名、userId、安装后的文件资源代码等路径、版本信息、权限信息和授予状态、签名版本信息等。</p><p>&lt;**packagename**&gt; 表示应用包名。</p><p>输出示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br></pre></td><td class="code"><pre><span class="line">Activity Resolver Table:</span><br><span class="line">  Schemes:</span><br><span class="line">      ytmbank:</span><br><span class="line">        <span class="number">67</span>a95af com.zjrc.cba/com.yitong.mobile.biz.launcher.app.SplashActivity</span><br><span class="line"></span><br><span class="line">  Non-Data Actions:</span><br><span class="line">      android.intent.action.MAIN:</span><br><span class="line">        <span class="number">67</span>a95af com.zjrc.cba/com.yitong.mobile.biz.launcher.app.SplashActivity</span><br><span class="line">      cn.jiguang.privates.intent.PushActivity:</span><br><span class="line">        <span class="number">273</span>dbc com.zjrc.cba/cn.jiguang.privates.push.ui.PushActivity</span><br><span class="line">      cn.jiguang.privates.intent.JNotifyActivity:</span><br><span class="line">        ecc145 com.zjrc.cba/cn.jiguang.privates.push.service.JNotifyActivity</span><br><span class="line"></span><br><span class="line">Receiver Resolver Table:</span><br><span class="line">  Non-Data Actions:</span><br><span class="line">      cn.jpush.android.intent.WakedReceiver:</span><br><span class="line">        <span class="number">80f</span>809a com.zjrc.cba/.push.biz.PushWakedResultReceiver</span><br><span class="line">      com.xiaomi.mipush.MESSAGE_ARRIVED:</span><br><span class="line">        <span class="number">8e4</span>ddcb com.zjrc.cba/cn.jiguang.privates.push.xiaomi.receiver.XiaomiMessageReceiver</span><br><span class="line">      com.xiaomi.mipush.ERROR:</span><br><span class="line">        <span class="number">8e4</span>ddcb com.zjrc.cba/cn.jiguang.privates.push.xiaomi.receiver.XiaomiMessageReceiver</span><br><span class="line">      com.huawei.android.push.intent.REGISTRATION:</span><br><span class="line">        b0879a8 com.zjrc.cba/com.huawei.hms.support.api.push.PushReceiver</span><br><span class="line">      android.net.conn.CONNECTIVITY_CHANGE:</span><br><span class="line">        <span class="number">79</span>d2cc1 com.zjrc.cba/cn.jiguang.privates.core.service.PushReceiver</span><br><span class="line">        fd50c66 com.zjrc.cba/com.xiaomi.push.service.receivers.NetworkStatusReceiver</span><br><span class="line">      com.huawei.intent.action.PUSH_DELAY_NOTIFY:</span><br><span class="line">        <span class="number">4618b</span>a7 com.zjrc.cba/com.huawei.hms.support.api.push.PushMsgReceiver</span><br><span class="line">      cn.jiguang.privates.intent.NOTIFICATION_RECEIVED_PROXY:</span><br><span class="line">        <span class="number">79</span>d2cc1 com.zjrc.cba/cn.jiguang.privates.core.service.PushReceiver</span><br><span class="line">      com.zjrc.cba.config.action:</span><br><span class="line">        <span class="number">3f</span>8854 com.zjrc.cba/.config.biz.ConfigReceiver</span><br><span class="line">      com.meizu.flyme.push.intent.UNREGISTER.FEEDBACK:</span><br><span class="line">        b8ed3fd com.zjrc.cba/cn.jiguang.privates.push.meizu.receiver.MeizuMessageReceiver</span><br><span class="line">      cn.jiguang.privates.intent.RECEIVE_MESSAGE:</span><br><span class="line">        <span class="number">31588f</span>2 com.zjrc.cba/.push.biz.PushMessageReceiver</span><br><span class="line">      com.huawei.android.push.intent.RECEIVE:</span><br><span class="line">        b0879a8 com.zjrc.cba/com.huawei.hms.support.api.push.PushReceiver</span><br><span class="line">      com.meizu.c2dm.intent.RECEIVE:</span><br><span class="line">        b8ed3fd com.zjrc.cba/cn.jiguang.privates.push.meizu.receiver.MeizuMessageReceiver</span><br><span class="line">      com.vivo.pushclient.action.RECEIVE:</span><br><span class="line">        d113b43 com.zjrc.cba/cn.jiguang.privates.push.vivo.receiver.VivoMessageReceiver</span><br><span class="line">      com.meizu.cloud.pushservice.action.PUSH_SERVICE_START:</span><br><span class="line">        <span class="number">936</span>d5c0 com.zjrc.cba/com.meizu.cloud.pushsdk.SystemReceiver</span><br><span class="line">      com.meizu.flyme.push.intent.MESSAGE:</span><br><span class="line">        b8ed3fd com.zjrc.cba/cn.jiguang.privates.push.meizu.receiver.MeizuMessageReceiver</span><br><span class="line">      com.meizu.c2dm.intent.REGISTRATION:</span><br><span class="line">        b8ed3fd com.zjrc.cba/cn.jiguang.privates.push.meizu.receiver.MeizuMessageReceiver</span><br><span class="line">      android.intent.action.USER_PRESENT:</span><br><span class="line">        <span class="number">79</span>d2cc1 com.zjrc.cba/cn.jiguang.privates.core.service.PushReceiver</span><br><span class="line">      com.xiaomi.push.PING_TIMER:</span><br><span class="line">        <span class="number">3f</span>9b2f9 com.zjrc.cba/com.xiaomi.push.service.receivers.PingReceiver</span><br><span class="line">      com.xiaomi.mipush.RECEIVE_MESSAGE:</span><br><span class="line">        <span class="number">8e4</span>ddcb com.zjrc.cba/cn.jiguang.privates.push.xiaomi.receiver.XiaomiMessageReceiver</span><br><span class="line">      com.meizu.flyme.push.intent.REGISTER.FEEDBACK:</span><br><span class="line">        b8ed3fd com.zjrc.cba/cn.jiguang.privates.push.meizu.receiver.MeizuMessageReceiver</span><br><span class="line">      com.huawei.intent.action.PUSH:</span><br><span class="line">        <span class="number">4618b</span>a7 com.zjrc.cba/com.huawei.hms.support.api.push.PushMsgReceiver</span><br><span class="line"></span><br><span class="line">Service Resolver Table:</span><br><span class="line">  Non-Data Actions:</span><br><span class="line">      com.huawei.push.msg.NOTIFY_MSG:</span><br><span class="line">        b6f423e com.zjrc.cba/com.huawei.hms.support.api.push.service.HmsMsgService</span><br><span class="line">      cn.jpush.android.intent.DaemonService:</span><br><span class="line">        e82489f com.zjrc.cba/cn.jpush.android.service.DaemonService</span><br><span class="line">      com.heytap.mcs.action.RECEIVE_MCS_MESSAGE:</span><br><span class="line">        <span class="number">9938</span>dec com.zjrc.cba/cn.jiguang.privates.push.oppo.service.OppoHeytapService</span><br><span class="line">      com.coloros.mcs.action.RECEIVE_MCS_MESSAGE:</span><br><span class="line">        <span class="number">99985b</span>5 com.zjrc.cba/cn.jiguang.privates.push.oppo.service.OppoColorosService</span><br><span class="line">      com.huawei.push.msg.PASSBY_MSG:</span><br><span class="line">        b6f423e com.zjrc.cba/com.huawei.hms.support.api.push.service.HmsMsgService</span><br><span class="line">      cn.jiguang.privates.intent.USER_SERVICE:</span><br><span class="line">        c19444a com.zjrc.cba/.push.biz.PushService</span><br><span class="line">      com.huawei.push.action.MESSAGING_EVENT:</span><br><span class="line">        <span class="number">4</span>cccfbb com.zjrc.cba/cn.jiguang.privates.push.huawei.service.HuaweiMessageService</span><br><span class="line"></span><br><span class="line">Permissions:</span><br><span class="line">  Permission [com.zjrc.cba.permission.PROCESS_PUSH_MSG] (<span class="number">8219</span>cd8):</span><br><span class="line">    sourcePackage=com.zjrc.cba</span><br><span class="line">    uid=<span class="number">10091</span> gids=null type=<span class="number">0</span> prot=signature|privileged</span><br><span class="line">    perm=Permission&#123;b29c831 com.zjrc.cba.permission.PROCESS_PUSH_MSG&#125;</span><br><span class="line">    packageSetting=PackageSetting&#123;<span class="number">2</span>af5b16 com.zjrc.cba/<span class="number">10091</span>&#125;</span><br><span class="line">  Permission [com.zjrc.cba.permission.PUSH_WRITE_PROVIDER] (b6eac97):</span><br><span class="line">    sourcePackage=com.zjrc.cba</span><br><span class="line">    uid=<span class="number">10091</span> gids=null type=<span class="number">0</span> prot=signature|privileged</span><br><span class="line">    perm=Permission&#123;a7fae84 com.zjrc.cba.permission.PUSH_WRITE_PROVIDER&#125;</span><br><span class="line">    packageSetting=PackageSetting&#123;<span class="number">2</span>af5b16 com.zjrc.cba/<span class="number">10091</span>&#125;</span><br><span class="line">  Permission [com.zjrc.cba.push.permission.MESSAGE] (da1b66d):</span><br><span class="line">    sourcePackage=com.zjrc.cba</span><br><span class="line">    uid=<span class="number">10091</span> gids=null type=<span class="number">0</span> prot=signature</span><br><span class="line">    perm=Permission&#123;<span class="number">8b</span>e12a2 com.zjrc.cba.push.permission.MESSAGE&#125;</span><br><span class="line">    packageSetting=PackageSetting&#123;<span class="number">2</span>af5b16 com.zjrc.cba/<span class="number">10091</span>&#125;</span><br><span class="line">  Permission [com.zjrc.cba.permission.JPUSH_MESSAGE] (de77b33):</span><br><span class="line">    sourcePackage=com.zjrc.cba</span><br><span class="line">    uid=<span class="number">10091</span> gids=null type=<span class="number">0</span> prot=signature</span><br><span class="line">    perm=Permission&#123;f8b2ef0 com.zjrc.cba.permission.JPUSH_MESSAGE&#125;</span><br><span class="line">    packageSetting=PackageSetting&#123;<span class="number">2</span>af5b16 com.zjrc.cba/<span class="number">10091</span>&#125;</span><br><span class="line">  Permission [com.zjrc.cba.permission.C2D_MESSAGE] (<span class="number">4304</span>c69):</span><br><span class="line">    sourcePackage=com.zjrc.cba</span><br><span class="line">    uid=<span class="number">10091</span> gids=null type=<span class="number">0</span> prot=signature</span><br><span class="line">    perm=Permission&#123;<span class="number">20</span>eb6ee com.zjrc.cba.permission.C2D_MESSAGE&#125;</span><br><span class="line">    packageSetting=PackageSetting&#123;<span class="number">2</span>af5b16 com.zjrc.cba/<span class="number">10091</span>&#125;</span><br><span class="line">  Permission [com.zjrc.cba.config.send] (<span class="number">614978f</span>):</span><br><span class="line">    sourcePackage=com.zjrc.cba</span><br><span class="line">    uid=<span class="number">10091</span> gids=null type=<span class="number">0</span> prot=signature</span><br><span class="line">    perm=Permission&#123;<span class="number">48</span>c4a1c com.zjrc.cba.config.send&#125;</span><br><span class="line">    packageSetting=PackageSetting&#123;<span class="number">2</span>af5b16 com.zjrc.cba/<span class="number">10091</span>&#125;</span><br><span class="line">  Permission [com.zjrc.cba.permission.MIPUSH_RECEIVE] (bf84625):</span><br><span class="line">    sourcePackage=com.zjrc.cba</span><br><span class="line">    uid=<span class="number">10091</span> gids=null type=<span class="number">0</span> prot=signature</span><br><span class="line">    perm=Permission&#123;<span class="number">3b</span>353fa com.zjrc.cba.permission.MIPUSH_RECEIVE&#125;</span><br><span class="line">    packageSetting=PackageSetting&#123;<span class="number">2</span>af5b16 com.zjrc.cba/<span class="number">10091</span>&#125;</span><br><span class="line">  Permission [com.zjrc.cba.permission.PUSH_PROVIDER] (<span class="number">44</span>d1dab):</span><br><span class="line">    sourcePackage=com.zjrc.cba</span><br><span class="line">    uid=<span class="number">10091</span> gids=null type=<span class="number">0</span> prot=signature|privileged</span><br><span class="line">    perm=Permission&#123;<span class="number">121</span>ec08 com.zjrc.cba.permission.PUSH_PROVIDER&#125;</span><br><span class="line">    packageSetting=PackageSetting&#123;<span class="number">2</span>af5b16 com.zjrc.cba/<span class="number">10091</span>&#125;</span><br><span class="line"></span><br><span class="line">Registered ContentProviders:</span><br><span class="line">  com.zjrc.cba/com.huawei.hms.update.provider.UpdateProvider:</span><br><span class="line">    Provider&#123;<span class="number">78</span>c1fa1 com.zjrc.cba/com.huawei.hms.update.provider.UpdateProvider&#125;</span><br><span class="line">  com.zjrc.cba/com.yitong.miniprogram.framework.android.provider.YTFileProvider:</span><br><span class="line">    Provider&#123;fd2b5c6 com.zjrc.cba/com.yitong.miniprogram.framework.android.provider.YTFileProvider&#125;</span><br><span class="line">  com.zjrc.cba/com.huawei.hms.support.api.push.PushProvider:</span><br><span class="line">    Provider&#123;d3de987 com.zjrc.cba/com.huawei.hms.support.api.push.PushProvider&#125;</span><br><span class="line">  com.zjrc.cba/cn.jiguang.privates.core.service.DataProvider:</span><br><span class="line">    Provider&#123;<span class="number">5</span>edc0b4 com.zjrc.cba/cn.jiguang.privates.core.service.DataProvider&#125;</span><br><span class="line">  com.zjrc.cba/cn.jpush.android.service.DownloadProvider:</span><br><span class="line">    Provider&#123;<span class="number">62</span>a14dd com.zjrc.cba/cn.jpush.android.service.DownloadProvider&#125;</span><br><span class="line">  com.zjrc.cba/android.support.v4.content.FileProvider:</span><br><span class="line">    Provider&#123;<span class="number">2346852</span> com.zjrc.cba/android.support.v4.content.FileProvider&#125;</span><br><span class="line">  com.zjrc.cba/com.huawei.agconnect.core.provider.AGConnectInitializeProvider:</span><br><span class="line">    Provider&#123;<span class="number">9859723</span> com.zjrc.cba/com.huawei.agconnect.core.provider.AGConnectInitializeProvider&#125;</span><br><span class="line">  com.zjrc.cba/com.yitong.mobile.framework.utils.YTFileProvider:</span><br><span class="line">    Provider&#123;a003420 com.zjrc.cba/com.yitong.mobile.framework.utils.YTFileProvider&#125;</span><br><span class="line"></span><br><span class="line">ContentProvider Authorities:</span><br><span class="line">  [com.zjrc.cba.DownloadProvider]:</span><br><span class="line">    Provider&#123;<span class="number">62</span>a14dd com.zjrc.cba/cn.jpush.android.service.DownloadProvider&#125;</span><br><span class="line">      applicationInfo=ApplicationInfo&#123;<span class="number">2b</span>821d9 com.zjrc.cba&#125;</span><br><span class="line">  [com.zjrc.cba.miniprogram.provider]:</span><br><span class="line">    Provider&#123;fd2b5c6 com.zjrc.cba/com.yitong.miniprogram.framework.android.provider.YTFileProvider&#125;</span><br><span class="line">      applicationInfo=ApplicationInfo&#123;<span class="number">2b</span>821d9 com.zjrc.cba&#125;</span><br><span class="line">  [com.zjrc.cba.hms.update.provider]:</span><br><span class="line">    Provider&#123;<span class="number">78</span>c1fa1 com.zjrc.cba/com.huawei.hms.update.provider.UpdateProvider&#125;</span><br><span class="line">      applicationInfo=ApplicationInfo&#123;<span class="number">2b</span>821d9 com.zjrc.cba&#125;</span><br><span class="line">  [com.zjrc.cba.huawei.push.provider]:</span><br><span class="line">    Provider&#123;d3de987 com.zjrc.cba/com.huawei.hms.support.api.push.PushProvider&#125;</span><br><span class="line">      applicationInfo=ApplicationInfo&#123;<span class="number">2b</span>821d9 com.zjrc.cba&#125;</span><br><span class="line">  [com.zjrc.cba.provider]:</span><br><span class="line">    Provider&#123;<span class="number">2346852</span> com.zjrc.cba/android.support.v4.content.FileProvider&#125;</span><br><span class="line">      applicationInfo=ApplicationInfo&#123;<span class="number">2b</span>821d9 com.zjrc.cba&#125;</span><br><span class="line">  [com.zjrc.cba.AGCInitializeProvider]:</span><br><span class="line">    Provider&#123;<span class="number">9859723</span> com.zjrc.cba/com.huawei.agconnect.core.provider.AGConnectInitializeProvider&#125;</span><br><span class="line">      applicationInfo=ApplicationInfo&#123;<span class="number">2b</span>821d9 com.zjrc.cba&#125;</span><br><span class="line">  [com.zjrc.cba.DataProvider]:</span><br><span class="line">    Provider&#123;<span class="number">5</span>edc0b4 com.zjrc.cba/cn.jiguang.privates.core.service.DataProvider&#125;</span><br><span class="line">      applicationInfo=ApplicationInfo&#123;<span class="number">2b</span>821d9 com.zjrc.cba&#125;</span><br><span class="line"></span><br><span class="line">Key Set Manager:</span><br><span class="line">  [com.zjrc.cba]</span><br><span class="line">      Signing KeySets: <span class="number">198</span></span><br><span class="line"></span><br><span class="line">Packages:</span><br><span class="line">  Package [com.zjrc.cba] (<span class="number">2</span>af5b16):</span><br><span class="line">    userId=<span class="number">10091</span></span><br><span class="line">    pkg=Package&#123;<span class="number">98</span>cb79e com.zjrc.cba&#125;</span><br><span class="line">    codePath=/data/app/com.zjrc.cba<span class="number">-1</span></span><br><span class="line">    dexoptNeeded=<span class="literal">false</span></span><br><span class="line">    resourcePath=/data/app/com.zjrc.cba<span class="number">-1</span></span><br><span class="line">    legacyNativeLibraryDir=/data/app/com.zjrc.cba<span class="number">-1</span>/lib</span><br><span class="line">    primaryCpuAbi=armeabi-v7a</span><br><span class="line">    secondaryCpuAbi=null</span><br><span class="line">    versionCode=<span class="number">100</span> targetSdk=<span class="number">30</span></span><br><span class="line">    versionName=<span class="number">1.1</span><span class="number">.0</span></span><br><span class="line">    splits=[base]</span><br><span class="line">    applicationInfo=ApplicationInfo&#123;<span class="number">2b</span>821d9 com.zjrc.cba&#125;</span><br><span class="line">    flags=[ DEBUGGABLE HAS_CODE ALLOW_CLEAR_USER_DATA LARGE_HEAP ]</span><br><span class="line">    dataDir=/data/user/<span class="number">0</span>/com.zjrc.cba</span><br><span class="line">    supportsScreens=[small, medium, large, xlarge, resizeable, anyDensity]</span><br><span class="line">    timeStamp=<span class="number">2020</span><span class="number">-11</span><span class="number">-23</span> <span class="number">16</span>:<span class="number">09</span>:<span class="number">48</span></span><br><span class="line">    firstInstallTime=<span class="number">2020</span><span class="number">-11</span><span class="number">-23</span> <span class="number">16</span>:<span class="number">10</span>:<span class="number">03</span></span><br><span class="line">    lastUpdateTime=<span class="number">2020</span><span class="number">-11</span><span class="number">-23</span> <span class="number">16</span>:<span class="number">10</span>:<span class="number">03</span></span><br><span class="line">    signatures=PackageSignatures&#123;<span class="number">310827f</span> [<span class="number">304724</span>c]&#125;</span><br><span class="line">    installPermissionsFixed=<span class="literal">true</span> installStatus=<span class="number">1</span></span><br><span class="line">    pkgFlags=[ DEBUGGABLE HAS_CODE ALLOW_CLEAR_USER_DATA LARGE_HEAP ]</span><br><span class="line">    declared permissions:</span><br><span class="line">      com.zjrc.cba.config.send: prot=signature, INSTALLED</span><br><span class="line">      com.zjrc.cba.permission.PROCESS_PUSH_MSG: prot=signature|privileged, INSTALLED</span><br><span class="line">      com.zjrc.cba.permission.PUSH_PROVIDER: prot=signature|privileged, INSTALLED</span><br><span class="line">      com.zjrc.cba.permission.PUSH_WRITE_PROVIDER: prot=signature|privileged, INSTALLED</span><br><span class="line">      com.zjrc.cba.permission.JPUSH_MESSAGE: prot=signature, INSTALLED</span><br><span class="line">      com.zjrc.cba.push.permission.MESSAGE: prot=signature, INSTALLED</span><br><span class="line">      com.zjrc.cba.permission.C2D_MESSAGE: prot=signature, INSTALLED</span><br><span class="line">      com.zjrc.cba.permission.MIPUSH_RECEIVE: prot=signature, INSTALLED</span><br><span class="line">    requested permissions:</span><br><span class="line">      android.permission.READ_PHONE_STATE</span><br><span class="line">      android.permission.ACCESS_NETWORK_STATE</span><br><span class="line">      android.permission.INTERNET</span><br><span class="line">      android.permission.WRITE_EXTERNAL_STORAGE</span><br><span class="line">      android.permission.CALL_PHONE</span><br><span class="line">      android.permission.ACCESS_FINE_LOCATION</span><br><span class="line">      android.permission.ACCESS_WIFI_STATE</span><br><span class="line">      android.permission.CHANGE_WIFI_STATE</span><br><span class="line">      android.permission.ACCESS_COARSE_LOCATION</span><br><span class="line">      android.permission.USE_FINGERPRINT</span><br><span class="line">      android.permission.REQUEST_INSTALL_PACKAGES</span><br><span class="line">      android.permission.VIBRATE</span><br><span class="line">      android.permission.SYSTEM_ALERT_WINDOW</span><br><span class="line">      android.permission.CAMERA</span><br><span class="line">      android.permission.FLASHLIGHT</span><br><span class="line">      android.permission.READ_CONTACTS</span><br><span class="line">      android.permission.READ_EXTERNAL_STORAGE</span><br><span class="line">      android.permission.GET_TASKS</span><br><span class="line">      android.permission.RESTART_PACKAGES</span><br><span class="line">      android.permission.BLUETOOTH</span><br><span class="line">      android.permission.BLUETOOTH_ADMIN</span><br><span class="line">      android.permission.WAKE_LOCK</span><br><span class="line">      android.permission.RECEIVE_USER_PRESENT</span><br><span class="line">      android.permission.MOUNT_UNMOUNT_FILESYSTEMS</span><br><span class="line">      android.permission.ACCESS_BACKGROUND_LOCATION</span><br><span class="line">      android.permission.ACCESS_LOCATION_EXTRA_COMMANDS</span><br><span class="line">      android.permission.READ_PRECISE_PHONE_STATE</span><br><span class="line">      com.zjrc.cba.permission.PROCESS_PUSH_MSG</span><br><span class="line">      com.zjrc.cba.permission.PUSH_PROVIDER</span><br><span class="line">      com.huawei.appmarket.service.commondata.permission.GET_COMMON_DATA</span><br><span class="line">      android.permission.WRITE_CONTACTS</span><br><span class="line">      android.permission.READ_CALENDAR</span><br><span class="line">      android.permission.WRITE_CALENDAR</span><br><span class="line">      com.zjrc.cba.permission.JPUSH_MESSAGE</span><br><span class="line">      com.meizu.flyme.push.permission.RECEIVE</span><br><span class="line">      com.zjrc.cba.push.permission.MESSAGE</span><br><span class="line">      com.meizu.c2dm.permission.RECEIVE</span><br><span class="line">      com.zjrc.cba.permission.C2D_MESSAGE</span><br><span class="line">      com.coloros.mcs.permission.RECIEVE_MCS_MESSAGE</span><br><span class="line">      com.heytap.mcs.permission.RECIEVE_MCS_MESSAGE</span><br><span class="line">      com.zjrc.cba.permission.MIPUSH_RECEIVE</span><br><span class="line">    install permissions:</span><br><span class="line">      android.permission.RESTART_PACKAGES: granted=<span class="literal">true</span></span><br><span class="line">      com.zjrc.cba.permission.PROCESS_PUSH_MSG: granted=<span class="literal">true</span></span><br><span class="line">      com.zjrc.cba.push.permission.MESSAGE: granted=<span class="literal">true</span></span><br><span class="line">      android.permission.BLUETOOTH: granted=<span class="literal">true</span></span><br><span class="line">      android.permission.GET_TASKS: granted=<span class="literal">true</span></span><br><span class="line">      android.permission.INTERNET: granted=<span class="literal">true</span></span><br><span class="line">      com.zjrc.cba.permission.JPUSH_MESSAGE: granted=<span class="literal">true</span></span><br><span class="line">      android.permission.BLUETOOTH_ADMIN: granted=<span class="literal">true</span></span><br><span class="line">      com.zjrc.cba.permission.C2D_MESSAGE: granted=<span class="literal">true</span></span><br><span class="line">      com.zjrc.cba.permission.MIPUSH_RECEIVE: granted=<span class="literal">true</span></span><br><span class="line">      android.permission.ACCESS_LOCATION_EXTRA_COMMANDS: granted=<span class="literal">true</span></span><br><span class="line">      android.permission.CHANGE_WIFI_STATE: granted=<span class="literal">true</span></span><br><span class="line">      android.permission.FLASHLIGHT: granted=<span class="literal">true</span></span><br><span class="line">      android.permission.ACCESS_NETWORK_STATE: granted=<span class="literal">true</span></span><br><span class="line">      android.permission.USE_FINGERPRINT: granted=<span class="literal">true</span></span><br><span class="line">      com.zjrc.cba.permission.PUSH_PROVIDER: granted=<span class="literal">true</span></span><br><span class="line">      android.permission.VIBRATE: granted=<span class="literal">true</span></span><br><span class="line">      android.permission.ACCESS_WIFI_STATE: granted=<span class="literal">true</span></span><br><span class="line">      android.permission.REQUEST_INSTALL_PACKAGES: granted=<span class="literal">true</span></span><br><span class="line">      android.permission.WAKE_LOCK: granted=<span class="literal">true</span></span><br><span class="line">    User <span class="number">0</span>:  installed=<span class="literal">true</span> hidden=<span class="literal">false</span> stopped=<span class="literal">true</span> notLaunched=<span class="literal">false</span> enabled=<span class="number">0</span></span><br><span class="line">      gids=[<span class="number">3002</span>, <span class="number">3003</span>, <span class="number">3001</span>]</span><br><span class="line">      runtime permissions:</span><br><span class="line">        android.permission.READ_PHONE_STATE: granted=<span class="literal">true</span></span><br><span class="line">        android.permission.CAMERA: granted=<span class="literal">true</span></span><br><span class="line">      disabledComponents:</span><br><span class="line">        com.xiaomi.push.service.XMPushService</span><br><span class="line">      enabledComponents:</span><br><span class="line">        cn.jpush.android.service.DaemonService</span><br><span class="line">        cn.jpush.android.service.DownloadProvider</span><br></pre></td></tr></table></figure><p><strong>3.6- 查看应用安装路径</strong></p><p>命令:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm path &lt;PACKAGE&gt;</span><br></pre></td></tr></table></figure><p>输出应用安装路径</p><p>输出示例:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm path ecarx.weather</span><br><span class="line"></span><br><span class="line">package:/data/app/ecarx.weather<span class="number">-1.</span>apk</span><br></pre></td></tr></table></figure><hr><h2 id="4-文件管理"><a href="#4-文件管理" class="headerlink" title="4- 文件管理"></a>4- 文件管理</h2><hr><p><strong>4.1- 复制设备里的文件到电脑</strong></p><p>命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb pull &lt;设备里的文件路径&gt; [电脑上的目录]</span><br></pre></td></tr></table></figure><p>其中 <em>电脑上的目录</em> 参数可以省略，默认复制到当前目录。</p><p>例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb pull /sdcard/sr.mp4 ~/tmp/</span><br></pre></td></tr></table></figure><blockquote><p>小技巧：设备上的文件路径可能需要 root 权限才能访问，如果你的设备已经 root 过，可以先使用 adb shell 和 su 命令在<br>adb shell 里获取 root 权限后，先 cp /path/on/device /sdcard/filename 将文件复制到<br>sdcard，然后 adb pull /sdcard/filename /path/on/pc。</p></blockquote><p><strong>4.2- 复制电脑里的文件到设备</strong></p><p>命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb push &lt;电脑上的文件路径&gt; &lt;设备里的目录&gt;</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb push ~/sr.mp4 /sdcard/</span><br></pre></td></tr></table></figure><blockquote><p>小技巧：设备上的文件路径普通权限可能无法直接写入，如果你的设备已经 root 过，可以先 adb push /path/on/pc<br>/sdcard/filename，然后 adb shell 和 su 在 adb shell 里获取 root 权限后，cp<br>/sdcard/filename /path/on/device。</p></blockquote><hr><h2 id="5-查看日志"><a href="#5-查看日志" class="headerlink" title="5- 查看日志"></a><strong>5- 查看日志</strong></h2><hr><p><strong>5.1- Android 日志</strong></p><p>命令格式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[adb] logcat [&lt;option&gt;] ... [&lt;filter-spec&gt;] ...</span><br></pre></td></tr></table></figure><p><strong>5.1.1- 按级别过滤日志</strong></p><p>Android 的日志分为如下几个优先级（priority）：</p><p>V —— Verbose（最低，输出得最多）<br>D —— Debug<br>I —— Info<br>W —— Warning<br>E —— Error<br>F —— Fatal<br>S —— Silent（最高，啥也不输出）<br>按某级别过滤日志则会将该级别及以上的日志输出。</p><p>比如，命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat *:W</span><br></pre></td></tr></table></figure><p>会将 Warning、Error、Fatal 和 Silent 日志输出。</p><blockquote><p>（注： 在 macOS 下需要给 *:W 这样以 * 作为 tag 的参数加双引号，如 adb logcat “*:W”，不然会报错 no<br>matches found: *:W。）</p></blockquote><p><strong>5.1.2- 按 tag 和级别过滤日志</strong></p><p><filter-spec> 可以由多个 <tag>[:priority] 组成。</p><p>比如，命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat ActivityManager:I MyApp:D *:S</span><br></pre></td></tr></table></figure><p>表示输出 tag ActivityManager 的 Info 以上级别日志，输出 tag MyApp 的 Debug 以上级别日志，及其它 tag 的 Silent 级别日志（即屏蔽其它 tag 日志）。</p><p><strong>5.2- 常用打印日志命令</strong></p><ul><li>命令行打印日志<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -v time </span><br></pre></td></tr></table></figure></li><li>输出日志到本地 log.txt 文件</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -v time &gt;<span class="built_in">log</span>.txt</span><br></pre></td></tr></table></figure><ul><li>清空日志</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -c</span><br></pre></td></tr></table></figure><hr><h2 id="6-查看设备信息"><a href="#6-查看设备信息" class="headerlink" title="6- 查看设备信息"></a>6- 查看设备信息</h2><hr><p><strong>6.1- 型号</strong></p><p>命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell getprop ro.product.model</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Nexus <span class="number">5</span></span><br></pre></td></tr></table></figure><p><strong>6.2- 电池状况</strong></p><p>命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys battery</span><br></pre></td></tr></table></figure><p>输入示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Current Battery Service state:</span><br><span class="line">  AC powered: <span class="literal">false</span></span><br><span class="line">  USB powered: <span class="literal">true</span></span><br><span class="line">  Wireless powered: <span class="literal">false</span></span><br><span class="line">  status: <span class="number">2</span></span><br><span class="line">  health: <span class="number">2</span></span><br><span class="line">  present: <span class="literal">true</span></span><br><span class="line">  level: <span class="number">44</span></span><br><span class="line">  scale: <span class="number">100</span></span><br><span class="line">  voltage: <span class="number">3872</span></span><br><span class="line">  temperature: <span class="number">280</span></span><br><span class="line">  technology: Li-poly</span><br></pre></td></tr></table></figure><p>其中 scale 代表最大电量，level 代表当前电量。上面的输出表示还剩下 44% 的电量。</p><p><strong>6.3- 屏幕分辨率</strong></p><p>命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell wm size</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Physical size: <span class="number">1080</span>x1920</span><br></pre></td></tr></table></figure><p><strong>6.4- android_id</strong></p><p>命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings get secure android_id</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">51b</span>6be48bac8c569</span><br></pre></td></tr></table></figure><p><strong>6.5- Android 系统版本</strong></p><p>命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell getprop ro.build.version.release</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5.0</span><span class="number">.2</span></span><br></pre></td></tr></table></figure><hr><h2 id="7-实用功能"><a href="#7-实用功能" class="headerlink" title="7- 实用功能"></a>7- 实用功能</h2><hr><p> <strong>7.1- 屏幕截图</strong></p><p>截图保存到电脑：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb exec-out screencap -p &gt; sc.png</span><br></pre></td></tr></table></figure><p>如果 adb 版本较老，无法使用 exec-out 命令，这时候建议更新 adb 版本。无法更新的话可以使用以下麻烦点的办法：</p><p>先截图保存到设备里：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell screencap -p /sdcard/sc.png</span><br></pre></td></tr></table></figure><p>然后将 png 文件导出到电脑：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb pull /sdcard/sc.png</span><br></pre></td></tr></table></figure><p><strong>7.2- 屏幕录制</strong></p><p>录制屏幕以 mp4 格式保存到 /sdcard：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell screenrecord /sdcard/filename.mp4</span><br></pre></td></tr></table></figure><p>需要停止时按 <strong>Ctrl-C</strong>，默认录制时间和最长录制时间都是 180 秒。</p><p>如果需要导出到电脑：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb pull /sdcard/filename.mp4</span><br></pre></td></tr></table></figure><p><strong>7.3- 重启手机</strong></p><p>命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb reboot</span><br></pre></td></tr></table></figure><p><strong>7.4- 检测设备是否已 root</strong></p><p>命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">su</span><br></pre></td></tr></table></figure><p>此时命令行提示符是 $ 则表示没有 root 权限，是 # 则表示已 root。</p><p><strong>7.5- 使用 Monkey 进行压力测试</strong></p><p>Monkey 可以生成伪随机用户事件来模拟单击、触摸、手势等操作，可以对正在开发中的程序进行随机压力测试。</p><p>简单用法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell monkey -p &lt;packagename&gt; -v <span class="number">500</span></span><br></pre></td></tr></table></figure><p>表示向 <packagename> 指定的应用程序发送 500 个伪随机事件。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac下jenkins安装步骤</title>
      <link href="2020/11/18/Mac%E4%B8%8Bjenkins%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4/"/>
      <url>2020/11/18/Mac%E4%B8%8Bjenkins%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4/</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong></p><blockquote><p>本文写的是在自己本机上部署jenkins，如果是要部署到服务器，则需要另外配置一些东西。</p></blockquote><p><strong>jenkins下载、安装、配置、新建项目</strong></p><p>1、从官网<a href="https://jenkins.io/">https://jenkins.io/</a> 上下载最新的pkg安装包,进行安装。</p><ul><li>然后一直点击next…就行<br><img  src="https://img-blog.csdnimg.cn/20201118102243936.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span></li></ul><p>2、安装完成之后，Safari可能会自动打开，如果没有自动打开，打开浏览器，输入<a href="http://localhost:8080/">http://localhost:8080</a></p><p><img  src="https://img-blog.csdnimg.cn/20201118102600982.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br>这个时候可能会报一个错误。如果出现了这面的问题。这个时候如果你重启电脑会发现Jenkins给你新增了一个用户，名字就叫Jenkins，不过这个时候你不知道密码。你可能会去试密码，肯定是是不对的，因为初始密码很复杂。这个时候正确做法是打开<a href="http://localhost:8080/">http://localhost:8080</a>会出现下图的重设初始密码的界面。</p><p>实际操作过程中分两种情况：<br>一、如果出现/Users/Shared/Jenkins/Home/这样的路径</p><p><img  src="https://img-blog.csdnimg.cn/2020111810280012.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span></p><p>按照提示，找到 这个目录下，这个目录虽然是共享目录，但是有权限的，非Jenkins用户/secrets/目录 和initialAdminPassword文件是没有读写权限的,将权限更改成读与写</p><p><img  src="https://img-blog.csdnimg.cn/20201118102846509.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br><img  src="https://img-blog.csdnimg.cn/20201118102856923.png#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br>点击右下角 锁的标志可以修改权限</p><p><img  src="https://img-blog.csdnimg.cn/2020111810292212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br>打开initialAdminPassword文件，复制出密码，就可以填到网页上去重置密码了。如下图</p><p><img  src="https://img-blog.csdnimg.cn/20201118102942243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br>二、如果出现的/Users/zhaoziliang/.jenkins/……这样的路径</p><p><img  src="https://img-blog.csdnimg.cn/20201118103000121.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br>在/Users/zhaoziliang目录下是找不到.jenkins目录<br>可以通过终端 输入open .jenkins 来打开.jenkinds目录<br>找到initialAdminPassword文件，复制出密码，就可以填到网页上去重置密码了</p><p><img  src="https://img-blog.csdnimg.cn/20201118103034147.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br>3、安装</p><p><img  src="https://img-blog.csdnimg.cn/20201118103144807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br><img  src="https://img-blog.csdnimg.cn/20201118103152721.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br><img  src="https://img-blog.csdnimg.cn/20201118103203712.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br>4、设置用户名和密码</p><p><img  src="https://img-blog.csdnimg.cn/20201118103224201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br><img  src="https://img-blog.csdnimg.cn/20201118103236268.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br>5、在建立项目之前开始设置,选择<strong>系统管理</strong></p><p><img  src="https://img-blog.csdnimg.cn/20201118103308823.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br>再选择Global Tool Configuration</p><p><img  src="https://img-blog.csdnimg.cn/20201118103327431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br>配置JDK,Gradle,Git, Gradle版本要和项目里面的Gradle版本一致,否则会报错</p><p><img  src="https://img-blog.csdnimg.cn/20201118103352636.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br><img  src="https://img-blog.csdnimg.cn/20201118103404528.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br><img  src="https://img-blog.csdnimg.cn/20201118103416817.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br><img  src="https://img-blog.csdnimg.cn/20201118103425861.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br>JDK 的JAVA_HOME从下图找到</p><p><img  src="https://img-blog.csdnimg.cn/20201118103442739.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br>git Path to Git executable 从下图找到</p><p><img  src="https://img-blog.csdnimg.cn/20201118103508598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br>Gradle的 GRADLE_HOME从下图找到</p><p><img  src="https://img-blog.csdnimg.cn/2020111810352922.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span></p><p>SDK设置</p><p><img  src="https://img-blog.csdnimg.cn/20201118103647576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br><img  src="https://img-blog.csdnimg.cn/20201118103654285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br><img  src="https://img-blog.csdnimg.cn/20201118103703314.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br>6、新建项目</p><p><img  src="https://img-blog.csdnimg.cn/20201118103757756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br>填写项目名称选择构建自由风格的项目</p><p><img  src="https://img-blog.csdnimg.cn/20201118103819839.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br>将项目地址填进去,填上用户名和密码（项目在git托管的地址和自己的git.feinno的账号密码）</p><p><img  src="https://img-blog.csdnimg.cn/2020111810384277.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br>项目中设置周期打包每天六点钟多H 6 * * *</p><p><img  src="https://img-blog.csdnimg.cn/20201118103920777.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br>选择Gradle版本</p><p><img  src="https://img-blog.csdnimg.cn/2020111810393643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br>7、fir.im Jenkins <strong>插件</strong>使用方法</p><p><a href="https://www.jianshu.com/p/9a245918a219">https://www.jianshu.com/p/9a245918a219</a></p><p>8、注意事项:</p><p>构建时,注意自己的项目在Gradle文件里需要配置如下,否则遇到元素重复的时候,直接Error编译不过去.<br>lintOptions {//设置编译的lint开关，程序在buid的时候，会执行lint检查，有任何的错误或者警告提示，都会终止构建<br>abortOnError false</p><p>在AndroidStudio里面需要配置的,将签名文件放在app目录下</p><p><img  src="https://img-blog.csdnimg.cn/20201118104154281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br>在build.gradle文件里, 根据自己的项目配置签名文件的信息 .</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">signingConfigs &#123;</span><br><span class="line">release &#123;</span><br><span class="line">keyAlias <span class="string">&#x27;&#x27;</span></span><br><span class="line">keyPassword &#x27;&#x27;</span><br><span class="line">storeFile file(&#x27;&#x27;)</span><br><span class="line">storePassword <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>安卓自动化测试工具：「appium + vscode」 安装、配置、使用</title>
      <link href="2020/11/11/%E5%AE%89%E5%8D%93%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%EF%BC%9A%E3%80%8Cappium-vscode%E3%80%8D-%E5%AE%89%E8%A3%85%E3%80%81%E9%85%8D%E7%BD%AE%E3%80%81%E4%BD%BF%E7%94%A8/"/>
      <url>2020/11/11/%E5%AE%89%E5%8D%93%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%EF%BC%9A%E3%80%8Cappium-vscode%E3%80%8D-%E5%AE%89%E8%A3%85%E3%80%81%E9%85%8D%E7%BD%AE%E3%80%81%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>一、Appium</strong></p><p><strong>1、Appium简介</strong></p><blockquote><p>Appium是一个开源测试自动化框架，可用于原生，混合和移动Web应用程序测试。</p><p>它使用WebDriver协议驱动IOS，Android和Windows应用程序。</p></blockquote><p><strong>2、关于Appium的文档</strong></p><p><a href="http://appium.io/">Appium官网</a></p><p><a href="https://github.com/appium?utf8=%E2%9C%93&q=&type=source&language=">Appiumgithub主页</a></p><p><a href="http://appium.io/docs/cn/about-appium/intro/">官方中文文档</a></p><p><strong>3、下载及使用Appium</strong></p><p>3.1、到appium官网下载安装即可</p><p>3.2、参考文档</p><p><a href="https://www.jianshu.com/p/67e94fe60270">安卓平台自动化测试之Appium工具</a></p><p>3.3、配置appium</p><p>3.3.1、打开appium</p><p><img  src="https://img-blog.csdnimg.cn/20201111102239733.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br>3.3.2、配置sdk和jdk路径</p><p><img  src="https://img-blog.csdnimg.cn/20201111102412777.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br>配置完成后，点击 Save and Restart 即可。</p><p><strong>3.4、使用appium</strong></p><p>（1）电脑连接测试机后（也可以使用模拟器），打开appium，点击下图中红框中的按钮</p><p><img  src="https://img-blog.csdnimg.cn/2020111110293177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br>（2）点击下图中编辑按钮，填写连接的手机的信息，格式如下。然后点击Save As…，下次直接可以在Saved找到方便使用</p><p><img  src="https://img-blog.csdnimg.cn/20201111103116600.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;platformName&quot;</span>: <span class="string">&quot;Android&quot;</span>,</span><br><span class="line">  <span class="string">&quot;platformVersion&quot;</span>: <span class="string">&quot;9&quot;</span>,</span><br><span class="line">  <span class="string">&quot;appPackage&quot;</span>: <span class="string">&quot;com.test.cbaa&quot;</span>,</span><br><span class="line">  <span class="string">&quot;appActivity&quot;</span>: <span class="string">&quot;com.yitong.mobile.biz.launcher.app.SplashActivity&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">platformName <span class="comment">//设备类型，我们用的是android</span></span><br><span class="line">platformVersion <span class="comment">//设备的系统版本号，我用的是安卓9版本的测试机</span></span><br><span class="line">appPackage <span class="comment">//我们测试的app的包名</span></span><br><span class="line">appActivity <span class="comment">//我们测试的app的启动页路径</span></span><br></pre></td></tr></table></figure><p>（3）然后点击 Start Session 就可以打开我们的app了</p><p><img  src="https://img-blog.csdnimg.cn/20201111104633417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span></p><blockquote><p>左边是应用程序的屏幕截图，可以在应用程序中使用鼠标来模拟操作。</p></blockquote><blockquote><p>中间是应用程序的层次结构，表示为XML。您可以通过单击它，或者通过点击屏幕快照视图中的元素来导航这棵树，会被强调。</p></blockquote><blockquote><p>右侧是细节视图，当一个元素被突出显示时，它的信息会出现在检查器右侧的细节视图中。这个细节视图包括对元素的潜在操作，以及元素属性的表。这些属性在决定如何使用特定的Appium定位策略访问元素时是有价值的。选择一个元素，还可以“Tap”元素，或者“发送键”到元素(如果它是一个文本字段)。</p></blockquote><p>（4）录制脚本</p><p>点击下图中的「录制按钮」，然后「鼠标操作」左侧的app，再点击后侧的「Tap按钮」即可录制脚本。每一步操作后，就会生成对应的脚本代码，脚本可支持多种语言选择。</p><p><img  src="https://img-blog.csdnimg.cn/20201111105913857.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span></p><hr><hr><p><strong>二、VS Code</strong></p><p><strong>1、下载VS Code</strong></p><p><a href="https://code.visualstudio.com/">下载地址</a></p><p>安装完成后，打开软件会自动提示你安装一些重要插件，如中文语言包，Git等，这里可以直接选择安装Python插件(也可以使用Ctrl+Shift+X可以打开扩展商店然后输入Python搜索)。</p><p><a href="https://www.jb51.net/softjc/733119.html">vs code如何设置中文</a></p><p><img  src="https://img-blog.csdnimg.cn/20201111110644195.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span></p><hr><p><strong>2、homebrew安装python</strong></p><p><strong>2.1、安装 Python3</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install python3</span><br></pre></td></tr></table></figure><p><strong>2.2、确认安装</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">~ $ python3 --version</span><br><span class="line">Python <span class="number">3.7</span><span class="number">.2</span></span><br><span class="line">~ $ which python3</span><br><span class="line">/usr/local/bin/python3</span><br><span class="line">~ $ which python</span><br><span class="line">/usr/bin/python</span><br></pre></td></tr></table></figure><p><strong>2.3、确认pip的版本</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">~ $ pip --version</span><br><span class="line">pip <span class="number">19.0</span><span class="number">.1</span> from /Library/Python/<span class="number">2.7</span>/site-packages/pip<span class="number">-19.0</span><span class="number">.1</span>-py2<span class="number">.7</span>.egg/pip (python <span class="number">2.7</span>)</span><br><span class="line">~ $ pip3 --version</span><br><span class="line">pip <span class="number">18.1</span> from /usr/local/lib/python3<span class="number">.7</span>/site-packages/pip (python <span class="number">3.7</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><strong>3、使用VS Code开发Python</strong></p><p><strong>3.1、VS Code中下载Python插件</strong></p><p>由于Python插件服务器在国外，所以需要配置国内镜像下载比较快。<br>在VS Code命令行中配置<a href="https://www.mobibrw.com/2019/22569">更换pip源到国内镜像</a></p><p><img  src="https://img-blog.csdnimg.cn/20201111113502476.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span></p><p><img  src="https://img-blog.csdnimg.cn/20201111113332134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span></p><p><strong>3.2、选取Python解释器</strong></p><p>使用Ctrl+Shift+P打开命令板，输入Python: Select Interpreter进行搜索。<br>接下来会显示VS Code所能找到的全部解释器，选择你需要的哪个就好。</p><p><img  src="https://img-blog.csdnimg.cn/20201111111040754.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br><strong>3.3、使用VS Code运行脚本：实现自动化测试</strong></p><p>刚刚我们使用appium生成了脚本，现在就派上用场了。</p><p>比如刚生成的脚本叫 untitled111.py</p><p>使用VS Code打开 untitled111.py</p><p><img  src="https://img-blog.csdnimg.cn/20201111111621891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span></p><p>在空白处右键选择在「终端运行Python文件」，就可以看到运行结果了。</p><p>当然也可以debug运行单步调试。</p><p>只要电脑连接上测试手机或者模拟器，启动运行脚本，则可以实现<strong>自动化测试</strong>app啦。</p><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac通过命令行编辑保存文件</title>
      <link href="2020/11/09/Mac%E9%80%9A%E8%BF%87%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%BC%96%E8%BE%91%E4%BF%9D%E5%AD%98%E6%96%87%E4%BB%B6/"/>
      <url>2020/11/09/Mac%E9%80%9A%E8%BF%87%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%BC%96%E8%BE%91%E4%BF%9D%E5%AD%98%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p><strong>1.</strong> cd 文件所在目录</p><p><strong>2.</strong> vi 文件名.文件后缀</p><p><strong>3.</strong> 输入i，进入insert模式编辑文本</p><p><strong>4.</strong> esc退出插入模式</p><p><strong>5.</strong> shift + ：wq 保存文件并退出文本编辑模式</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>博客工具:「hexo+github博客」安装、配置、编写blog</title>
      <link href="2020/11/09/%E5%8D%9A%E5%AE%A2%E5%B7%A5%E5%85%B7-%E3%80%8Chexo-github%E5%8D%9A%E5%AE%A2%E3%80%8D%E5%AE%89%E8%A3%85%E3%80%81%E9%85%8D%E7%BD%AE%E3%80%81%E7%BC%96%E5%86%99blog/"/>
      <url>2020/11/09/%E5%8D%9A%E5%AE%A2%E5%B7%A5%E5%85%B7-%E3%80%8Chexo-github%E5%8D%9A%E5%AE%A2%E3%80%8D%E5%AE%89%E8%A3%85%E3%80%81%E9%85%8D%E7%BD%AE%E3%80%81%E7%BC%96%E5%86%99blog/</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong></p><blockquote><p>hexo+github是一个博客框架,可以很简洁的在本地搭建一个属于自己的blog,有各种不同的自定义风格,同时可以把自己的blog同步到github进行保存</p></blockquote><hr><p><strong>安装+配置</strong></p><p>直接给链接,博主写的非常详细<br>1&gt; <a href="https://www.jianshu.com/p/77db3862595c">Mac 系统下搭建hexo个人博客</a><br>2&gt;<a href="https://www.jianshu.com/p/2511a362f5d1">Github+Hexo搭建个人博客</a></p><hr><p><strong>hexo主题</strong></p><p>有的小伙伴想定制自己独特的主题风格,hexo也可以满足你哦<br>1&gt;<a href="https://hexo.io/themes/">hexo官方提供的主题推荐</a></p><hr><p><strong>编写blog</strong></p><p>一个blog最主要还是编辑文章,主页搭建的再好看也的需要有干货才行啊是不</p><p><strong>1、创建新的文章</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="string">&quot;name blog的标题&quot;</span></span><br></pre></td></tr></table></figure><p><strong>2、编写blog</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open .</span><br></pre></td></tr></table></figure><p><img  src="https://img-blog.csdnimg.cn/20201109192510499.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span></p><p>打开文件夹,在 sourse-_posts 目录下打开刚刚新建的 “name blog的标题” 的文件.</p><p>编辑markdown文件，可以使用markdown神器typora。可以看到markdown文件，里面自动生成了题目和时间，还可以写标签，这些我们先不去修改，这些是yaml内容，一般不去修改，修改不好会报错。我们直接在下面编辑一些内容。</p><p><strong>3、发布文章至博客</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p><strong>4、查看blog</strong></p><p>(1)在本地的hexo中查看</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>然后打开 <a href="http://localhost:4000/">http://localhost:4000/</a></p><p>(2)在github中查看</p><p>打开自己的github项目即可</p><hr><p><strong>hexo常用命令</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g   <span class="comment">//安装  </span></span><br><span class="line">npm update hexo -g   <span class="comment">//升级 </span></span><br><span class="line">hexo version        <span class="comment">//查看hexo的版本</span></span><br><span class="line">hexo init nodejs-hexo   <span class="comment">//创建nodejs-hexo 名字的本地文件</span></span><br><span class="line">hexo init nodejs-hexo    <span class="comment">//创建博客</span></span><br><span class="line">hexo init blog          <span class="comment">//初始化，生成文件夹为blog</span></span><br><span class="line">cd blog               <span class="comment">//进入blog文件夹</span></span><br><span class="line">npm install            <span class="comment">//安装依赖库</span></span><br><span class="line">hexo generate           <span class="comment">//生成一套静态网页</span></span><br><span class="line">hexo server         <span class="comment">//运行测试,浏览器打开地址，http://localhost:4000/</span></span><br><span class="line">hexo deploy         <span class="comment">//进行部署</span></span><br><span class="line"></span><br><span class="line">hexo <span class="keyword">new</span> <span class="string">&quot;new article&quot;</span>  <span class="comment">//新建文章‘new article’</span></span><br><span class="line">hexo <span class="keyword">new</span> page <span class="string">&quot;about&quot;</span>  <span class="comment">//新建页面 ‘about’</span></span><br><span class="line"></span><br><span class="line">hexo n <span class="string">&quot;我的博客&quot;</span>` == `hexo <span class="keyword">new</span>` <span class="string">&quot;我的博客&quot;</span>    <span class="comment">//新建文章</span></span><br><span class="line">hexo g == hexo generate        <span class="comment">//生成`</span></span><br><span class="line">hexo s == hexo server          <span class="comment">//启动服务预览</span></span><br><span class="line">hexo d == hexo deploy          <span class="comment">//部署</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android 内存泄漏「检测工具」之——LeakCanary2.0</title>
      <link href="2020/10/23/Android-%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E3%80%8C%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7%E3%80%8D%E4%B9%8B%E2%80%94%E2%80%94LeakCanary2-0/"/>
      <url>2020/10/23/Android-%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E3%80%8C%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7%E3%80%8D%E4%B9%8B%E2%80%94%E2%80%94LeakCanary2-0/</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong></p><blockquote><p>在Android的性能优化中，内存优化是必不可少的点，而内存优化最重要的一点就是解决内存泄漏的问题，在Android的内存泄漏分析工具也不少，比如PC端的有：AndroidStudio自带的Android Profiler、MAT等工具；手机端也有，就是我们今天要介绍的LeakCanary</p></blockquote><p><strong>LeakCanary2.0原理</strong></p><p>详见<a href="https://github.com/square/leakcanary/tree/v2.5">LeakCanary官网文档</a></p><p><strong>LeakCanary2.0使用</strong></p><p> <strong>1. 集成</strong></p><p> LeakCanary2.0只需要在build.gradle中添加依赖即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies&#123;</span><br><span class="line">// debugImplementation because LeakCanary should only run <span class="keyword">in</span> debug builds.</span><br><span class="line">debugImplementation <span class="string">&#x27;com.squareup.leakcanary:leakcanary-android:2.4&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>官方给出的这种依赖方式，是为了<strong>防止在release环境中使用LeakCanary</strong>。</p><p>一般开发我们会有debug和release两种buildType，但是如果你想额外创建一个buildType也是可以的，也可以为这个buildType单独设置LeakCanary2.0的依赖。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            debuggable <span class="literal">false</span> //是否开启debug模式</span><br><span class="line">            ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        debug &#123;</span><br><span class="line">            debuggable <span class="literal">true</span> //是否开启debug模式</span><br><span class="line">            ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        debug2 &#123;//新建的一个buildType</span><br><span class="line">            debuggable <span class="literal">true</span> //是否开启debug模式</span><br><span class="line">            ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>为debug2单独设置LeakCanary2.0：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies&#123;</span><br><span class="line">debug2Implementation <span class="string">&#x27;com.squareup.leakcanary:leakcanary-android:2.4&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.确认LeakCanary是否运行</strong></p><p>在LogCat控制台查看如下日志确认LeakCanary已经运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D LeakCanary: LeakCanary is running and ready to detect leaks</span><br></pre></td></tr></table></figure><p><strong>参考文献</strong><br>1、<a href="https://www.jianshu.com/p/261e70f3083f">LeakCanary原理解析</a><br>2、<a href="https://www.jianshu.com/p/3b429c38e73e">LeakCanary2.0使用及原理分析</a><br>3、<a href="https://blog.csdn.net/weixin_43771048/article/details/105403750">leakcanary以及leakcanary2.0使用方法总结</a><br>4、<a href="https://blog.csdn.net/ahou2468/article/details/106973416">内存分析工具之LeakCanary2.4使用整理</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android monkey测试adb命令</title>
      <link href="2020/10/23/Android-monkey%E6%B5%8B%E8%AF%95adb%E5%91%BD%E4%BB%A4/"/>
      <url>2020/10/23/Android-monkey%E6%B5%8B%E8%AF%95adb%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p><strong>Android monkey测试</strong></p><blockquote><p>通用monkey测试命令：<br>adb shell monkey<br>-p com.hoomsun.hxb（包名）<br>–throttle 100<br>–ignore-crashes（忽略崩溃可设置）<br>–ignore-timeouts （忽略超时可设置）<br>–ignore-security-exceptions（索引越界）<br>–ignore-native-crashes<br>–monitor-native-crashes -v -v -v 10000&gt;monkeysss.txt</p></blockquote><p><strong>一、理解monkey测试</strong></p><p>1、Monkey测试是Android自动化测试的一种手段。Monkey测试本身非常简单，就是模拟用户的按键输入，触摸屏输入，手势输入等，看设备多长时间会出异常。</p><p>2、当Monkey程序在模拟器或真实设备运行的时候，程序会产生一定数量或一定时间内的随机模拟用户操作的事件, 如点击，按键，手势等， 以及一些系统级别的事件。通常也称随机测试或者稳定性测试。</p><hr><p><strong>二、查看设备连接、包名、和入口Activity</strong></p><p>1、进入cmd查看设备连接状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure><p>2、查看包名、和入口Activity</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">进入<span class="built_in">cd</span> D:\Program Files\adt-bundle-windows-x86_64-20130917\sdk\build-tools\android-4.3 </span><br><span class="line"></span><br><span class="line">目录下执行下条命令</span><br><span class="line">aapt  dump badging  apk安装包绝对路径</span><br></pre></td></tr></table></figure><hr><p><strong>三、运行monkey测试</strong></p><p>//不间断操作500次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell monkey -p 包名 -v 500 </span><br></pre></td></tr></table></figure><p>//每个操作间隔500ms，共执行100次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell  monkey -p 包名  -v-v --throttle  500 100</span><br></pre></td></tr></table></figure><p>//每个操作间隔100ms,共执行1000次 ，其中点击事件占比50%，轨迹50%                                                                            </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell monkey  -p  包名  -v-v --pct-touch  50  --pct-trackball 50 --throttle 100 1000</span><br></pre></td></tr></table></figure><p>//日志重定向到桌面文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell monkey  -p  包名  -v-v --pct-touch  50  --pct-trackball 50 --throttle 100 1000   &gt;C:\Users\xyp\Desktop\Android脚本\1.log</span><br></pre></td></tr></table></figure><p>//每个操作间隔500ms、崩溃、超时、许可错误继续执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell  monkey -p  包名   --throttle  500 --ignore-crashes --ignore-timeouts --ignore-security-exceptions --ignore-native-crashes --monitor-native-crashes -v-v-v  1000000&gt;C:\Users\xyp\Desktop\Android脚本\1.log</span><br></pre></td></tr></table></figure><hr><p><strong>四、停止monkey测试</strong></p><p>重新打开一个cmd窗口<br>进入adb shell<br>ps | grep monkey      //查找monkey进程<br>kill  进程号   //结束monkey</p><hr><p><strong>五、结果分析</strong></p><p>得到Monkey测试的log之后，我们可以通过几个关键词来判断测试是否通过。</p><p>1、<strong>Monkey finished</strong><br>用记事本打开LOG，查看log的最下端，是否有类似以下字段：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Network stats: elapsed time=3799ms (3799ms mobile, 0ms wifi, 0ms not connected)</span></span><br><span class="line">// Monkey finished</span><br></pre></td></tr></table></figure><p>这个字段表明本次的Monkey测试通过，没有异常</p><p>2、<strong>CRASH</strong><br>同样，在得到LOG后，搜索”CRASH”字段，如果搜索到有结果，则表明，在测试过程中，测试对象出现了报错现象，因此测试失败。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// CRASH: com.onekchi.downloadmanager (pid 12919)</span><br></pre></td></tr></table></figure><p>3、<strong>NOT RESPONDING</strong><br>在log中搜素该字段，如果有搜索有结果，则表示测试过程中，测试对象出现了进程无响应的现象，因此测试失败。</p><p>4、无法搜索到上述信息<br>出现这种情况，一般都是外界原因而非程序本身原因。比如测试过程中，电脑断电关机。或者测试过程中内存不足等等，结果作废，需要重新测试。</p><hr><p><strong>六、monkey说明</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">--throttle   时间间隔</span><br><span class="line">--ignore-crashes    忽略崩溃</span><br><span class="line">--ignore-timeouts  忽略超时</span><br><span class="line">--ignore-security-exceptions   忽略许可错误</span><br><span class="line">--ignore-native-crashes  忽略本地崩溃</span><br><span class="line">--monitor-native-crashes   监控本地崩溃</span><br><span class="line"> </span><br><span class="line">--pct-touch  触摸、点击</span><br><span class="line">--pct-motion 调整动作事件的百分比(动作事件由屏幕上某处的一个down事件、一系列的伪随机事件和一个up事件组成)</span><br><span class="line">--pct-trackball  调整轨迹事件的百分比(轨迹事件由一个或几个随机的移动组成，有时还伴随有点击)</span><br><span class="line">--pct-nav 调整“基本”导航事件的百分比(导航事件由来自方向输入设备的up/down/left/right组成)</span><br><span class="line"></span><br><span class="line">--pct-majornav 调整“主要”导航事件的百分比(这些导航事件通常引发图形界面中的动作，如：5-way键盘的中间按键、回退按键、菜单按键)</span><br><span class="line"></span><br><span class="line">--pct-syskeys 调整“系统”按键事件的百分比(这些按键通常被保留，由系统使用，如Home、Back、Start Call、End Call及音量控制键)</span><br><span class="line"></span><br><span class="line">--pct-appswitch 调整启动Activity的百分比。在随机间隔里，Monkey将执行一个startActivity()调用，作为最大程度覆盖包中全部Activity的一种方法</span><br><span class="line"></span><br><span class="line">--pct-flip 调整“键盘翻转”事件的百分比。</span><br><span class="line"></span><br><span class="line">--pct-anyevent 调整其它类型事件的百分比。它包罗了所有其它类型的事件，如：按键、其它不常用的设备按钮、等等</span><br></pre></td></tr></table></figure><p>注意：各事件类型的百分比总数不能超过100%。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mac安装adb工具</title>
      <link href="2020/10/23/mac%E5%AE%89%E8%A3%85adb%E5%B7%A5%E5%85%B7/"/>
      <url>2020/10/23/mac%E5%AE%89%E8%A3%85adb%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p><strong>homebrew</strong>是macOS的一个包管理工具</p><p>1、安装homebrew</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>2、安装adb</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install android-platform-tools</span><br></pre></td></tr></table></figure><p>3、运行adb</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>点击非Edittext触发EditText焦点和自动弹出软键盘</title>
      <link href="2020/10/23/%E7%82%B9%E5%87%BB%E9%9D%9EEdittext%E8%A7%A6%E5%8F%91EditText%E7%84%A6%E7%82%B9%E5%92%8C%E8%87%AA%E5%8A%A8%E5%BC%B9%E5%87%BA%E8%BD%AF%E9%94%AE%E7%9B%98/"/>
      <url>2020/10/23/%E7%82%B9%E5%87%BB%E9%9D%9EEdittext%E8%A7%A6%E5%8F%91EditText%E7%84%A6%E7%82%B9%E5%92%8C%E8%87%AA%E5%8A%A8%E5%BC%B9%E5%87%BA%E8%BD%AF%E9%94%AE%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong></p><blockquote><p>最近做项目时遇到要求点击非EditText时，使该EditText获取焦点并自动弹出软键盘的需求。由于一般情况下我们点击EditText时会自动弹出系统键盘，而对与点击其他button触发EditText的弹出键盘没做过，于是记录下。</p></blockquote><blockquote><p>实用场景<br>1、点击button时，触发EditText的获取焦点和自动弹出软键盘<br>2、点击某个话题的选项卡，会弹出一个popupwindow，或开启新的ACTIVITY。里面有诸如 评论、回复的选项，你点击这个选项的时候，需要定位到EditText编辑框，并且自动弹出输入法。</p></blockquote><p><strong>方法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">editText.requestFocus();</span><br><span class="line">InputMethodManager imm = (InputMethodManager) login_phone_et.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);</span><br><span class="line"><span class="keyword">if</span> (null != imm) &#123;</span><br><span class="line">imm.toggleSoftInput(0, InputMethodManager.SHOW_FORCED);</span><br><span class="line">&#125;          </span><br></pre></td></tr></table></figure><p>1、通过requestFocus();获取焦点；<br>2、通过InputMethodManager强制弹出键盘；</p><p><strong>参考文献</strong></p><p>1、<a href="https://www.jianshu.com/p/6f09de9e903b">事件触发EditText焦点和自动弹出键盘以及InputMethodManager输入法简</a>介</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android 获取屏幕、状态栏、标题栏的高度详解</title>
      <link href="2020/10/23/Android-%E8%8E%B7%E5%8F%96%E5%B1%8F%E5%B9%95%E3%80%81%E7%8A%B6%E6%80%81%E6%A0%8F%E3%80%81%E6%A0%87%E9%A2%98%E6%A0%8F%E7%9A%84%E9%AB%98%E5%BA%A6%E8%AF%A6%E8%A7%A3/"/>
      <url>2020/10/23/Android-%E8%8E%B7%E5%8F%96%E5%B1%8F%E5%B9%95%E3%80%81%E7%8A%B6%E6%80%81%E6%A0%8F%E3%80%81%E6%A0%87%E9%A2%98%E6%A0%8F%E7%9A%84%E9%AB%98%E5%BA%A6%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong></p><blockquote><p>如下图：<br>绿色区域：屏幕区域<br>蓝色区域：状态栏区域<br>红色区域：标题栏区域<br>黄色区域：view绘制区域</p></blockquote><p><img  src="https://img-blog.csdnimg.cn/20200928204537168.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br><strong>1.Android手机屏幕的高度（绿色区域）</strong></p><p>方法一</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DisplayMetrics dm = new DisplayMetrics();</span><br><span class="line">getWindowManager().getDefaultDisplay().getMetrics(dm);</span><br><span class="line">Log.e(<span class="string">&quot;TAG&quot;</span>, <span class="string">&quot;屏幕高:&quot;</span> + dm.heightPixels);</span><br></pre></td></tr></table></figure><p>方法二</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DisplayMetrics displayMetrics = getResources().getDisplayMetrics();</span><br><span class="line">Log.e(<span class="string">&quot;TAG&quot;</span>,<span class="string">&quot;screenHeight&quot;</span>+displayMetrics.heightPixels);</span><br></pre></td></tr></table></figure><hr><p><strong>2.Android手机状态栏的高度（蓝色区域）</strong></p><p>方法一</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int statusBarHeight1 = -1;</span><br><span class="line">//获取status_bar_height资源的ID</span><br><span class="line">int resourceId = getResources().getIdentifier(<span class="string">&quot;status_bar_height&quot;</span>, <span class="string">&quot;dimen&quot;</span>, <span class="string">&quot;android&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (resourceId &gt; 0) &#123;</span><br><span class="line">//根据资源ID获取响应的尺寸值</span><br><span class="line">statusBarHeight1 = getResources().getDimensionPixelSize(resourceId);</span><br><span class="line">&#125;</span><br><span class="line">Log.e(<span class="string">&quot;TAG&quot;</span>, <span class="string">&quot;方法1:&quot;</span> + statusBarHeight1); </span><br></pre></td></tr></table></figure><p>方法二：通过反射</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int statusBarHeight2 = -1;</span><br><span class="line">try &#123;</span><br><span class="line">Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.android.internal.R<span class="variable">$dimen</span>&quot;</span>);</span><br><span class="line">Object object = clazz.newInstance();</span><br><span class="line">    int height = Integer.parseInt(clazz.getField(<span class="string">&quot;status_bar_height&quot;</span>)</span><br><span class="line">       .get(object).toString());</span><br><span class="line"> statusBarHeight2 = getResources().getDimensionPixelSize(height);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">Log.e(<span class="string">&quot;TAG&quot;</span>, <span class="string">&quot;方法2:&quot;</span> + statusBarHeight2); </span><br></pre></td></tr></table></figure><p>方法三：状态栏高度 = 屏幕高度 - 应用区高度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//屏幕</span><br><span class="line">DisplayMetrics dm = new DisplayMetrics();</span><br><span class="line">getWindowManager().getDefaultDisplay().getMetrics(dm);</span><br><span class="line">//应用区域</span><br><span class="line">Rect outRect1 = new Rect();</span><br><span class="line">getWindow().getDecorView().getWindowVisibleDisplayFrame(outRect1);</span><br><span class="line">//状态栏高度=屏幕高度-应用区域高度</span><br><span class="line">int statusBar = dm.heightPixels - outRect1.height(); </span><br><span class="line">Log.e(<span class="string">&quot;TAG&quot;</span>, <span class="string">&quot;方法3:&quot;</span> + statusBar);</span><br></pre></td></tr></table></figure><hr><p><strong>3.Android手机应用区域（红+黄区域）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//应用区域</span><br><span class="line">Rect outRect1 = new Rect();</span><br><span class="line">getWindow().getDecorView().getWindowVisibleDisplayFrame(outRect1);</span><br><span class="line">Log.e(<span class="string">&quot;TAG&quot;</span>, <span class="string">&quot;应用区高&quot;</span> + outRect1.height());</span><br></pre></td></tr></table></figure><hr><p><strong>4.Android手机标题高度（红色区域）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int viewTop = getWindow().findViewById(Window.ID_ANDROID_CONTENT).getTop();</span><br><span class="line">Log.e(<span class="string">&quot;TAG&quot;</span>, <span class="string">&quot;标题栏：&quot;</span> + viewTop);</span><br></pre></td></tr></table></figure><hr><p><strong>5.Android手机绘制区域高度(黄色区域)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Rect outRect2 = new Rect();</span><br><span class="line">getWindow().findViewById(Window.ID_ANDROID_CONTENT).getDrawingRect(outRect2);</span><br><span class="line">Log.e(<span class="string">&quot;TAG&quot;</span>, <span class="string">&quot;View绘制区域高度：&quot;</span> + outRect2.height());</span><br></pre></td></tr></table></figure><hr><p><strong>参考文献</strong></p><p><a href="https://www.zhangshengrong.com/p/K2EaEAdaMn/">Android如何获取屏幕、状态栏及标题栏的高度详解</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android 硬件加速 4种方式</title>
      <link href="2020/10/23/Android-%E7%A1%AC%E4%BB%B6%E5%8A%A0%E9%80%9F-4%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>2020/10/23/Android-%E7%A1%AC%E4%BB%B6%E5%8A%A0%E9%80%9F-4%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><strong>前言：</strong></p><blockquote><p>硬件加速可以在一下四个级别开启或关闭：<br>（1）Application<br>（2）Activity<br>（3）Window<br>（4）View</p></blockquote><p><strong>1、Application级别</strong></p><p>在应用程序AndroidManifest.xml文件为application标签添加如下的属性即可为整个应用程序开启硬件加速：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;application android:hardwareAccelerated=<span class="string">&quot;true&quot;</span> ...&gt;</span><br></pre></td></tr></table></figure><p><strong>2、Activity级别</strong></p><p>可以控制每个activity是否开启硬件加速，只需在activity元素中添加<strong>android:hardwareAccelerated属性</strong>即可办到。<br>比如下面的例子，在application级别开启硬件加速，但在某个activity上关闭硬件加速。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;application </span><br><span class="line">android:hardwareAccelerated=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">&lt;activity ... /&gt;</span><br><span class="line">&lt;activity android:hardwareAccelerated=<span class="string">&quot;false&quot;</span> /&gt;</span><br><span class="line">&lt;/application&gt;</span><br></pre></td></tr></table></figure><p><strong>3、Window级别</strong></p><p>如果需要更小粒度的控制，可以使用如下代码开启某个window的硬件加速：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getWindow().setFlags(</span><br><span class="line">WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED,</span><br><span class="line">WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);</span><br></pre></td></tr></table></figure><p>4、View级别</p><p>可以在运行时用以下的代码关闭单个view的硬件加速：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">testView.setLayerType(View.LAYER_TYPE_SOFTWARE, null);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android 全面屏显示\沉浸式状态栏</title>
      <link href="2020/10/23/Android-%E5%85%A8%E9%9D%A2%E5%B1%8F%E6%98%BE%E7%A4%BA-%E6%B2%89%E6%B5%B8%E5%BC%8F%E7%8A%B6%E6%80%81%E6%A0%8F/"/>
      <url>2020/10/23/Android-%E5%85%A8%E9%9D%A2%E5%B1%8F%E6%98%BE%E7%A4%BA-%E6%B2%89%E6%B5%B8%E5%BC%8F%E7%8A%B6%E6%80%81%E6%A0%8F/</url>
      
        <content type="html"><![CDATA[<p><strong>前言：</strong></p><p>之前做项目为了达到全面屏显示，设置了一个theme主题样式，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 应用全屏样式 --&gt;</span><br><span class="line">   &lt;style name=<span class="string">&quot;AppFullWindowTheme&quot;</span> parent=<span class="string">&quot;AppTheme&quot;</span>&gt;</span><br><span class="line">       &lt;item name=<span class="string">&quot;android:windowFullscreen&quot;</span>&gt;<span class="literal">true</span>&lt;/item&gt;</span><br><span class="line">   &lt;/style&gt;</span><br></pre></td></tr></table></figure><blockquote><p>但是在部分手机上会出现一个坑爹的现象：<strong>虽然状态栏隐藏了，但是原状态栏位置上会被黑条占领。</strong>（没错，就是在万恶的小米手机上出现了…）</p></blockquote><p><strong>解决方案：</strong></p><p><strong>方案1:在代码中设置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">WindowManager.LayoutParams lp = activity.getWindow().getAttributes();</span><br><span class="line">            lp.layoutInDisplayCutoutMode = WindowManager.LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES;</span><br><span class="line">            activity.getWindow().setAttributes(lp);</span><br><span class="line">            </span><br><span class="line">            View decorView = activity.getWindow().getDecorView();</span><br><span class="line">            int systemUiVisibility = decorView.getSystemUiVisibility();</span><br><span class="line">            int flags =View.SYSTEM_UI_FLAG_HIDE_NAVIGATION//隐藏导航栏</span><br><span class="line">                    | View.SYSTEM_UI_FLAG_FULLSCREEN;//隐藏状态栏</span><br><span class="line">            systemUiVisibility |= flags;</span><br><span class="line">            </span><br><span class="line">            activity.getWindow().getDecorView().setSystemUiVisibility(systemUiVisibility);</span><br></pre></td></tr></table></figure><p><strong>方案2:在xml中设置theme</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style name=<span class="string">&quot;AppFullTheme&quot;</span> parent=<span class="string">&quot;AppTheme&quot;</span>&gt;</span><br><span class="line">        &lt;item name=<span class="string">&quot;android:windowTranslucentNavigation&quot;</span>&gt;<span class="literal">true</span>&lt;/item&gt;</span><br><span class="line">        &lt;item name=<span class="string">&quot;android:windowLayoutInDisplayCutoutMode&quot;</span>&gt;shortEdges&lt;/item&gt;</span><br><span class="line">        &lt;item name=<span class="string">&quot;android:windowFullscreen&quot;</span>&gt;<span class="literal">true</span>&lt;/item&gt;</span><br><span class="line"> &lt;/style&gt;</span><br></pre></td></tr></table></figure><hr><p><strong>注解1:</strong> Android P版本为我们提供了解决方法，我们可以通过对Window设置layoutInDisplayCutoutMode来达到我们的目的，先来看一下layoutInDisplayCutoutMode的几种属性：</p><blockquote><p>LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT：默认情况下，全屏窗口不会使用到刘海区域，非全屏窗口可正常使用刘海区域<br>LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER：窗口不允许和刘海屏重叠<br>LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES<br>：该窗口始终允许延伸到屏幕短边上的DisplayCutout区域。</p></blockquote><p><strong>注解2:</strong> 了解一下几个设置沉浸式状态栏的基础属性：</p><blockquote><p>1.View.SYSTEM_UI_FLAG_LOW_PROFILE：低调模式, 会隐藏不重要的状态栏图标；<br>2.View.SYSTEM_UI_FLAG_HIDE_NAVIGATION：隐藏导航栏；<br>3.View.SYSTEM_UI_FLAG_FULLSCREEN：状态栏隐藏（高度不变）；<br>4.View.SYSTEM_UI_FLAG_LAYOUT_STABLE：保持整个View稳定, 常和控制System UI悬浮, 隐藏的Flags共用, 使View不会因为System UI的变化而重新layout；<br>5.View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION：视图延伸至导航栏区域，导航栏覆盖在视图之上（在style中设置windowTranslucentNavigation）；<br>6.View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN ：视图延伸至状态栏区域，状态栏覆盖在视图之上（在style中设置windowTranslucentStatus）；<br>7.View.SYSTEM_UI_FLAG_IMMERSIVE：配合2或3同时使用，假设同时设置了2和7，状态栏隐藏，此时在状态栏顶部下滑，系统清除2设置，重新唤出状态栏，导航栏同理，滑动方向为由下至上；<br>8.View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY：作用与7相似，但是设置并未被清楚，所以状态栏与导航栏在被唤出3s后或再次点击时，再次隐藏。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac 电脑查看本机的mac地址和ip地址</title>
      <link href="2020/10/23/Mac-%E7%94%B5%E8%84%91%E6%9F%A5%E7%9C%8B%E6%9C%AC%E6%9C%BA%E7%9A%84mac%E5%9C%B0%E5%9D%80%E5%92%8Cip%E5%9C%B0%E5%9D%80/"/>
      <url>2020/10/23/Mac-%E7%94%B5%E8%84%91%E6%9F%A5%E7%9C%8B%E6%9C%AC%E6%9C%BA%E7%9A%84mac%E5%9C%B0%E5%9D%80%E5%92%8Cip%E5%9C%B0%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<p><strong>Mac电脑：获取mac地址和ip地址</strong></p><p><strong>方法1：通过「命令行」获取</strong></p><blockquote><p>打开命令行，输入ifconfig，然后找到en0，找到ether对应的就是mac地址，找到inet对应的就是ip地址。</p></blockquote><p><img  src="https://img-blog.csdnimg.cn/20200917154730177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span></p><p><strong>方法2：通过「查看关于本机信息」获取</strong></p><blockquote><p>打开关于本机 -&gt; 系统报告 -&gt; 左侧找到“WIFI” -&gt; 右边找到“en0”目录下的MAC地址</p></blockquote><p><img  src="https://img-blog.csdnimg.cn/20200917152209953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span></p><p><img  src="https://img-blog.csdnimg.cn/20200917152109908.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br><img  src="https://img-blog.csdnimg.cn/20200917152233206.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br><strong>方法三：通过「系统偏好设置」获取</strong></p><blockquote><p>打开“系统偏好设置” -&gt; “网络” -&gt; “高级” -&gt; “TCP/IP”查看ip -&gt; “硬件”查看mac地址</p></blockquote><p><img  src="https://img-blog.csdnimg.cn/20200917155927358.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br><img  src="https://img-blog.csdnimg.cn/20200917155927139.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br><img  src="https://img-blog.csdnimg.cn/20200917155927972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br><img  src="https://img-blog.csdnimg.cn/20200917155927979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android 防止按钮多次重复点击之「防重复点击」</title>
      <link href="2020/10/23/Android-%E9%98%B2%E6%AD%A2%E6%8C%89%E9%92%AE%E5%A4%9A%E6%AC%A1%E9%87%8D%E5%A4%8D%E7%82%B9%E5%87%BB%E4%B9%8B%E3%80%8C%E9%98%B2%E9%87%8D%E5%A4%8D%E7%82%B9%E5%87%BB%E3%80%8D/"/>
      <url>2020/10/23/Android-%E9%98%B2%E6%AD%A2%E6%8C%89%E9%92%AE%E5%A4%9A%E6%AC%A1%E9%87%8D%E5%A4%8D%E7%82%B9%E5%87%BB%E4%B9%8B%E3%80%8C%E9%98%B2%E9%87%8D%E5%A4%8D%E7%82%B9%E5%87%BB%E3%80%8D/</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong></p><blockquote><p>为了防止“按钮”的点击事件在短时间内多次点击从而触发了多次处理操作；<br>比如：快速点击“登录按钮”发送了多次登录接口，导致程序在短时间内进行多次数据提交or数据处理，这样的体验就不太好了。</p></blockquote><p><strong>方法</strong></p><p>判断用户点击按钮间隔时间，如果间隔时间太短，则认为是无效操作，否则进行相关业务处理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 判断两次点击事件的间隔</span><br><span class="line"> */</span><br><span class="line">public class ClickHelper &#123;</span><br><span class="line">    private static long lastClickTime = 0;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 判断事件出发时间间隔是否超过预定值</span><br><span class="line">     * 如果小于间隔（目前是1000毫秒）则返回<span class="literal">true</span>，否则返回<span class="literal">false</span></span><br><span class="line">     */</span><br><span class="line">    public static boolean <span class="function"><span class="title">isFastDoubleClick</span></span>() &#123;</span><br><span class="line">        long time = System.currentTimeMillis();</span><br><span class="line">        long timeD = time - lastClickTime;</span><br><span class="line">        <span class="keyword">if</span> (0 &lt; timeD &amp;&amp; timeD &lt; 1000) &#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        lastClickTime = time;</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>调用demo</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">btn.setOnClickListener(new View.<span class="function"><span class="title">OnClickListener</span></span>() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onClick(View view) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (ClickHelper.isFastDoubleClick()) &#123;//连续点击</span><br><span class="line">                        <span class="built_in">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    ...//此处添加点击按钮后的触发事件处理</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>macOS Catalina(10.15.6)双网卡同时连内外网</title>
      <link href="2020/10/23/macOS-Catalina-10-15-6-%E5%8F%8C%E7%BD%91%E5%8D%A1%E5%90%8C%E6%97%B6%E8%BF%9E%E5%86%85%E5%A4%96%E7%BD%91/"/>
      <url>2020/10/23/macOS-Catalina-10-15-6-%E5%8F%8C%E7%BD%91%E5%8D%A1%E5%90%8C%E6%97%B6%E8%BF%9E%E5%86%85%E5%A4%96%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<p><strong>前提</strong></p><blockquote><p>使用网线连接内网，此时不能连接外网，无线可以连接外网，却又不能完成部分在内网才能完成的操作</p></blockquote><p><strong>1、修改无线网卡的优先级，使之大于有线网卡</strong></p><p><img  src="https://img-blog.csdnimg.cn/20200916155335616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br><img  src="https://img-blog.csdnimg.cn/20200916155349832.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span></p><blockquote><p>进入系统偏好设置，网络，左下角的齿轮，更改服务顺序，拖动wifi到有线网卡上面就可以了（我的有线网卡是AX8817）</p><p>此时变成的状态是连着无线，插着网卡，以无线网卡优先，即上不了内网，可以上外网（苹果默认的是插上有线网络有线优先）</p></blockquote><p><strong>2、设置路由修改连接内网使用的网卡</strong></p><p>由于公司里内外网分两个路由，只需要修改前往公司内网地址的网关就可以了，比如你需要访问的内网地址是158.220.155.188和158.220.21.39，而公司的内网网关是158.223.13.254，那么就这样写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ sudo route delete -net 158.220.155.188 </span><br><span class="line"> </span><br><span class="line">$ sudo route -n add -net 158.220.155.188 158.223.13.254</span><br><span class="line"> </span><br><span class="line">$ sudo route delete -net 158.220.21.39</span><br><span class="line"> </span><br><span class="line">$ sudo route -n add -net 158.220.21.39 158.223.13.254</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 列出全部的路由信息</span></span><br><span class="line">$ sudo netstat -nr</span><br></pre></td></tr></table></figure><p>如果公司里内外网是一个路由，或者两个路由在同一个网段之内。此时需要有线网卡转发内网链接，无线网卡转发外网链接，写法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo route delete -net 158.220.155.188</span><br><span class="line"> </span><br><span class="line">$ sudo route add -net 158.220.155.188 -netmask 255.255.255.0 -interface en10</span><br></pre></td></tr></table></figure><p><strong>3、如何自动在每次启动的时候都切换到当前的路由表</strong></p><blockquote><p>当mac每次重启的时候，路由表都会被重置；或者拔了网线之后再连接网线，也会重置。<br>这时候避免每次我们都需要执行命令行，可以使用macOS里好用的小机器人 Automator来帮我们。<br><img  src="https://img-blog.csdnimg.cn/20200916165627607.png#pic_center"  ><span class="image-caption">在这里插入图片描述</span></p></blockquote><p><img  src="https://img-blog.csdnimg.cn/20200916161739688.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br>点击右上角的「运行」就OK了。</p><hr><p><strong>参考链接</strong></p><p><a href="https://www.jianshu.com/p/807883b2949f">Macbook利用双网卡同时连内外网</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android dp和px之间相互转换</title>
      <link href="2020/10/23/Android-dp%E5%92%8Cpx%E4%B9%8B%E9%97%B4%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/"/>
      <url>2020/10/23/Android-dp%E5%92%8Cpx%E4%B9%8B%E9%97%B4%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong></p><blockquote><p>android中在xml布局中我们可以使用dp和px都可以；<br>但是在代码中，很多方法只提供了设置px的方法，这时候就需要用到dp和px相互切换了。</p></blockquote><p><strong>方法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * dp和px之间进行转换</span><br><span class="line"> */</span><br><span class="line">public class DensityHelper &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 根据手机的分辨率从 dp 的单位 转成为 px(像素)</span><br><span class="line">     */</span><br><span class="line">    public static int dip2px(Context context, <span class="built_in">float</span> dpValue) &#123;</span><br><span class="line">        final <span class="built_in">float</span> scale = context.getResources().getDisplayMetrics().density;</span><br><span class="line">        <span class="built_in">return</span> (int) (dpValue * scale + 0.5f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据手机的分辨率从 px(像素) 的单位 转成为 dp</span><br><span class="line">     */</span><br><span class="line">    public static int px2dip(Context context, <span class="built_in">float</span> pxValue) &#123;</span><br><span class="line">        final <span class="built_in">float</span> scale = context.getResources().getDisplayMetrics().density;</span><br><span class="line">        <span class="built_in">return</span> (int) (pxValue / scale + 0.5f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android 限制EditText输入的文本行数为1</title>
      <link href="2020/10/23/Android-%E9%99%90%E5%88%B6EditText%E8%BE%93%E5%85%A5%E7%9A%84%E6%96%87%E6%9C%AC%E8%A1%8C%E6%95%B0%E4%B8%BA1/"/>
      <url>2020/10/23/Android-%E9%99%90%E5%88%B6EditText%E8%BE%93%E5%85%A5%E7%9A%84%E6%96%87%E6%9C%AC%E8%A1%8C%E6%95%B0%E4%B8%BA1/</url>
      
        <content type="html"><![CDATA[<p><strong>前言：</strong></p><p>android Edittext默认是可以换行的，但当我们用来作为输入账号、密码的时候，是希望它作为一行来展示，并不想让它可以换行。</p><hr><p><strong>方法1：</strong> 「不建议」</p><p>xml设置maxlines属性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:maxlines=<span class="string">&quot;1&quot;</span></span><br></pre></td></tr></table></figure><p>此属性设置为1，发现仅仅是显示1行，但按下回车仍然生效，可以换行输入。</p><hr><p><strong>方法2：</strong>「不建议」</p><p> xml设置singleLine属性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:singleLine=<span class="string">&quot;true&quot;</span></span><br></pre></td></tr></table></figure><p> 可以保证EditText为单行，但此方法在Android 7.0的环境下过期了</p><hr><p>**方法3:**「实用」</p><p>xml设置lines和inputType属性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android:inputType=<span class="string">&quot;text&quot;</span></span><br><span class="line">android:lines=<span class="string">&quot;1&quot;</span></span><br></pre></td></tr></table></figure><p>两项属性如上配置，可实现EditText输入框屏蔽回车键，按下回车键为换行的功能。</p><hr><p><strong>方法4:</strong></p><p>动态用addTextChangedListener去监听控件中文本的变化：</p><p>需要实现的函数有三个：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void beforeTextChanged(CharSequence A, int B, int C,int D)</span><br><span class="line"></span><br><span class="line">public void onTextChanged(CharSequence A, int B, int C, int D)</span><br><span class="line"></span><br><span class="line">public void afterTextChanged(Editable A)</span><br></pre></td></tr></table></figure><p>这个三个函数描述了editText控件的一次输入过程：</p><blockquote><p>beforeTextChanged 字符串A中从索引B位置开始的C个字符将被D个字符替换<br>onTextChanged 字符串A中从索引B位置开始的C个字符刚刚被D个字符替<br>afterTextChanged 控件中现在的字符</p></blockquote><p>这里beforeTextChanged ，onTextChanged 这两个函数中是不能对控件内容进行重新的设定的，但是afterTextChanged 是可以递归的，当然要能正确的结束递归过程。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">EditText.addTextChangedListener</span><br><span class="line">@Override</span><br><span class="line">    public void beforeTextChanged(CharSequence s, int start, int count,</span><br><span class="line">            int after) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onTextChanged(CharSequence s, int start, int before, int count) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void afterTextChanged(Editable s) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        int lines = editText.getLineCount();</span><br><span class="line">        // 限制最大输入行数</span><br><span class="line">        <span class="keyword">if</span> (lines &gt; MAXLINES) &#123;</span><br><span class="line">            String str = s.toString();</span><br><span class="line">            int cursorStart = editText.getSelectionStart();</span><br><span class="line">            int cursorEnd = editText.getSelectionEnd();</span><br><span class="line">            <span class="keyword">if</span> (cursorStart == cursorEnd &amp;&amp; cursorStart &lt; str.length() &amp;&amp; cursorStart &gt;= 1) &#123;</span><br><span class="line">                str = str.substring(0, cursorStart-1) + str.substring(cursorStart);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                str = str.substring(0, s.length()-1);</span><br><span class="line">            &#125;</span><br><span class="line">            // setText会触发afterTextChanged的递归</span><br><span class="line">            editText.setText(str);    </span><br><span class="line">            // setSelection用的索引不能使用str.length()否则会越界</span><br><span class="line">            editText.setSelection(editText.getText().length());</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MAC下Apktool、dex2jar、jd-gui的安装和反编译、回编译、重新签名简单使用</title>
      <link href="2020/10/23/MAC%E4%B8%8BApktool%E3%80%81dex2jar%E3%80%81jd-gui%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E5%8F%8D%E7%BC%96%E8%AF%91%E3%80%81%E5%9B%9E%E7%BC%96%E8%AF%91%E3%80%81%E9%87%8D%E6%96%B0%E7%AD%BE%E5%90%8D%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>2020/10/23/MAC%E4%B8%8BApktool%E3%80%81dex2jar%E3%80%81jd-gui%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E5%8F%8D%E7%BC%96%E8%AF%91%E3%80%81%E5%9B%9E%E7%BC%96%E8%AF%91%E3%80%81%E9%87%8D%E6%96%B0%E7%AD%BE%E5%90%8D%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>一、安装</strong></p><p><strong>1、安装Apktool</strong></p><p><strong>方法1：普通下载安装</strong></p><ul><li>下载<a href="https://ibotpeaches.github.io/Apktool/">Apktool</a></li><li>下载<a href="https://ibotpeaches.github.io/Apktool/install/">Apktool安装包脚本</a></li></ul><blockquote><p>macOS：<br>下载Mac 包装器脚本（右键单击，将链接另存为apktool）<br>下载apktool-2（在这里找到最新的）<br>将下载的jar重命名为 apktool.jar<br>将两个文件（apktool.jar＆apktool）移动到/usr/local/bin（需要root）<br>确保两个文件均可执行（chmod +x）<br>尝试apktool通过cli 运行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$：<span class="built_in">cd</span> /usr/<span class="built_in">local</span>/bin</span><br><span class="line">$：chmod +x apktool</span><br></pre></td></tr></table></figure><p><strong>方法2:使用homebrew安装</strong></p><blockquote><p>或者您可以通过Homebrew安装apktool ：<br>如本页所述安装Homebrew<br>brew install apktool在终端中执行命令（无需root）。最新版本将安装/usr/local/Cellar/apktool/[version]/并链接到/usr/local/bin/apktool。<br>尝试apktool通过cli 运行<br>注意 -包装脚本不是必需的，但很有用，因此您不必java -jar apktool.jar一遍又一遍地输入。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew install apktool</span><br><span class="line"><span class="comment"># 验证安装结果</span></span><br><span class="line">apktool -version </span><br></pre></td></tr></table></figure><p><strong>2、安装dex2jar</strong></p><blockquote><p>需要注意的是，假如使用dex2jar遇到<br>报错 com.googlecode.d2j.DexException: not support version。<br>则说明你安装的版本不兼容，所以尽量安装最新版本。</p></blockquote><p>下载地址：<a href="https://github.com/pxb1988/dex2jar/tree/2.1-nightly-28">https://github.com/pxb1988/dex2jar/tree/2.1-nightly-28</a></p><p><img  src="https://img-blog.csdnimg.cn/20200907203734324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br>点击右下角的<strong>Latest按钮</strong>，选择最新版本进行下载；</p><p><img  src="https://img-blog.csdnimg.cn/20200907203918681.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br>最后点击下载zip文件，解压就OK了。我比较懒，直接把dex2jar放在了桌面，也方便我使用。</p><p><strong>3、安装JD-GUI</strong></p><p>官网下载地址：<a href="http://java-decompiler.github.io/">http://java-decompiler.github.io/</a></p><p><img  src="https://img-blog.csdnimg.cn/20200907204507177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br>把app文件拖到Application文件夹下就ok了。</p><hr><p><strong>二、反编译流程</strong></p><p> 现在桌面上有一个demo.apk文件，我们复制一份，demo副本.apk<br>将副本文件名的后缀改为zip，即demo副本.zip</p><p> <strong>1. 获取xml反编译文件和smail代码</strong></p><p>启动终端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$：<span class="built_in">cd</span> /Users/apple/Desktop </span><br><span class="line">$：apktool d demo.apk</span><br></pre></td></tr></table></figure><blockquote><p>注意，demo.apk 要在控制台的当前目录下，因为demo.apk 在桌面，所以我先cd到了桌面的目录。</p></blockquote><blockquote><p>其中d是decode的意思，表示我们要对Demo.apk这个文件进行解码。那除了这个基本用法之外，我们还可以再加上一些附加参数来控制decode的更多行为：<br>· f 如果目标文件夹已存在，则强制删除现有文件夹（默认如果目标文件夹已存在，则解码失败）。<br>·o 指定解码目标文件夹的名称（默认使用APK文件的名字来命名目标文件夹。<br>·s 不反编译dex文件，也就是说classes.dex文件会被保留（默认会将dex文件解码成smali文件）。<br>·r 不反编译资源文件，也就是说resources.arsc文件会被保留（默认会将resources.arsc解码成具体的资源文件）。<br>常用用法就这么多了，那么上述命令的执行结果如下图所示：<br>原文链接：<a href="https://blog.csdn.net/u013082948/article/details/52195514">https://blog.csdn.net/u013082948/article/details/52195514</a></p></blockquote><p> <strong>2. 反编译calss.dex文件</strong></p><p>刚刚的demo副本.zip解压获得demo副本文件夹，进入文件夹后拷贝classes.dex(如果解压失败，换一个解压软件，不用系统自带的)</p><p>打开dex2jar 解压的目录，将classes.dex文件复制进去</p><p>由于我的dex2jar文件夹在桌面上，所以终端直接执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apple@fenglolodeMacBook-Pro ~ % <span class="built_in">cd</span> /Users/apple/Desktop/dex-tools-2.1 </span><br><span class="line">apple@fenglolodeMacBook-Pro dex-tools-2.1 % ./d2j-dex2jar.sh classes.dex</span><br></pre></td></tr></table></figure><p>如果没有执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apple@fenglolodeMacBook-Pro ~ % <span class="built_in">cd</span> /Users/apple/Desktop/dex-tools-2.1 </span><br><span class="line">apple@fenglolodeMacBook-Pro dex-tools-2.1 % chmod +x ./*</span><br><span class="line">apple@fenglolodeMacBook-Pro dex-tools-2.1 % ./d2j-dex2jar.sh classes.dex</span><br></pre></td></tr></table></figure><p>这个时候文件夹下回多出一个jar文件classes-dex2jar.jar</p><p> <strong>3. 查看jar文件代码</strong></p><p>打开 JD-GUI ，将 jar 拖拽到 JD-GUI 区域就可以看代码了（该代码是混淆之后的）</p><hr><p><strong>三、回编译流程</strong></p><p>以demo.apk通过 <strong>apktool d demo.apk</strong> 反编译生成的demo文件为例：<br>命令行窗口输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apktool b demo</span><br></pre></td></tr></table></figure><p>新生成的apk会在<strong>demo/dist/目录</strong>下面。<strong>若报错则输入apktool -r b name,资源文件不反编译，避免资源报错</strong></p><hr><p> <strong>四、apk 签名，打包</strong></p><p>命令行窗口输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jarsigner -verbose -keystore 签名文件名字 -signedjar newName.apk oldName.apk 签名文件名字</span><br><span class="line">输入密钥库的密码短语:</span><br></pre></td></tr></table></figure><blockquote><p>备注：<br>签名文件名字：如abc.keystore<br>newName.apk：签名后的apk的名字，可自定义<br>oldName.apk：需要被签名的apk的名字，如我的案例中应为demo.apk</p></blockquote><p>然后输入你的签名文件的密码就开始重新签名了，签名后的apk为你自定义的newName.apk。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>记录wget使用详解 &amp; Mac安装wget</title>
      <link href="2020/10/23/%E8%AE%B0%E5%BD%95wget%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3-Mac%E5%AE%89%E8%A3%85wget/"/>
      <url>2020/10/23/%E8%AE%B0%E5%BD%95wget%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3-Mac%E5%AE%89%E8%A3%85wget/</url>
      
        <content type="html"><![CDATA[<p><strong>一、记录wget使用详解</strong></p><p><strong>1、什么是wget</strong></p><p><a href="https://baike.baidu.com/item/wget">百度百科介绍的wget</a></p><p><strong>2、wget命令详解</strong></p><p>来自大牛<a href="https://www.cnblogs.com/sx66/">随性i</a>的文章介绍的<a href="https://www.cnblogs.com/sx66/p/11887022.html">wget命令详解</a></p><p><strong>二、Mac安装wget的两种方法</strong></p><p><strong>1、手动下载并终端安装</strong></p><ul><li>从<a href="ftp://ftp.gnu.org/gnu/wget/">ftp://ftp.gnu.org/gnu/wget/</a>下载到最新的wget安装包到本地</li><li>将解压的安装包放到自己想要保管的路径下，然后在终端进入对应的安装包位置，如果不知道文件的路径可查看文件的简介-位置 或者直接把文件拖进终端即可显示文件路径</li><li>打开终端，进入wget文件路径，然后在终端依次输入：./configure、  make  以及 make install 命令</li></ul><p><strong>2、直接终端使用homebrew安装</strong></p><ul><li><p>执行安装brew（<a href="https://brew.sh/index_zh-cn">homebrew官网地址</a>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>安装 wget</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install wget</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android Dialog 去掉透明遮罩层「全透明」</title>
      <link href="2020/10/23/Android-Dialog-%E5%8E%BB%E6%8E%89%E9%80%8F%E6%98%8E%E9%81%AE%E7%BD%A9%E5%B1%82%E3%80%8C%E5%85%A8%E9%80%8F%E6%98%8E%E3%80%8D/"/>
      <url>2020/10/23/Android-Dialog-%E5%8E%BB%E6%8E%89%E9%80%8F%E6%98%8E%E9%81%AE%E7%BD%A9%E5%B1%82%E3%80%8C%E5%85%A8%E9%80%8F%E6%98%8E%E3%80%8D/</url>
      
        <content type="html"><![CDATA[<p>dialog即使设置透明背景也会有一个蒙层（遮罩层），有时候因为UI设计并不想要这个蒙层。</p><p>一行代码搞定</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dialog.getWindow().setDimAmount(0f);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android 使用简单帧动画实现一个自定义动态等待层</title>
      <link href="2020/10/23/Android-%E4%BD%BF%E7%94%A8%E7%AE%80%E5%8D%95%E5%B8%A7%E5%8A%A8%E7%94%BB%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8A%A8%E6%80%81%E7%AD%89%E5%BE%85%E5%B1%82/"/>
      <url>2020/10/23/Android-%E4%BD%BF%E7%94%A8%E7%AE%80%E5%8D%95%E5%B8%A7%E5%8A%A8%E7%94%BB%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8A%A8%E6%80%81%E7%AD%89%E5%BE%85%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong></p><p>项目中有时候需要自定义等待层，使用帧动画实现一个动态的等待层还是不错的。</p><p><strong>一、简单帧动画实现</strong></p><p><strong>1.在drawable下创建loading_view.xml</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;animation-list xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">               android:oneshot=<span class="string">&quot;false&quot;</span> &gt;</span><br><span class="line">    &lt;item android:drawable=<span class="string">&quot;@drawable/loading_001&quot;</span> android:duration=<span class="string">&quot;50&quot;</span>/&gt;</span><br><span class="line">    &lt;item android:drawable=<span class="string">&quot;@drawable/loading_002&quot;</span> android:duration=<span class="string">&quot;50&quot;</span>/&gt;</span><br><span class="line">    &lt;item android:drawable=<span class="string">&quot;@drawable/loading_003&quot;</span> android:duration=<span class="string">&quot;50&quot;</span>/&gt;</span><br><span class="line">&lt;/animation-list&gt;</span><br></pre></td></tr></table></figure><p><strong>2.在xml布局中调用loading_view</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ImageView</span><br><span class="line">          android:id=<span class="string">&quot;@+id/img_loading_view&quot;</span></span><br><span class="line">          android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">          android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">          android:layout_gravity=<span class="string">&quot;center&quot;</span></span><br><span class="line">          android:src=<span class="string">&quot;@drawable/loading_view&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p><strong>3、在代码中调用</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ImageView imgLoadingView = (ImageView) view.findViewById(R.id.img_loading_view);</span><br><span class="line">AnimationDrawable animationDrawable = (AnimationDrawable) imgLoadingView.getDrawable();</span><br><span class="line"></span><br><span class="line">animationDrawable.start();//开启动画</span><br><span class="line">animationDrawable.stop();//关闭动画</span><br></pre></td></tr></table></figure><p><strong>二、帧动画等待层</strong></p><p>只需要自定义一个dialog，xml布局中使用以上帧动画即可。<br>当开启等待层时调用：</p><blockquote><p>animationDrawable.start();//开启动画</p></blockquote><p>当关闭等待层时调用：</p><blockquote><p>animationDrawable.stop();//关闭动画</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android 自定义dialog学习之——自定义一个提示框</title>
      <link href="2020/10/23/Android-%E8%87%AA%E5%AE%9A%E4%B9%89dialog%E5%AD%A6%E4%B9%A0%E4%B9%8B%E2%80%94%E2%80%94%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E6%8F%90%E7%A4%BA%E6%A1%86/"/>
      <url>2020/10/23/Android-%E8%87%AA%E5%AE%9A%E4%B9%89dialog%E5%AD%A6%E4%B9%A0%E4%B9%8B%E2%80%94%E2%80%94%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E6%8F%90%E7%A4%BA%E6%A1%86/</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong></p><p>最近项目中觉的Android系统的dialog样式太丑，确实也不太好看，就打算自定义一个dialog来使用。</p><p><strong>自定义dialog实例demo</strong></p><p><strong>1、布局</strong><br>dialog_alert</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;@dimen/dp_550&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">    android:layout_gravity=<span class="string">&quot;center&quot;</span></span><br><span class="line">    android:background=<span class="string">&quot;@drawable/new_dialog_bg&quot;</span></span><br><span class="line">    android:orientation=<span class="string">&quot;vertical&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--标题--&gt;</span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=<span class="string">&quot;@+id/tv_title&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;@dimen/dp_80&quot;</span></span><br><span class="line">        android:layout_marginLeft=<span class="string">&quot;@dimen/dp_60&quot;</span></span><br><span class="line">        android:layout_marginRight=<span class="string">&quot;@dimen/dp_60&quot;</span></span><br><span class="line">        android:gravity=<span class="string">&quot;center|bottom&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;@string/title&quot;</span></span><br><span class="line">        android:textColor=<span class="string">&quot;@color/color_222222&quot;</span></span><br><span class="line">        android:textSize=<span class="string">&quot;@dimen/dp_32&quot;</span></span><br><span class="line">        android:textStyle=<span class="string">&quot;bold&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--提示信息--&gt;</span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=<span class="string">&quot;@+id/tv_msg&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_marginLeft=<span class="string">&quot;@dimen/dp_60&quot;</span></span><br><span class="line">        android:layout_marginTop=<span class="string">&quot;@dimen/dp_36&quot;</span></span><br><span class="line">        android:layout_marginRight=<span class="string">&quot;@dimen/dp_60&quot;</span></span><br><span class="line">        android:layout_marginBottom=<span class="string">&quot;@dimen/dp_50&quot;</span></span><br><span class="line">        android:gravity=<span class="string">&quot;center&quot;</span></span><br><span class="line">        android:textColor=<span class="string">&quot;@color/color_222222&quot;</span></span><br><span class="line">        android:textSize=<span class="string">&quot;@dimen/dp_28&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;View</span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;@dimen/dp_1&quot;</span></span><br><span class="line">        android:background=<span class="string">&quot;@color/color_E8E8E8&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;@dimen/dp_92&quot;</span></span><br><span class="line">        android:orientation=<span class="string">&quot;horizontal&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--取消按钮--&gt;</span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:id=<span class="string">&quot;@+id/tv_cancel&quot;</span></span><br><span class="line">            android:layout_width=<span class="string">&quot;0dp&quot;</span></span><br><span class="line">            android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">            android:layout_weight=<span class="string">&quot;1&quot;</span></span><br><span class="line">            android:gravity=<span class="string">&quot;center&quot;</span></span><br><span class="line">            android:text=<span class="string">&quot;@string/tv_cancel&quot;</span></span><br><span class="line">            android:textColor=<span class="string">&quot;@color/color_666666&quot;</span></span><br><span class="line">            android:textSize=<span class="string">&quot;@dimen/dp_28&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;View</span><br><span class="line">            android:id=<span class="string">&quot;@+id/v_line&quot;</span></span><br><span class="line">            android:layout_width=<span class="string">&quot;@dimen/dp_1&quot;</span></span><br><span class="line">            android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">            android:background=<span class="string">&quot;@color/color_E8E8E8&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--确认按钮--&gt;</span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:id=<span class="string">&quot;@+id/tv_ok&quot;</span></span><br><span class="line">            android:layout_width=<span class="string">&quot;0dp&quot;</span></span><br><span class="line">            android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">            android:layout_weight=<span class="string">&quot;1&quot;</span></span><br><span class="line">            android:gravity=<span class="string">&quot;center&quot;</span></span><br><span class="line">            android:text=<span class="string">&quot;@string/tv_ok&quot;</span></span><br><span class="line">            android:textColor=<span class="string">&quot;@color/color_00A1C1&quot;</span></span><br><span class="line">            android:textSize=<span class="string">&quot;@dimen/dp_28&quot;</span> /&gt;</span><br><span class="line">    &lt;/LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure><p>new_dialog_bg</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;shape xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br><span class="line">    &lt;!-- 边框的宽度和颜色 --&gt;</span><br><span class="line">    &lt;stroke</span><br><span class="line">        android:width=<span class="string">&quot;@dimen/dp_1&quot;</span></span><br><span class="line">        android:color=<span class="string">&quot;#E8E8E8&quot;</span> /&gt;</span><br><span class="line">    &lt;!-- 圆角的半径 --&gt;</span><br><span class="line">    &lt;corners android:radius=<span class="string">&quot;@dimen/dp_12&quot;</span> /&gt;</span><br><span class="line">    &lt;!-- 填充颜色 --&gt;</span><br><span class="line">    &lt;solid android:color=<span class="string">&quot;#FFFFFF&quot;</span> /&gt;</span><br><span class="line">&lt;/shape&gt;</span><br></pre></td></tr></table></figure><p><strong>2、代码实现</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">public class MyDialog extends Dialog implements View.OnClickListener &#123;</span><br><span class="line">    private TextView tv_title;</span><br><span class="line">    private TextView tv_msg;</span><br><span class="line">    private TextView tv_cancel;</span><br><span class="line">    private TextView tv_ok;</span><br><span class="line">    private View v_line;</span><br><span class="line"></span><br><span class="line">    private OkOnClickListener okOnClickListener;</span><br><span class="line">    private CancelOnClickListener cancelOnClickListener;</span><br><span class="line"></span><br><span class="line">    public MyDialog(@NonNull Context context) &#123;</span><br><span class="line">        this(context, R.style.BaseDialogStyle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public MyDialog(@NonNull Context context, int themeResId) &#123;</span><br><span class="line">        super(context, themeResId);</span><br><span class="line">        setContentView(R.layout.dialog_alert);</span><br><span class="line">        initView();</span><br><span class="line">        initAction();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        WindowManager m = getWindow().getWindowManager();</span><br><span class="line">        Display d = m.getDefaultDisplay();</span><br><span class="line">        WindowManager.LayoutParams p = getWindow().getAttributes();</span><br><span class="line">        p.width = d.getWidth(); //设置dialog的宽度为当前手机屏幕的宽度</span><br><span class="line">        getWindow().setAttributes(p);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void <span class="function"><span class="title">initView</span></span>() &#123;</span><br><span class="line">        tv_title = findViewById(R.id.tv_title);</span><br><span class="line">        tv_msg = findViewById(R.id.tv_msg);</span><br><span class="line">        tv_cancel = findViewById(R.id.tv_cancel);</span><br><span class="line">        tv_ok = findViewById(R.id.tv_ok);</span><br><span class="line">        v_line = findViewById(R.id.v_line);</span><br><span class="line"></span><br><span class="line">        tv_ok.setOnClickListener(this);</span><br><span class="line">        tv_cancel.setOnClickListener(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //默认设置ok和cancel按钮都不可见：这样可以代码动态设置只显示一个按钮或者两个按钮，使控件更加实用</span><br><span class="line">    private void <span class="function"><span class="title">initAction</span></span>() &#123;</span><br><span class="line">        tv_cancel.setVisibility(View.GONE);</span><br><span class="line">        tv_ok.setVisibility(View.GONE);</span><br><span class="line">        v_line.setVisibility(View.GONE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//设置title</span><br><span class="line">    public MyDialog setTitle(String title) &#123;</span><br><span class="line">        <span class="keyword">if</span> (this.tv_title != null) &#123;</span><br><span class="line">            this.tv_title.setText(StringUtil.isEmpty(title) ? this.getContext().getResources().getString(R.string.title) : title);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //设置msg</span><br><span class="line">    public MyDialog setMessage(String message) &#123;</span><br><span class="line">        <span class="keyword">if</span> (this.tv_msg != null) &#123;</span><br><span class="line">            this.tv_msg.setText(StringUtil.isEmpty(message) ? <span class="string">&quot;&quot;</span> : message);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //设置ok按钮点击事件</span><br><span class="line">    public MyDialog setPositiveButton(String okMsg, OkOnClickListener okOnClickListener) &#123;</span><br><span class="line">        <span class="keyword">if</span> (this.tv_ok != null) &#123;</span><br><span class="line">            this.tv_ok.setVisibility(View.VISIBLE);</span><br><span class="line">            this.tv_ok.setText(StringUtil.isEmpty(okMsg) ? this.getContext().getResources().getString(R.string.tv_ok) : okMsg);</span><br><span class="line">            this.okOnClickListener = okOnClickListener;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //设置cancel按钮点击事件</span><br><span class="line">    public MyDialog setNegativeButton(String cancelMsg, CancelOnClickListener cancelOnClickListener) &#123;</span><br><span class="line">        <span class="keyword">if</span> (this.tv_cancel != null) &#123;</span><br><span class="line">            this.tv_cancel.setVisibility(View.VISIBLE);</span><br><span class="line">            this.v_line.setVisibility(View.VISIBLE);</span><br><span class="line">            this.tv_cancel.setText(StringUtil.isEmpty(cancelMsg) ? this.getContext().getResources().getString(R.string.tv_cancel) : cancelMsg);</span><br><span class="line">            this.cancelOnClickListener = cancelOnClickListener;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View v) &#123;</span><br><span class="line">        dismiss();</span><br><span class="line">        int id = v.getId();</span><br><span class="line">        <span class="keyword">if</span> (id == R.id.tv_ok) &#123;</span><br><span class="line">            <span class="keyword">if</span> (okOnClickListener != null) &#123;</span><br><span class="line">                okOnClickListener.confirm();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (id == R.id.tv_cancel) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cancelOnClickListener != null) &#123;</span><br><span class="line">                cancelOnClickListener.cancel();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public interface OkOnClickListener &#123;</span><br><span class="line">        void confirm();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public interface CancelOnClickListener &#123;</span><br><span class="line">        void cancel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、调用dialog</strong><br>我们写一个工具类来调用，这样全局只需要调用工具类就ok了，不用每次都new一个dialog对象来调用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">//工具类</span><br><span class="line">public class DialogHelper &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 单按钮dialog弹出框</span><br><span class="line">     *</span><br><span class="line">     * @param context           上下文</span><br><span class="line">     * @param title             标题</span><br><span class="line">     * @param msg               内容</span><br><span class="line">     * @param cancelOutSide     是否可以点击dialog外部时关闭dialog</span><br><span class="line">     * @param ok                确认按钮</span><br><span class="line">     * @param okOnClickListener 确认回调</span><br><span class="line">     */</span><br><span class="line">    public static void showDialog(Context context, String title, String msg, boolean cancelOutSide,</span><br><span class="line">                                  String ok, MyDialog.OkOnClickListener okOnClickListener) &#123;</span><br><span class="line"></span><br><span class="line">        showDialog(context, title, msg, <span class="literal">true</span>, cancelOutSide, ok, okOnClickListener, <span class="string">&quot;&quot;</span>, null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 双按钮dialog弹出框</span><br><span class="line">     *</span><br><span class="line">     * @param context               上下文</span><br><span class="line">     * @param title                 标题</span><br><span class="line">     * @param msg                   内容</span><br><span class="line">     * @param hideCancel            是否隐藏“取消”按钮</span><br><span class="line">     * @param cancelOutSide         是否可以点击dialog外部时关闭dialog</span><br><span class="line">     * @param ok                    确认按钮</span><br><span class="line">     * @param okOnClickListener     确认回调</span><br><span class="line">     * @param cancel                取消按钮</span><br><span class="line">     * @param cancelOnClickListener 取消回调</span><br><span class="line">     */</span><br><span class="line">    public static void showDialog(Context context, String title, String msg, boolean hideCancel, boolean cancelOutSide,</span><br><span class="line">                                  String ok, MyDialog.OkOnClickListener okOnClickListener,</span><br><span class="line">                                  String cancel, MyDialog.CancelOnClickListener cancelOnClickListener) &#123;</span><br><span class="line">        MyDialog dialog = new MyDialog(context);</span><br><span class="line">        dialog.setTitle(title);</span><br><span class="line">        dialog.setMessage(msg);</span><br><span class="line">        dialog.setCanceledOnTouchOutside(cancelOutSide);</span><br><span class="line">        dialog.setCancelable(cancelOutSide);</span><br><span class="line">        dialog.setPositiveButton(ok, okOnClickListener);</span><br><span class="line">        <span class="keyword">if</span> (!hideCancel) &#123;</span><br><span class="line">            dialog.setNegativeButton(cancel, cancelOnClickListener);</span><br><span class="line">        &#125;</span><br><span class="line">        dialog.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4、最后附上自定义dialog的样式</strong></p><p><img  src="https://img-blog.csdnimg.cn/20200905152857622.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac 中 Android Studio使用内存调整方法</title>
      <link href="2020/10/23/Mac-%E4%B8%AD-Android-Studio%E4%BD%BF%E7%94%A8%E5%86%85%E5%AD%98%E8%B0%83%E6%95%B4%E6%96%B9%E6%B3%95/"/>
      <url>2020/10/23/Mac-%E4%B8%AD-Android-Studio%E4%BD%BF%E7%94%A8%E5%86%85%E5%AD%98%E8%B0%83%E6%95%B4%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><strong>Mac下调整Android Studio可使用内存大小</strong></p><p><strong>前言</strong></p><blockquote><p>当使用 MAC 安装完 AS 后，系统会给AS的内存值分配一个默认值，这个默认值是一个通用的，不可能去适配到每台机器。<br>默认的值在/Applications/Android Studio.app/Contents/bin/studio.vmoptions这个文件里面</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-Xms256m</span><br><span class="line">-Xmx1280m</span><br><span class="line">-XX:ReservedCodeCacheSize=240m</span><br><span class="line">-XX:+UseConcMarkSweepGC</span><br><span class="line">-XX:SoftRefLRUPolicyMSPerMB=50</span><br><span class="line">-XX:CICompilerCount=2</span><br><span class="line">-Dsun.io.useCanonPrefixCache=<span class="literal">false</span></span><br><span class="line">-Djava.net.preferIPv4Stack=<span class="literal">true</span></span><br><span class="line">-Djdk.http.auth.tunneling.disabledSchemes=<span class="string">&quot;&quot;</span></span><br><span class="line">-Djdk.attach.allowAttachSelf=<span class="literal">true</span></span><br><span class="line">-Dkotlinx.coroutines.debug=off</span><br><span class="line">-Djdk.module.illegalAccess.silent=<span class="literal">true</span></span><br><span class="line">-Djna.nosys=<span class="literal">true</span></span><br><span class="line">-Djna.boot.library.path=</span><br><span class="line">-XX:+UseCompressedOops</span><br><span class="line">-Dfile.encoding=UTF-8</span><br><span class="line"></span><br><span class="line">-XX:ErrorFile=<span class="variable">$USER_HOME</span>/java_error_in_studio_%p.log</span><br><span class="line">-XX:HeapDumpPath=<span class="variable">$USER_HOME</span>/java_error_in_studio.hprof</span><br></pre></td></tr></table></figure><p><strong>修改方式1:（不建议）</strong></p><p>可以直接修改/Applications/AndroidStudio.app/Contents/bin/studio.vmoptions这个文件的内容，但是不建议直接修改该安装目录下的配置，如果修改了这个配置，每当你升级AS的时候都会有个alert框提示：这个目录下有冲突了，还是有点烦的。</p><p><strong>修改方式2:（推荐）</strong></p><p>修改~/Library/Preferences/AndroidStudio4.0/目录下的studio.vmoptions文件，如果没这个文件的话就自己touch个，最后将自己的配置写进去</p><p>如果你用的是别的版本的AS，上面的路径需要对应到正确的版本，比如用的是AS v3.1，那么对应的路径应该是~/Library/Preferences/AndroidStudio3.1/</p><p>以下是我的修改的配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># custom Android Studio VM options, see https://developer.android.com/studio/intro/studio-config.html</span></span><br><span class="line">-Xmx4096m</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android ViewFlipper控件使用之——图片切换的实现「带手势检测」</title>
      <link href="2020/10/23/Android-ViewFlipper%E6%8E%A7%E4%BB%B6%E4%BD%BF%E7%94%A8%E4%B9%8B%E2%80%94%E2%80%94%E5%9B%BE%E7%89%87%E5%88%87%E6%8D%A2%E7%9A%84%E5%AE%9E%E7%8E%B0%E3%80%8C%E5%B8%A6%E6%89%8B%E5%8A%BF%E6%A3%80%E6%B5%8B%E3%80%8D/"/>
      <url>2020/10/23/Android-ViewFlipper%E6%8E%A7%E4%BB%B6%E4%BD%BF%E7%94%A8%E4%B9%8B%E2%80%94%E2%80%94%E5%9B%BE%E7%89%87%E5%88%87%E6%8D%A2%E7%9A%84%E5%AE%9E%E7%8E%B0%E3%80%8C%E5%B8%A6%E6%89%8B%E5%8A%BF%E6%A3%80%E6%B5%8B%E3%80%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="使用ViewFlipper控件实现图片切换"><a href="#使用ViewFlipper控件实现图片切换" class="headerlink" title="使用ViewFlipper控件实现图片切换"></a>使用ViewFlipper控件实现图片切换</h2><p><strong>参考</strong>：<a href="https://blog.csdn.net/harvic880925/article/details/39585347">ViewFlipper使用详解</a></p><p><strong>前言</strong></p><blockquote><p>ViewFlipper是一个切换控件<br>1、一般用于图片的切换<br>2、也可以用来添加View，不限定只用于ImageView，也可以是自定义View；只是我们经常利用ViewFlipper来实现ImageView的切换，如果切换自定义的View，使用ViewPager做更方便吧。</p></blockquote><p><strong>一、使用ViewFlipper实现「图片切换」demo案例</strong></p><p><strong>ViewFlipper布局：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ViewFlipper</span><br><span class="line">        android:id=<span class="string">&quot;@+id/flipper&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;100dp&quot;</span></span><br><span class="line">        android:layout_marginTop=<span class="string">&quot;10dp&quot;</span></span><br><span class="line">        android:flipInterval=<span class="string">&quot;2000&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p><strong>代码实现：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ViewFlipper mFlipper = findViewById(R.id.flipper);</span><br><span class="line"></span><br><span class="line">mFlipper.addView(getImageView(R.mipmap.img_1));</span><br><span class="line">    mFlipper.addView(getImageView(R.mipmap.img_2));</span><br><span class="line">    mFlipper.addView(getImageView(R.mipmap.img_3));</span><br><span class="line">    mFlipper.addView(getImageView(R.mipmap.img_4));</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> (mFlipper.getChildCount() &gt; 1) &#123;</span><br><span class="line">        mFlipper.startFlipping();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mFlipper.stopFlipping();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><p><strong>二、完整版demo「包含手势检测，可以手动滑动图片切换」</strong></p><p><strong>代码实现：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 图片切换demo:手势切换</span><br><span class="line"> */</span><br><span class="line">public class TwoActivity extends Activity &#123;</span><br><span class="line"></span><br><span class="line">    private ViewFlipper mFlipper;</span><br><span class="line">    private GestureDetector mDetector; //手势检测</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_two);</span><br><span class="line"></span><br><span class="line">        initView();</span><br><span class="line">        initData();</span><br><span class="line">        initAction();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void <span class="function"><span class="title">initView</span></span>() &#123;</span><br><span class="line">        mFlipper = findViewById(R.id.flipper);</span><br><span class="line">        mDetector = new GestureDetector(new simpleGestureListener());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void <span class="function"><span class="title">initData</span></span>() &#123;</span><br><span class="line">        mFlipper.addView(getImageView(R.mipmap.img_1));</span><br><span class="line">        mFlipper.addView(getImageView(R.mipmap.img_2));</span><br><span class="line">        mFlipper.addView(getImageView(R.mipmap.img_3));</span><br><span class="line">        mFlipper.addView(getImageView(R.mipmap.img_4));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @SuppressLint(<span class="string">&quot;ClickableViewAccessibility&quot;</span>)</span><br><span class="line">    private void <span class="function"><span class="title">initAction</span></span>() &#123;</span><br><span class="line">        mFlipper.setOnTouchListener(new View.<span class="function"><span class="title">OnTouchListener</span></span>() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public boolean onTouch(View view, MotionEvent motionEvent) &#123;</span><br><span class="line">                <span class="built_in">return</span> mDetector.onTouchEvent(motionEvent);//手势监听</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span> (mFlipper.getChildCount() &gt; 1) &#123;</span><br><span class="line">            mFlipper.startFlipping();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mFlipper.stopFlipping();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private ImageView getImageView(int id) &#123;</span><br><span class="line">        ImageView imageView = new ImageView(this);</span><br><span class="line">        imageView.setImageResource(id);</span><br><span class="line">        <span class="built_in">return</span> imageView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private class simpleGestureListener extends GestureDetector.SimpleOnGestureListener &#123;</span><br><span class="line">        final int FLING_MIN_DISTANCE = 100, FLING_MIN_VELOCITY = 200;</span><br><span class="line"></span><br><span class="line">        //不知道为什么，不加上onDown函数的话，onFling就不会响应，真是奇怪</span><br><span class="line">        @Override</span><br><span class="line">        public boolean onDown(MotionEvent e) &#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public boolean onFling(MotionEvent e1, MotionEvent e2, <span class="built_in">float</span> velocityX, <span class="built_in">float</span> velocityY) &#123;</span><br><span class="line">            // Fling left</span><br><span class="line">            <span class="keyword">if</span> (e1.getX() - e2.getX() &gt; FLING_MIN_DISTANCE</span><br><span class="line">                    &amp;&amp; Math.abs(velocityX) &gt; FLING_MIN_VELOCITY) &#123;</span><br><span class="line"></span><br><span class="line">                mFlipper.showNext();//展示下一张图片</span><br><span class="line"></span><br><span class="line">                Toast.makeText(TwoActivity.this, <span class="string">&quot;Fling Left&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e2.getX() - e1.getX() &gt; FLING_MIN_DISTANCE</span><br><span class="line">                    &amp;&amp; Math.abs(velocityX) &gt; FLING_MIN_VELOCITY) &#123;</span><br><span class="line">                // Fling right</span><br><span class="line"></span><br><span class="line">                mFlipper.showPrevious();//展示上一张图片</span><br><span class="line"></span><br><span class="line">                Toast.makeText(TwoActivity.this, <span class="string">&quot;Fling Right&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android  ViewFlipper控件使用之——滑动轮播公告的实现</title>
      <link href="2020/10/23/Android-ViewFlipper%E6%8E%A7%E4%BB%B6%E4%BD%BF%E7%94%A8%E4%B9%8B%E2%80%94%E2%80%94%E6%BB%91%E5%8A%A8%E8%BD%AE%E6%92%AD%E5%85%AC%E5%91%8A%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>2020/10/23/Android-ViewFlipper%E6%8E%A7%E4%BB%B6%E4%BD%BF%E7%94%A8%E4%B9%8B%E2%80%94%E2%80%94%E6%BB%91%E5%8A%A8%E8%BD%AE%E6%92%AD%E5%85%AC%E5%91%8A%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="使用ViewFlipper控件实现轮播公告"><a href="#使用ViewFlipper控件实现轮播公告" class="headerlink" title="使用ViewFlipper控件实现轮播公告"></a>使用ViewFlipper控件实现轮播公告</h2><p><strong>前言</strong></p><blockquote><p>ViewFlipper是一个切换控件<br>1、一般用于图片的切换<br>2、也可以用来添加View，不限定只用于ImageView，也可以是自定义View；只是我们经常利用ViewFlipper来实现ImageView的切换，如果切换自定义的View，使用ViewPager做更方便吧。</p></blockquote><p><strong>一、使用ViewFlipper实现轮播公告demo案例</strong></p><p><strong>1、布局文件配置：</strong></p><p><strong>ViewFlipper布局：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;ViewFlipper</span><br><span class="line">        android:id=<span class="string">&quot;@+id/vf_notice&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;60dp&quot;</span></span><br><span class="line">        android:autoStart=<span class="string">&quot;true&quot;</span></span><br><span class="line">        android:background=<span class="string">&quot;@mipmap/new_home_bubble&quot;</span></span><br><span class="line">        android:flipInterval=<span class="string">&quot;3000&quot;</span></span><br><span class="line">        android:inAnimation=<span class="string">&quot;@anim/home_notice_in&quot;</span></span><br><span class="line">        android:outAnimation=<span class="string">&quot;@anim/home_notice_out&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p><strong>进入动画home_notice_in：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;<span class="built_in">set</span> xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;translate</span><br><span class="line">        android:duration=<span class="string">&quot;500&quot;</span></span><br><span class="line">        android:fromYDelta=<span class="string">&quot;100.0%p&quot;</span></span><br><span class="line">        android:toYDelta=<span class="string">&quot;0.0&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;alpha</span><br><span class="line">        android:duration=<span class="string">&quot;500&quot;</span></span><br><span class="line">        android:fromAlpha=<span class="string">&quot;0.0&quot;</span></span><br><span class="line">        android:toAlpha=<span class="string">&quot;1.0&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/<span class="built_in">set</span>&gt;</span><br></pre></td></tr></table></figure><p><strong>滑出动画home_notice_out:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;<span class="built_in">set</span> xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;translate</span><br><span class="line">        android:duration=<span class="string">&quot;500&quot;</span></span><br><span class="line">        android:fromYDelta=<span class="string">&quot;0.0&quot;</span></span><br><span class="line">        android:toYDelta=<span class="string">&quot;-100.0%p&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;alpha</span><br><span class="line">        android:duration=<span class="string">&quot;500&quot;</span></span><br><span class="line">        android:fromAlpha=<span class="string">&quot;1.0&quot;</span></span><br><span class="line">        android:toAlpha=<span class="string">&quot;0.0&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/<span class="built_in">set</span>&gt;</span><br></pre></td></tr></table></figure><p><strong>new_notice_item布局</strong><br><strong>自定义view填充ViewFlipper</strong><br>「这里demo使用的是ViewFlipper.add(view)方式」</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;60dp&quot;</span></span><br><span class="line">    android:gravity=<span class="string">&quot;center_vertical&quot;</span></span><br><span class="line">    android:orientation=<span class="string">&quot;horizontal&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=<span class="string">&quot;@+id/tv_value&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_marginLeft=<span class="string">&quot;20dp&quot;</span></span><br><span class="line">        android:gravity=<span class="string">&quot;center_vertical&quot;</span></span><br><span class="line">        android:ellipsize=<span class="string">&quot;end&quot;</span></span><br><span class="line">        android:maxLines=<span class="string">&quot;1&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;测试测试&quot;</span></span><br><span class="line">        android:textColor=<span class="string">&quot;#256470&quot;</span></span><br><span class="line">        android:textSize=<span class="string">&quot;20dp&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure><p><strong>2、代码逻辑实现</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends Activity &#123;</span><br><span class="line"></span><br><span class="line">    private ViewFlipper mViewFlipper;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        initView();</span><br><span class="line">        initData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void <span class="function"><span class="title">initView</span></span>() &#123;</span><br><span class="line">        mViewFlipper = (ViewFlipper) findViewById(R.id.vf_notice);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void <span class="function"><span class="title">initData</span></span>() &#123;</span><br><span class="line">        List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;这是公告111&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;这是公告222&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;这是公告333&quot;</span>);</span><br><span class="line">        initNotice(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //设置滑动轮播list</span><br><span class="line">    private void initNotice(final List&lt;String&gt; list) &#123;</span><br><span class="line">        mViewFlipper.removeAllViews();//先移除之前的所有view</span><br><span class="line">        <span class="keyword">for</span> (int i = 0; i &lt; list.size(); i++) &#123;</span><br><span class="line">            View view = LayoutInflater.from(this).inflate(R.layout.new_notice_item, null);</span><br><span class="line">            TextView tvValue = (TextView) view.findViewById(R.id.tv_value);</span><br><span class="line">            tvValue.setText(list.get(i));</span><br><span class="line">            final int finalI = i;</span><br><span class="line">            view.setOnClickListener(new View.<span class="function"><span class="title">OnClickListener</span></span>() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onClick(View view) &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.this, list.get(finalI), Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            mViewFlipper.addView(view);//add方式进行添加</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mViewFlipper.getChildCount() &gt; 1) &#123;</span><br><span class="line">            mViewFlipper.startFlipping();//开启动画</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mViewFlipper.stopFlipping();//关闭动画</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>二、ViewFlipper使用介绍</strong></p><p><strong>1、在xml布局中的方法介绍:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">android:autoStart： 设置自动加载下一个View</span><br><span class="line"></span><br><span class="line">android:flipInterval：设置View之间切换的时间间隔</span><br><span class="line"></span><br><span class="line">android:inAnimation： 设置切换View的进入动画</span><br><span class="line"></span><br><span class="line">android:outAnimation：设置切换View的退出动画</span><br></pre></td></tr></table></figure><p><strong>2、在代码中设置的方法介绍：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">isFlipping： 判断View切换是否正在进行</span><br><span class="line"></span><br><span class="line">setFilpInterval：设置View之间切换的时间间隔</span><br><span class="line"></span><br><span class="line">startFlipping： 开始View的切换，而且会循环进行</span><br><span class="line"></span><br><span class="line">stopFlipping： 停止View的切换</span><br><span class="line"></span><br><span class="line">setOutAnimation：设置切换View的退出动画</span><br><span class="line"></span><br><span class="line">setInAnimation： 设置切换View的进入动画</span><br><span class="line"></span><br><span class="line">showNext： 显示ViewFlipper里的下一个View</span><br><span class="line"></span><br><span class="line">showPrevious： 显示ViewFlipper里的上一个View</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>demo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">viewflipper.setInAnimation(AnimationUtils.loadAnimation(MainActivity.this, R.anim.home_notice_in));         </span><br><span class="line"></span><br><span class="line">viewflipper.setOutAnimation(AnimationUtils.loadAnimation(MainActivity.this, R.anim.home_notice_out));</span><br><span class="line"> </span><br><span class="line">viewflipper.showNext();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android 获取手机设备信息：名称、型号、系统版本号、厂商、设备制造商、SDK版本、系统语言等等</title>
      <link href="2020/10/23/Android-%E8%8E%B7%E5%8F%96%E6%89%8B%E6%9C%BA%E8%AE%BE%E5%A4%87%E4%BF%A1%E6%81%AF%EF%BC%9A%E5%90%8D%E7%A7%B0%E3%80%81%E5%9E%8B%E5%8F%B7%E3%80%81%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC%E5%8F%B7%E3%80%81%E5%8E%82%E5%95%86%E3%80%81%E8%AE%BE%E5%A4%87%E5%88%B6%E9%80%A0%E5%95%86%E3%80%81SDK%E7%89%88%E6%9C%AC%E3%80%81%E7%B3%BB%E7%BB%9F%E8%AF%AD%E8%A8%80%E7%AD%89%E7%AD%89/"/>
      <url>2020/10/23/Android-%E8%8E%B7%E5%8F%96%E6%89%8B%E6%9C%BA%E8%AE%BE%E5%A4%87%E4%BF%A1%E6%81%AF%EF%BC%9A%E5%90%8D%E7%A7%B0%E3%80%81%E5%9E%8B%E5%8F%B7%E3%80%81%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC%E5%8F%B7%E3%80%81%E5%8E%82%E5%95%86%E3%80%81%E8%AE%BE%E5%A4%87%E5%88%B6%E9%80%A0%E5%95%86%E3%80%81SDK%E7%89%88%E6%9C%AC%E3%80%81%E7%B3%BB%E7%BB%9F%E8%AF%AD%E8%A8%80%E7%AD%89%E7%AD%89/</url>
      
        <content type="html"><![CDATA[<p><strong>常用的设备信息获取方法：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 设备名称</span><br><span class="line">    *</span><br><span class="line">    * @<span class="built_in">return</span> 设备名称</span><br><span class="line">    */</span><br><span class="line">   public static String <span class="function"><span class="title">getDeviceName</span></span>() &#123;</span><br><span class="line">       <span class="built_in">return</span> android.os.Build.DEVICE;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">    * 设备型号</span><br><span class="line">    *</span><br><span class="line">    * @<span class="built_in">return</span> 设备型号</span><br><span class="line">    */</span><br><span class="line">   public static String <span class="function"><span class="title">getModelName</span></span>() &#123;</span><br><span class="line">       <span class="built_in">return</span> android.os.Build.MODEL;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 获取当前手机系统版本号</span><br><span class="line">    *</span><br><span class="line">    * @<span class="built_in">return</span> 系统版本号</span><br><span class="line">    */</span><br><span class="line">   public static String <span class="function"><span class="title">getSystemVersion</span></span>() &#123;</span><br><span class="line">       <span class="built_in">return</span> android.os.Build.VERSION.RELEASE;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 获取厂商</span><br><span class="line">    *</span><br><span class="line">    * @<span class="built_in">return</span> 厂商</span><br><span class="line">    */</span><br><span class="line">   public static String <span class="function"><span class="title">getBrand</span></span>() &#123;</span><br><span class="line">       <span class="built_in">return</span> android.os.Build.BRAND;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 获取设备制造商</span><br><span class="line">    *</span><br><span class="line">    * @<span class="built_in">return</span> 制造商</span><br><span class="line">    */</span><br><span class="line">   public static String <span class="function"><span class="title">getManufacturer</span></span>() &#123;</span><br><span class="line">       <span class="built_in">return</span> android.os.Build.MANUFACTURER;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">    * SDK 版本</span><br><span class="line">    * @<span class="built_in">return</span></span><br><span class="line">    */</span><br><span class="line">   public static String <span class="function"><span class="title">getSDKVersion</span></span>() &#123;</span><br><span class="line">       SDKVersion = android.os.Build.VERSION.SDK ;</span><br><span class="line">       <span class="built_in">return</span>  SDKVersion;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">/**</span><br><span class="line">    * 获取当前手机系统语言。</span><br><span class="line">    *</span><br><span class="line">    * @<span class="built_in">return</span> 返回当前系统语言。例如：当前设置的是“中文-中国”，则返回“zh-CN”</span><br><span class="line">    */</span><br><span class="line">   public static String <span class="function"><span class="title">getSystemLanguage</span></span>() &#123;</span><br><span class="line">       <span class="built_in">return</span> Locale.getDefault().getLanguage();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 获取当前系统上的语言列表(Locale列表)</span><br><span class="line">    *</span><br><span class="line">    * @<span class="built_in">return</span>  语言列表</span><br><span class="line">    */</span><br><span class="line">   public static Locale[] <span class="function"><span class="title">getSystemLanguageList</span></span>() &#123;</span><br><span class="line">       <span class="built_in">return</span> Locale.getAvailableLocales();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android 获取应用「唯一标识符」——DeviceID「兼容android 10（Q）」</title>
      <link href="2020/10/23/Android-%E8%8E%B7%E5%8F%96%E5%BA%94%E7%94%A8%E3%80%8C%E5%94%AF%E4%B8%80%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%8D%E2%80%94%E2%80%94DeviceID%E3%80%8C%E5%85%BC%E5%AE%B9android-10%EF%BC%88Q%EF%BC%89%E3%80%8D/"/>
      <url>2020/10/23/Android-%E8%8E%B7%E5%8F%96%E5%BA%94%E7%94%A8%E3%80%8C%E5%94%AF%E4%B8%80%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%8D%E2%80%94%E2%80%94DeviceID%E3%80%8C%E5%85%BC%E5%AE%B9android-10%EF%BC%88Q%EF%BC%89%E3%80%8D/</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong></p><p>更多方法请参考<a href="https://developer.android.google.cn/training/articles/user-data-ids#java">官方文档</a></p><p><strong>一、Android Q 之前</strong></p><p><strong>1、所需权限</strong><br>需动态申请权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=<span class="string">&quot;android.permission.READ_PHONE_STATE&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p><strong>2、获取方法</strong><br>获取设备Id，IMEI等</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TelephonyManager telManager = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);</span><br><span class="line">telManager.getDeviceId();</span><br><span class="line">telManager.getImei();</span><br></pre></td></tr></table></figure><p>但是这个方法在Android Q之后就不生效了。</p><p><strong>二、Android Q之后</strong><br>下面是我们项目使用的一种方法，当然网上还有其它很多种兼容方式可以参考。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">public static String getDeviceId(Context context) &#123;</span><br><span class="line">    final int targetSdkVersion = context.getApplicationInfo().targetSdkVersion;</span><br><span class="line">    <span class="keyword">if</span> (targetSdkVersion &gt; Build.VERSION_CODES.P &amp;&amp; Build.VERSION.SDK_INT &gt; Build.VERSION_CODES.P) &#123;</span><br><span class="line">        <span class="built_in">return</span> getUniqueID(context);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">return</span> getTelId(context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">private static String getTelId(Context context) &#123;</span><br><span class="line">    final TelephonyManager manager = (TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);</span><br><span class="line">    <span class="built_in">return</span> manager.getDeviceId();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">private static String getUniqueID(Context context) &#123;</span><br><span class="line">    String id = null;</span><br><span class="line">    final String androidId = Settings.Secure.getString(context.getContentResolver(), Settings.Secure.ANDROID_ID);</span><br><span class="line">    <span class="keyword">if</span> (!TextUtils.isEmpty(androidId) &amp;&amp; !<span class="string">&quot;9774d56d682e549c&quot;</span>.equals(androidId)) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            UUID uuid = UUID.nameUUIDFromBytes(androidId.getBytes(<span class="string">&quot;utf8&quot;</span>));</span><br><span class="line">            id = uuid.toString();</span><br><span class="line">        &#125; catch (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(id)) &#123;</span><br><span class="line">        id = getUUID();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">return</span> TextUtils.isEmpty(id) ? UUID.randomUUID().toString() : id;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">private static String <span class="function"><span class="title">getUUID</span></span>() &#123;</span><br><span class="line">    String serial = null;</span><br><span class="line"> </span><br><span class="line">    String m_szDevIDShort = <span class="string">&quot;35&quot;</span> +</span><br><span class="line">            Build.BOARD.length() % 10 + Build.BRAND.length() % 10 +</span><br><span class="line"> </span><br><span class="line">            ((null != Build.CPU_ABI) ? Build.CPU_ABI.length() : 0) % 10 + </span><br><span class="line">            </span><br><span class="line">            Build.DEVICE.length() % 10 + Build.DISPLAY.length() % 10 + </span><br><span class="line">            </span><br><span class="line">            Build.HOST.length() % 10 + Build.ID.length() % 10 + </span><br><span class="line">            </span><br><span class="line">            Build.MANUFACTURER.length() % 10 + Build.MODEL.length() % 10 + </span><br><span class="line">            </span><br><span class="line">            Build.PRODUCT.length() % 10 + Build.TAGS.length() % 10 + </span><br><span class="line">            </span><br><span class="line">            Build.TYPE.length() % 10 + Build.USER.length() % 10; //13 位</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt;= Build.VERSION_CODES.P) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123;</span><br><span class="line">                serial = android.os.Build.getSerial();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                serial = Build.SERIAL;</span><br><span class="line">            &#125;</span><br><span class="line">            //API&gt;=9 使用serial号</span><br><span class="line">            <span class="built_in">return</span> new UUID(m_szDevIDShort.hashCode(), serial.hashCode()).toString();</span><br><span class="line">        &#125; catch (Exception exception) &#123;</span><br><span class="line">            serial = <span class="string">&quot;serial&quot;</span>; // 随便一个初始化</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        serial = android.os.Build.UNKNOWN; // 随便一个初始化</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    //使用硬件信息拼凑出来的15位号码</span><br><span class="line">    <span class="built_in">return</span> new UUID(m_szDevIDShort.hashCode(), serial.hashCode()).toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android Glide集成及使用注意事项——Glide 4.x</title>
      <link href="2020/10/23/Android-Glide%E9%9B%86%E6%88%90%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%E2%80%94%E2%80%94Glide-4-x/"/>
      <url>2020/10/23/Android-Glide%E9%9B%86%E6%88%90%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%E2%80%94%E2%80%94Glide-4-x/</url>
      
        <content type="html"><![CDATA[<h2 id="Glide-4-x集成及使用注意事项"><a href="#Glide-4-x集成及使用注意事项" class="headerlink" title="Glide 4.x集成及使用注意事项"></a>Glide 4.x集成及使用注意事项</h2><p><strong>前言</strong></p><p>原文请到<a href="https://www.jianshu.com/p/f1f17f816d1d">lmz14大神</a>参考使用<br>更多用法请到<a href="https://muyangmin.github.io/glide-docs-cn/doc/download-setup.html">官方指南</a>参考使用</p><p><strong>一、集成</strong></p><p><strong>1、project gradle</strong></p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">repositories</span> &#123;</span><br><span class="line">       <span class="function"><span class="title">mavenLocal</span>()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、app gradle</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">compile</span> &#x27;com.android.support:support-v<span class="number">4</span>:<span class="number">25</span>.<span class="number">3</span>.<span class="number">1</span>&#x27;</span><br><span class="line"><span class="attribute">compile</span> &#x27;com.github.bumptech.glide:glide:<span class="number">4</span>.<span class="number">0</span>.<span class="number">0</span>&#x27;</span><br><span class="line"><span class="attribute">annotationProcessor</span> &#x27;com.github.bumptech.glide:compiler:<span class="number">4</span>.<span class="number">0</span>.<span class="number">0</span>&#x27;</span><br></pre></td></tr></table></figure><p><strong>3、混淆</strong></p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#glide4.0</span></span><br><span class="line">-keep public <span class="class"><span class="keyword">class</span> * <span class="title">implements</span> <span class="title">com</span>.<span class="title">bumptech</span>.<span class="title">glide</span>.<span class="title">module</span>.<span class="title">GlideModule</span></span></span><br><span class="line">-keep public <span class="class"><span class="keyword">class</span> * <span class="title">extends</span> <span class="title">com</span>.<span class="title">bumptech</span>.<span class="title">glide</span>.<span class="title">AppGlideModule</span></span></span><br><span class="line">-keep public <span class="class"><span class="keyword">enum</span> <span class="title">com</span>.<span class="title">bumptech</span>.<span class="title">glide</span>.<span class="title">load</span>.<span class="title">resource</span>.<span class="title">bitmap</span>.<span class="title">ImageHeaderParser</span>$** &#123;</span></span><br><span class="line">  **[] $VALUES;</span><br><span class="line">  public *;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># for DexGuard only</span></span><br><span class="line">-keepresourcexmlelements manifest/application/meta-data@value=GlideModule</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从glide4.0开始，GifDrawable没有提供getDecoder()方法，</span></span><br><span class="line"><span class="comment"># 需要通过反射获取gifDecoder字段值，所以需要保持GifFrameLoader和GifState类不被混淆</span></span><br><span class="line">-keep <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">bumptech</span>.<span class="title">glide</span>.<span class="title">load</span>.<span class="title">resource</span>.<span class="title">gif</span>.<span class="title">GifDrawable</span>$<span class="title">GifState</span>&#123;*;</span>&#125;</span><br><span class="line">-keep <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">bumptech</span>.<span class="title">glide</span>.<span class="title">load</span>.<span class="title">resource</span>.<span class="title">gif</span>.<span class="title">GifFrameLoader</span> &#123;*;</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>4、在4.0中不用像3.X需要在AndroidManifest.xml配置GlideModule，而是通过注解继承AppGlideModule的子类来配置。</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GlideModule</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">GlideConfiguration</span> <span class="keyword">extends</span> <span class="title">AppGlideModule</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void applyOptions(<span class="type">Context</span> context, <span class="type">GlideBuilder</span> builder) &#123;</span><br><span class="line">        <span class="comment">//自定义缓存目录，磁盘缓存给150M 另外一种设置缓存方式</span></span><br><span class="line">        builder.setDiskCache(<span class="keyword">new</span> <span class="type">InternalCacheDiskCacheFactory</span>(context, <span class="string">&quot;GlideImgCache&quot;</span>, <span class="number">150</span> * <span class="number">1024</span> * <span class="number">1024</span>));</span><br><span class="line">        <span class="comment">//配置图片缓存格式 默认格式为8888</span></span><br><span class="line">        builder.setDefaultRequestOptions(<span class="type">RequestOptions</span>.formatOf(<span class="type">DecodeFormat</span>.<span class="type">PREFER_ARGB_8888</span>));</span><br><span class="line">        <span class="type">ViewTarget</span>.setTagId(<span class="type">R</span>.id.glide_tag_id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 禁止解析Manifest文件</span></span><br><span class="line"><span class="comment">     * 主要针对V3升级到v4的用户，可以提升初始化速度，避免一些潜在错误</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public boolean isManifestParsingEnabled() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>二、使用</strong></p><p><strong>1、基本用法</strong><br>多数情况下，使用Glide加载图片非常简单，一行代码足矣：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Glide</span><span class="selector-class">.with</span>(<span class="selector-tag">context</span>)</span><br><span class="line">        <span class="selector-class">.load</span>(<span class="selector-tag">myUrl</span>)</span><br><span class="line">        <span class="selector-class">.into</span>(<span class="selector-tag">imageView</span>);</span><br></pre></td></tr></table></figure><p>取消加载同样很简单：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Glide</span>.</span></span><span class="keyword">with</span>(context).clear(imageView);</span><br></pre></td></tr></table></figure><p>尽管及时取消不必要的加载是很好的实践，但这并不是必须的操作。实际上，当 Glide.with() 中传入的 Activity 或 Fragment 实例销毁时，Glide 会自动取消加载并回收资源。</p><p><strong>2、加载圆形图</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Glide</span>.</span></span><span class="keyword">with</span>(this)</span><br><span class="line">        .load(<span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>mipmap.ic_splash_bg)</span><br><span class="line">        .apply(bitmap<span class="constructor">Transform(<span class="params">new</span> CropCircleTransformation()</span>))</span><br><span class="line">        .into(mImageHead);</span><br></pre></td></tr></table></figure><p><strong>3、模糊过滤</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Glide</span>.</span></span><span class="keyword">with</span>(this)</span><br><span class="line">        .load(<span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>mipmap.ic_splash_bg)</span><br><span class="line">        .apply(bitmap<span class="constructor">Transform(<span class="params">new</span> BlurTransformation( 25, 4)</span>))</span><br><span class="line">        .into(mImageView);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>4、在 Application 模块中的使用</strong><br>在 Application 模块中，可创建一个添加有 @GlideModule 注解，继承自 AppGlideModule 的类。此类可生成出一个流式 API，内联了多种选项，和集成库中自定义的选项：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.myapp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bumptech.glide.annotation.<span class="type">GlideModule</span>;</span><br><span class="line"><span class="keyword">import</span> com.bumptech.glide.module.<span class="type">AppGlideModule</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GlideModule</span></span><br><span class="line">public <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAppGlideModule</span> <span class="keyword">extends</span> <span class="title">AppGlideModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>生成的 API 默认名为 GlideApp ，与 AppGlideModule 的子类包名相同。在 Application 模块中将 Glide.with() 替换为 GlideApp.with()，即可使用该 API 去完成加载工作。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">GlideApp</span><span class="selector-class">.with</span>(<span class="selector-tag">context</span>)</span><br><span class="line">   <span class="selector-class">.load</span>(<span class="selector-tag">myUrl</span>)</span><br><span class="line">    <span class="selector-class">.placeholder</span>(<span class="selector-tag">placeholder</span>)</span><br><span class="line">  <span class="selector-class">.fitCenter</span>()</span><br><span class="line"> <span class="selector-class">.into</span>(<span class="selector-tag">imageView</span>);</span><br></pre></td></tr></table></figure><p><strong>三、注意事项</strong></p><p><strong>1、使用GlideApp代替Glide，asBitmap、asGif、asDrawable、asFile都要放到load之前（glide3.7.0都是要在load之后调用）。</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static void load<span class="constructor">Img(Context <span class="params">context</span>,String <span class="params">url</span>, ImageView <span class="params">imageView</span>)</span>&#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">GlideApp</span>.</span></span><span class="keyword">with</span>(context)</span><br><span class="line">                .<span class="keyword">as</span><span class="constructor">Bitmap()</span></span><br><span class="line">                .load(url)</span><br><span class="line">                .placeholder(<span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>drawable.placeholder) <span class="comment">//设置资源加载过程中的占位符</span></span><br><span class="line">                .into(imageView);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>2、占位符.placeholder(R.drawable.placeholder)不能用.9图，占位图片和加载的目标图片会同时显示，只是目标图片会先显示缩略图，然后显示正常。</strong></p><p><strong>3、加载gif图时，若调用dontAnimate()移除所有动画，gif就会加载失败。</strong></p><p><strong>4、设置淡入淡出动画</strong><br>glide3.7.0</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Glide</span>.</span></span><span class="keyword">with</span>(context)</span><br><span class="line">                .load(url)</span><br><span class="line">                .cross<span class="constructor">Fade(100)</span>  <span class="comment">//系统渐变动画</span></span><br><span class="line">                .placeholder(<span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>drawable.placeholder)</span><br><span class="line">                .fallback(<span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>drawable.fallback) </span><br><span class="line">                .disk<span class="constructor">CacheStrategy(DiskCacheStrategy.ALL)</span>  </span><br><span class="line">                .into(imageView);</span><br></pre></td></tr></table></figure><p>glide4.0</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">GlideApp</span>.</span></span><span class="keyword">with</span>(context)</span><br><span class="line">                .load(url)</span><br><span class="line">                .transition(<span class="module-access"><span class="module"><span class="identifier">DrawableTransitionOptions</span>.</span></span><span class="keyword">with</span><span class="constructor">CrossFade(100)</span>)<span class="comment">//淡入淡出100m</span></span><br><span class="line">                .placeholder(<span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>drawable.placeholder)</span><br><span class="line">                .fallback(<span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>drawable.fallback) </span><br><span class="line">                .disk<span class="constructor">CacheStrategy(DiskCacheStrategy.ALL)</span></span><br><span class="line">                .into(imageView);</span><br></pre></td></tr></table></figure><p><strong>5、磁盘缓存策略</strong><br>glide3.7.0</p><blockquote><p>DiskCacheStrategy 的枚举意义：<br>DiskCacheStrategy.NONE 什么都不缓存<br>DiskCacheStrategy.SOURCE 只缓存全尺寸图<br>DiskCacheStrategy.RESULT 只缓存最终的加载图<br>DiskCacheStrategy.ALL 缓存所有版本图（默认行为）</p></blockquote><p>glide4.0</p><blockquote><p>//DiskCacheStrategy.ALL 既缓存原始图片，也缓存转换过后的图片。<br>// DiskCacheStrategy.NONE 不缓存任何内容<br>// DiskCacheStrategy.DATA 在资源解码前就将原始数据写入磁盘缓存（即只缓存原始图片）<br>// DiskCacheStrategy.RESOURCE 在资源解码后将数据写入磁盘缓存，即经过缩放等转换后的图片资源（即只缓存转换过后的图片）。<br>// DiskCacheStrategy.AUTOMATIC 让Glide根据图片资源智能地选择使用哪一种缓存策略。<br>//（默认采用）DiskCacheStrategy.AUTOMATIC策略<br>/<em>——————————————————————————-</em>/<br>//源码 RequestOptions.java<br>private DiskCacheStrategy diskCacheStrategy = DiskCacheStrategy.AUTOMATIC;</p></blockquote><p><strong>6、占位符、错误图片设置</strong><br>glide4.0 若into中设置的是target，占位符（placeholder、error）需要在回调中再次设置，否则无效。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">loadImg</span>(String url, ImageView imageView) &#123;</span><br><span class="line">        <span class="comment">//into中用Target，占位符（placeholder、error）需要在回调中设置</span></span><br><span class="line">        <span class="selector-tag">GlideApp</span><span class="selector-class">.with</span>(FanhuanApplication.getInstance().getApplication())</span><br><span class="line">                <span class="selector-class">.asBitmap</span>()</span><br><span class="line">                <span class="selector-class">.load</span>(url)</span><br><span class="line">                <span class="selector-class">.placeholder</span>(drawbleId) <span class="comment">//设置资源加载过程中的占位符</span></span><br><span class="line">                <span class="selector-class">.fallback</span>(drawbleId)</span><br><span class="line">                <span class="selector-class">.error</span>(drawbleId)</span><br><span class="line">                <span class="selector-class">.diskCacheStrategy</span>(DiskCacheStrategy.ALL)</span><br><span class="line">                <span class="selector-class">.into</span>(new SimpleTarget&lt;Bitmap&gt;() &#123;</span><br><span class="line">                    <span class="variable">@Override</span></span><br><span class="line">                    public void onResourceReady(Bitmap resource, Transition&lt;? super Bitmap&gt; transition) &#123;</span><br><span class="line">                       <span class="selector-tag">imageView</span><span class="selector-class">.setImageBitmap</span>(resource);                    </span><br><span class="line">                 &#125;</span><br><span class="line"></span><br><span class="line">                    @<span class="selector-tag">Override</span></span><br><span class="line">                    <span class="selector-tag">public</span> <span class="selector-tag">void</span> <span class="selector-tag">onLoadFailed</span>(<span class="variable">@Nullable</span> Drawable errorDrawable) &#123;</span><br><span class="line">                        <span class="selector-tag">super</span><span class="selector-class">.onLoadFailed</span>(errorDrawable);</span><br><span class="line">                         <span class="selector-tag">if</span>(errorDrawable!=null)&#123;</span><br><span class="line">                            <span class="selector-tag">imageView</span><span class="selector-class">.setImageDrawable</span>(errorDrawable);</span><br><span class="line">                        &#125;                  </span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @<span class="selector-tag">Override</span></span><br><span class="line">                    <span class="selector-tag">public</span> <span class="selector-tag">void</span> <span class="selector-tag">onLoadStarted</span>(<span class="variable">@Nullable</span> Drawable placeholder) &#123;</span><br><span class="line">                        <span class="selector-tag">super</span><span class="selector-class">.onLoadStarted</span>(placeholder);</span><br><span class="line">                       <span class="selector-tag">if</span>(placeholder!=null)&#123;</span><br><span class="line">                            <span class="selector-tag">imageView</span><span class="selector-class">.setImageDrawable</span>(placeholder);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android Glide集成及使用注意事项——Glide 3.x</title>
      <link href="2020/10/23/Android-Glide%E9%9B%86%E6%88%90%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%E2%80%94%E2%80%94Glide-3-x/"/>
      <url>2020/10/23/Android-Glide%E9%9B%86%E6%88%90%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%E2%80%94%E2%80%94Glide-3-x/</url>
      
        <content type="html"><![CDATA[<h2 id="Glide-3-x集成及使用注意事项"><a href="#Glide-3-x集成及使用注意事项" class="headerlink" title="Glide 3.x集成及使用注意事项"></a>Glide 3.x集成及使用注意事项</h2><p><strong>前言</strong></p><p>更多用法请参考<a href="https://github.com/bumptech/glide/tree/v3.8.0">官方指南</a>了解使用。</p><p><strong>一、集成</strong></p><p><strong>1、project gradle</strong></p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">repositories</span> &#123;</span><br><span class="line">        <span class="function"><span class="title">mavenCentral</span>()</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>2、app gradle</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//g</span>lide</span><br><span class="line">   implementation <span class="string">&#x27;com.github.bumptech.glide:glide:3.8.0&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>3、混淆</strong></p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#glide</span></span><br><span class="line">-keep public <span class="class"><span class="keyword">class</span> * <span class="title">implements</span> <span class="title">com</span>.<span class="title">bumptech</span>.<span class="title">glide</span>.<span class="title">module</span>.<span class="title">GlideModule</span></span></span><br><span class="line">-keep public <span class="class"><span class="keyword">enum</span> <span class="title">com</span>.<span class="title">bumptech</span>.<span class="title">glide</span>.<span class="title">load</span>.<span class="title">resource</span>.<span class="title">bitmap</span>.<span class="title">ImageHeaderParser</span>$** &#123;</span></span><br><span class="line">    **[] $VALUES;</span><br><span class="line">    public *;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>二、使用及注意事项</strong></p><p><strong>1、基本方法</strong><br>多数情况下，使用Glide加载图片非常简单，一行代码足矣：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String url = <span class="string">&quot;http://www.technosamrat.com/wp-content/uploads/2012/02/Ocean-Wallpapers-Images1.jpg&quot;</span>;</span><br><span class="line">ImageView imageView = (ImageView) find<span class="constructor">ViewById(R.<span class="params">id</span>.<span class="params">imageView</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Glide</span>.</span></span><span class="keyword">with</span>(context)</span><br><span class="line">    .load(url)</span><br><span class="line">    .into(imageView);</span><br></pre></td></tr></table></figure><p>取消加载同样很简单：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Glide</span>.</span></span><span class="keyword">with</span>(context).clear(imageView);</span><br></pre></td></tr></table></figure><p>尽管及时取消不必要的加载是很好的实践，但这并不是必须的操作。实际上，当 Glide.with() 中传入的 Activity 或 Fragment 实例销毁时，Glide 会自动取消加载并回收资源。</p><p><strong>2、占位图设置</strong><br>Glide 也为我们提供这种方法 placeholder() 和 error()</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Glide</span>.</span></span><span class="keyword">with</span>(context)</span><br><span class="line">    .load(url)</span><br><span class="line">    .placeholder(<span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>drawable.place_image)<span class="comment">//图片加载出来前，显示的图片</span></span><br><span class="line">    .error(<span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>drawable.error_image)<span class="comment">//图片加载失败后，显示的图片</span></span><br><span class="line">    .into(imageView);</span><br></pre></td></tr></table></figure><p><strong>3、缩略图</strong><br>Glide 的缩略图功能和占位图略有不同，占位图必须使用资源文件才行，而缩略图是动态的占位图可以从网络中加载。缩略图会在世纪请求加载完成或者处理完之后才显示。在原始图片到达之后，缩略图不会取代原始图片，只会被抹除。</p><p>Glide 为缩略图提供了2种不同的加载方式，比较简单的方式是调用 <strong>thumbnail()</strong> 方法，参数是 <strong>float 类型</strong>，作为其倍数大小。例如，你传入 0.2f 作为参数，Glide 将会显示原始图片的20%的大小，如果原图是 1000x1000 的尺寸，那么缩略图将会是 200x200 的尺寸。为缩略图明显比原图小得多，所以我们需要确保 ImageView 的 ScaleType 设置的正确。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Glide</span><span class="selector-class">.with</span>( <span class="selector-tag">context</span> )</span><br><span class="line">    <span class="selector-class">.load</span>( <span class="selector-tag">url</span> )</span><br><span class="line">    <span class="selector-class">.thumbnail</span>( 0<span class="selector-class">.2f</span> )</span><br><span class="line">    <span class="selector-class">.into</span>( <span class="selector-tag">imageView</span> );</span><br></pre></td></tr></table></figure><p>与上面这种方式不同的是，这里的第一个缩略图请求是完全独立于第二个原始请求的。该缩略图可以是不同的资源图片，同时也可以对缩略图做不同的转换等等</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> void load<span class="constructor">ImageThumbnailRequest()</span>&#123;</span><br><span class="line">    <span class="comment">// setup Glide request without the into() method</span></span><br><span class="line">    DrawableRequestBuilder&lt;String&gt; thumbnailRequest = <span class="module-access"><span class="module"><span class="identifier">Glide</span>.</span></span><span class="keyword">with</span>( context ).load( url );</span><br><span class="line">    <span class="comment">// pass the request as a a parameter to the thumbnail request</span></span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">Glide</span>.</span></span><span class="keyword">with</span>( context )</span><br><span class="line">        .load( url )</span><br><span class="line">        .thumbnail( thumbnailRequest )</span><br><span class="line">        .into( imageView );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4、动画开关</strong><br>动画效果可以让图片加载变得更加的平滑，crossFade() 方法强制开启 Glide 默认的图片淡出淡入动画，当前版本3.7.0是默认开启的。crossFade() 还有一个重载方法 crossFade(int duration)。可以控制动画的持续时间，单位ms。动画默认的持续时间是300ms。既然可以添加动画，那肯定就可以设置没有任何淡出淡入效果，调用 dontAnimate()</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Glide</span>.</span></span><span class="keyword">with</span>(context)</span><br><span class="line">    .load(url)</span><br><span class="line">    .cross<span class="constructor">Fade()</span><span class="comment">//或者使用 dontAnimate() 关闭动画</span></span><br><span class="line">    .placeholder(<span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>drawable.place_image)</span><br><span class="line">    .error(<span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>drawable.error_image)</span><br><span class="line">    .into(imageView);</span><br></pre></td></tr></table></figure><p><strong>5、图片大小与裁剪</strong><br>使用 override(width,height) 方法，在图片显示到 ImageView 之前，重新改变图片大小。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Glide</span><span class="selector-class">.with</span>(context)</span><br><span class="line">    <span class="selector-class">.load</span>(url)</span><br><span class="line">    <span class="selector-class">.override</span>(width,height)<span class="comment">//这里的单位是px</span></span><br><span class="line">    <span class="selector-class">.into</span>(imageView);</span><br></pre></td></tr></table></figure><p><strong>6、图片的缓存处理</strong><br>为了更快的加载图片，Glide默认帮我们开启了<strong>内存缓存</strong>和<strong>磁盘缓存</strong>。<br><strong>（1）内存缓存</strong></p><blockquote><p>内存缓存是 Glide 默认开启的，可以调用 skipMemoryCache(true) 告诉 Glide 跳过内存缓存。</p></blockquote><p><strong>（2）磁盘缓存</strong></p><blockquote><p>磁盘缓存是 Glide 默认开启的，可以调用 .diskCacheStrategy( DiskCacheStrategy.NONE )告诉 Glide 跳过磁盘缓存。</p></blockquote><p>例子如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Glide</span><span class="selector-class">.with</span>(<span class="selector-tag">context</span>)</span><br><span class="line">    <span class="selector-class">.load</span>(<span class="selector-tag">url</span>)</span><br><span class="line">    <span class="selector-class">.skipMemoryCache</span>(<span class="selector-tag">true</span>)</span><br><span class="line">    <span class="selector-class">.diskCacheStrategy</span>( <span class="selector-tag">DiskCacheStrategy</span><span class="selector-class">.NONE</span> )</span><br><span class="line">    <span class="selector-class">.into</span>(<span class="selector-tag">imageView</span>);</span><br></pre></td></tr></table></figure><p><strong>（3）自定义磁盘缓存</strong></p><blockquote><p>DiskCacheStrategy 的枚举意义：<br>DiskCacheStrategy.NONE        什么都不缓存<br>DiskCacheStrategy.SOURCE   只缓存全尺寸图<br>DiskCacheStrategy.RESULT    只缓存最终的加载图<br>DiskCacheStrategy.ALL           缓存所有版本图（默认行为）</p></blockquote><p>例子如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Glide</span><span class="selector-class">.with</span>(<span class="selector-tag">context</span>)</span><br><span class="line">    <span class="selector-class">.load</span>(<span class="selector-tag">url</span>)</span><br><span class="line">    <span class="selector-class">.diskCacheStrategy</span>( <span class="selector-tag">DiskCacheStrategy</span><span class="selector-class">.SOURCE</span> )</span><br><span class="line">    <span class="selector-class">.into</span>(<span class="selector-tag">imageView</span>);</span><br></pre></td></tr></table></figure><p><strong>7、显示 Gif 和 Video</strong><br>显示 GIf 对于 Glide 来说一个比较特别的功能（ Picasso 暂时还不行）而且使用起来非常简单。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Glide</span><span class="selector-class">.with</span>( <span class="selector-tag">context</span> )</span><br><span class="line">    <span class="selector-class">.load</span>( <span class="selector-tag">gifUrl</span> )</span><br><span class="line">    <span class="selector-class">.placeholder</span>（ <span class="selector-tag">R</span><span class="selector-class">.drawable</span><span class="selector-class">.default</span> ）</span><br><span class="line">    <span class="selector-class">.error</span>( <span class="selector-tag">R</span><span class="selector-class">.drawable</span><span class="selector-class">.error</span> )</span><br><span class="line">    <span class="selector-class">.into</span>( <span class="selector-tag">imageView</span> );</span><br></pre></td></tr></table></figure><p>这段代码还有点问题，如果加载的不是一张 gif 图的话，是没有办法显示的。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Glide</span><span class="selector-class">.with</span>( <span class="selector-tag">context</span> )</span><br><span class="line">    <span class="selector-class">.load</span>( <span class="selector-tag">gifUrl</span> )</span><br><span class="line">    <span class="selector-class">.asGif</span>()</span><br><span class="line">    <span class="selector-class">.error</span>( <span class="selector-tag">R</span><span class="selector-class">.drawable</span><span class="selector-class">.error</span> )</span><br><span class="line">    <span class="selector-class">.into</span>( <span class="selector-tag">imageView</span> );</span><br></pre></td></tr></table></figure><p>做以上修改，如果图片类型不是 Gif 图的话就会当作 load 失败来处理，因此 error() 会被回调。即使这个url的图片是好的，也是不会显示的。当然，如果你想显示 Gif 但只是向现实静态的图片你就可以这么做</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Glide</span><span class="selector-class">.with</span>( <span class="selector-tag">context</span> )</span><br><span class="line">    <span class="selector-class">.load</span>( <span class="selector-tag">gifUrl</span> )</span><br><span class="line">    <span class="selector-class">.asBitmap</span>()</span><br><span class="line">    <span class="selector-class">.error</span>( <span class="selector-tag">R</span><span class="selector-class">.drawable</span><span class="selector-class">.error</span> )</span><br><span class="line">    <span class="selector-class">.into</span>( <span class="selector-tag">imageView</span> );</span><br></pre></td></tr></table></figure><p>仅仅是显示 Gif 的第一帧图像，这样就可以保证图片的正常显示了。</p><p>最后的小惊喜，Glide 还能显示视频，但是只能够显示手机本地的视频，要是向现实网络上的视频的话，还是另寻他法吧！</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String filePath = <span class="string">&quot;/storrage/emulated/0/Pictures/video.mp4&quot;</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Glide</span>.</span></span><span class="keyword">with</span>( context )</span><br><span class="line">    .load( <span class="module-access"><span class="module"><span class="identifier">Uri</span>.</span></span>from<span class="constructor">File( <span class="params">new</span> File( <span class="params">filePath</span> )</span> ) )</span><br><span class="line">    .into( imageView );</span><br></pre></td></tr></table></figure><p>以上就是Glide的基本用法了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>代码对比工具「for Mac」</title>
      <link href="2020/10/23/%E4%BB%A3%E7%A0%81%E5%AF%B9%E6%AF%94%E5%B7%A5%E5%85%B7%E3%80%8Cfor-Mac%E3%80%8D/"/>
      <url>2020/10/23/%E4%BB%A3%E7%A0%81%E5%AF%B9%E6%AF%94%E5%B7%A5%E5%85%B7%E3%80%8Cfor-Mac%E3%80%8D/</url>
      
        <content type="html"><![CDATA[<p><strong>代码对比工具</strong></p><p>链接: <a href="https://pan.baidu.com/s/1rFeRV_r4FJhhJpeN5X0ojw">https://pan.baidu.com/s/1rFeRV_r4FJhhJpeN5X0ojw</a><br>密码: vgnp</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android dialog属性——点击「屏幕」或者「返回键」不消失</title>
      <link href="2020/10/23/Android-dialog%E5%B1%9E%E6%80%A7%E2%80%94%E2%80%94%E7%82%B9%E5%87%BB%E3%80%8C%E5%B1%8F%E5%B9%95%E3%80%8D%E6%88%96%E8%80%85%E3%80%8C%E8%BF%94%E5%9B%9E%E9%94%AE%E3%80%8D%E4%B8%8D%E6%B6%88%E5%A4%B1/"/>
      <url>2020/10/23/Android-dialog%E5%B1%9E%E6%80%A7%E2%80%94%E2%80%94%E7%82%B9%E5%87%BB%E3%80%8C%E5%B1%8F%E5%B9%95%E3%80%8D%E6%88%96%E8%80%85%E3%80%8C%E8%BF%94%E5%9B%9E%E9%94%AE%E3%80%8D%E4%B8%8D%E6%B6%88%E5%A4%B1/</url>
      
        <content type="html"><![CDATA[<p><strong>Dialog属性设置</strong></p><p>在dialog.show();之前加：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dialog.set<span class="constructor">CanceledOnTouchOutside(<span class="params">false</span>)</span>;<span class="comment">//点击屏幕 dialog不消失</span></span><br><span class="line">dialog.set<span class="constructor">Cancelable(<span class="params">false</span>)</span>;<span class="comment">//点击屏幕或返回按钮 dialog不消失  </span></span><br></pre></td></tr></table></figure><hr><p><strong>屏蔽返回键,按返回键时不销毁当前activity</strong></p><p>重写onKeyDown方法</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onKeyDown</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (keyCode == KeyEvent.KEYCODE_BACK) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;<span class="comment">//返回false进行拦截点击事件</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onKeyDown</span><span class="params">(keyCode, event)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android productFlavors的用法之——gradle 配置productFlavors &amp;子模块配置productFlavors</title>
      <link href="2020/10/23/Android-productFlavors%E7%9A%84%E7%94%A8%E6%B3%95%E4%B9%8B%E2%80%94%E2%80%94gradle-%E9%85%8D%E7%BD%AEproductFlavors-%E5%AD%90%E6%A8%A1%E5%9D%97%E9%85%8D%E7%BD%AEproductFlavors/"/>
      <url>2020/10/23/Android-productFlavors%E7%9A%84%E7%94%A8%E6%B3%95%E4%B9%8B%E2%80%94%E2%80%94gradle-%E9%85%8D%E7%BD%AEproductFlavors-%E5%AD%90%E6%A8%A1%E5%9D%97%E9%85%8D%E7%BD%AEproductFlavors/</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、什么时候用到在子模块配置productFlavors</span><br><span class="line">当子模块需要「配置不同信息」时，可以使用。</span><br><span class="line">比如：</span><br><span class="line">（<span class="number">1</span>）子模块在不同开发环境（uat、sit）使用不同的请求地址url，可以配置productFlavors用来区分调用即可；</span><br><span class="line">（<span class="number">2</span>）当使用模块化开发时，可以专门抽出一个子模块配置productFlavors，这样其他模块只需要依赖该子模块，就可以全局使用子模块的配置信息；</span><br><span class="line"><span class="number">2</span>、备注：「子模块配置样式」与「主模块配置样式」应保持一致；</span><br></pre></td></tr></table></figure><p><strong>配置</strong><br><strong>1、主模块配置productFlavors</strong></p><p>app/build.gradle</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  ...</span><br><span class="line">    flavorDimensions <span class="string">&#x27;default&#x27;</span> <span class="regexp">//</span> 定义必要的配置 否则会报错</span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        dev &#123; </span><br><span class="line">            dimension = <span class="string">&#x27;default&#x27;</span></span><br><span class="line">             <span class="regexp">//</span> 定义不同的包名</span><br><span class="line">            applicationId = <span class="string">&quot;com.test.demo1&quot;</span></span><br><span class="line">            <span class="regexp">//</span> 自定义buildConfig.java中的变量供代码中使用</span><br><span class="line">            buildConfigField <span class="string">&quot;String&quot;</span>, <span class="string">&quot;APPID_BUGLY&quot;</span>, <span class="string">&#x27;&quot;12345&quot;&#x27;</span> </span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sit &#123;</span><br><span class="line">            dimension = <span class="string">&#x27;default&#x27;</span></span><br><span class="line">            applicationId = <span class="string">&quot;com.test.demo2&quot;</span></span><br><span class="line">            buildConfigField <span class="string">&quot;String&quot;</span>, <span class="string">&quot;APPID_BUGLY&quot;</span>, <span class="string">&#x27;&quot;67890&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、子模块配置productFlavors</strong></p><p>module/build.gradle</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">...</span><br><span class="line">    publishNonDefault true</span><br><span class="line">    flavorDimensions &#x27;default&#x27;</span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        dev &#123;</span><br><span class="line">            dimension = &#x27;default&#x27;</span><br><span class="line">            <span class="comment">// 自定义buildConfig.java中的变量供代码中使用</span></span><br><span class="line">            buildConfigField <span class="string">&quot;String&quot;</span>, <span class="string">&quot;BASE_URL&quot;</span>, &#x27;&quot;http://158.223.12.22:<span class="number">8080</span>&quot;&#x27;</span><br><span class="line">            buildConfigField <span class="string">&quot;String&quot;</span>, <span class="string">&quot;RESOURCE_URL&quot;</span>, &#x27;&quot;http://158.223.12.22:<span class="number">8080</span>&quot;&#x27;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sit &#123;</span><br><span class="line">            dimension = &#x27;default&#x27;</span><br><span class="line">            <span class="comment">// 自定义buildConfig.java中的变量供代码中使用</span></span><br><span class="line">            buildConfigField <span class="string">&quot;String&quot;</span>, <span class="string">&quot;BASE_URL&quot;</span>, &#x27;&quot;http://158.223.12.11:<span class="number">9090</span>&quot;&#x27;</span><br><span class="line">            buildConfigField <span class="string">&quot;String&quot;</span>, <span class="string">&quot;RESOURCE_URL&quot;</span>, &#x27;&quot;http://158.223.12.11:<span class="number">9090</span>&quot;&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需要其他模块依赖该子模块，就可以全局使用该子模块的配置信息。<br>所以可以抽出一个「公共子模块」专门用来做「配置信息」使用。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android时间获取之——Date、String、Long三种日期类型之间的相互转换</title>
      <link href="2020/10/23/Android%E6%97%B6%E9%97%B4%E8%8E%B7%E5%8F%96%E4%B9%8B%E2%80%94%E2%80%94Date%E3%80%81String%E3%80%81Long%E4%B8%89%E7%A7%8D%E6%97%A5%E6%9C%9F%E7%B1%BB%E5%9E%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/"/>
      <url>2020/10/23/Android%E6%97%B6%E9%97%B4%E8%8E%B7%E5%8F%96%E4%B9%8B%E2%80%94%E2%80%94Date%E3%80%81String%E3%80%81Long%E4%B8%89%E7%A7%8D%E6%97%A5%E6%9C%9F%E7%B1%BB%E5%9E%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p><strong>date类型转换为String类型</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// formatType 格式为yyyy-MM-dd HH:mm:ss//yyyy年MM月dd日 HH时mm分ss秒//或者自定义格式</span></span><br><span class="line">   <span class="comment">// data Date类型的时间</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">String</span> <span class="function"><span class="title">dateToString</span>(<span class="params"><span class="built_in">Date</span> data, <span class="built_in">String</span> formatType</span>)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(formatType).format(data);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>string类型转换为date类型</strong></p><p> 注：<em>strTime的时间格式必须要与formatType的时间格式相同</em></p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// strTime 要转换的string类型的时间，</span></span><br><span class="line"><span class="comment">// formatType 要转换的格式yyyy-MM-dd HH:mm:ss//yyyy年MM月dd日HH时mm分ss秒，</span></span><br><span class="line">   <span class="comment">// strTime的时间格式必须要与formatType的时间格式相同</span></span><br><span class="line">   <span class="keyword">public</span> static <span class="built_in">Date</span> stringToDate(<span class="built_in">String</span> strTime, <span class="built_in">String</span> formatType)</span><br><span class="line">           throws ParseException &#123;</span><br><span class="line">       SimpleDateFormat formatter = <span class="literal">new</span> SimpleDateFormat(formatType);</span><br><span class="line">       <span class="built_in">Date</span> <span class="built_in">date</span> = <span class="built_in">null</span>;</span><br><span class="line">       <span class="built_in">date</span> = formatter.parse(strTime);</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">date</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>long转换为Date类型</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// currentTime 要转换的long类型的时间</span></span><br><span class="line"><span class="comment">// formatType 要转换的时间格式yyyy-MM-dd HH:mm:ss//yyyy年MM月dd日 HH时mm分ss秒</span></span><br><span class="line">public static Date long<span class="constructor">ToDate(<span class="params">long</span> <span class="params">currentTime</span>, String <span class="params">formatType</span>)</span></span><br><span class="line"> throws ParseException &#123;</span><br><span class="line">Date dateOld = <span class="keyword">new</span> <span class="constructor">Date(<span class="params">currentTime</span>)</span>; <span class="comment">// 根据long类型的毫秒数生命一个date类型的时间</span></span><br><span class="line">String sDateTime = date<span class="constructor">ToString(<span class="params">dateOld</span>, <span class="params">formatType</span>)</span>; <span class="comment">// 把date类型的时间转换为string</span></span><br><span class="line">Date date = <span class="built_in">string</span><span class="constructor">ToDate(<span class="params">sDateTime</span>, <span class="params">formatType</span>)</span>; <span class="comment">// 把String类型转换为Date类型 </span></span><br><span class="line">return date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>date类型转换为long类型</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// date 要转换的date类型的时间</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">long</span> <span class="title">dateToLong</span>(<span class="params">Date date</span>)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> date.getTime();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>long类型转换为String类型</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// currentTime 要转换的long类型的时间</span></span><br><span class="line">   <span class="comment">// formatType 要转换的string类型的时间格式</span></span><br><span class="line">   public static String long<span class="constructor">ToString(<span class="params">long</span> <span class="params">currentTime</span>, String <span class="params">formatType</span>)</span></span><br><span class="line">           throws ParseException &#123;</span><br><span class="line">       Date date = long<span class="constructor">ToDate(<span class="params">currentTime</span>, <span class="params">formatType</span>)</span>; <span class="comment">// long类型转成Date类型</span></span><br><span class="line">       String strTime = date<span class="constructor">ToString(<span class="params">date</span>, <span class="params">formatType</span>)</span>; <span class="comment">// date类型转成String</span></span><br><span class="line">       return strTime;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>String类型转换为long类型</strong><br>注：<em>strTime的时间格式和formatType的时间格式必须相同</em></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// strTime 要转换的String类型的时间</span></span><br><span class="line">   <span class="comment">// formatType 时间格式</span></span><br><span class="line">   <span class="comment">// strTime的时间格式和formatType的时间格式必须相同</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">long</span> stringToLong(String strTime, String formatType)</span><br><span class="line">           throws ParseException &#123;</span><br><span class="line">       Date <span class="built_in">date</span> = stringToDate(strTime, formatType); <span class="comment">// String类型转成date类型</span></span><br><span class="line">       <span class="keyword">if</span> (<span class="built_in">date</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="built_in">long</span> currentTime = dateToLong(<span class="built_in">date</span>); <span class="comment">// date类型转成long类型</span></span><br><span class="line">           <span class="keyword">return</span> currentTime;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android项目多渠道打包之——productFlavors的用法</title>
      <link href="2020/10/23/Android%E9%A1%B9%E7%9B%AE%E5%A4%9A%E6%B8%A0%E9%81%93%E6%89%93%E5%8C%85%E4%B9%8B%E2%80%94%E2%80%94productFlavors%E7%9A%84%E7%94%A8%E6%B3%95/"/>
      <url>2020/10/23/Android%E9%A1%B9%E7%9B%AE%E5%A4%9A%E6%B8%A0%E9%81%93%E6%89%93%E5%8C%85%E4%B9%8B%E2%80%94%E2%80%94productFlavors%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="productFlavors的用处"><a href="#productFlavors的用处" class="headerlink" title="productFlavors的用处"></a>productFlavors的用处</h2><ul><li>创建不同的产品并为不同产品分配专有属性</li><li>配置不同的环境并为不同环境配置专有信息（sit、uat、pro…）</li></ul><p><strong>一、创建不同的「产品风味」，并为不同产品分配「专有属性」</strong></p><p>在app:级别下的gradle文件中，加入productFlavors,并在productFlavors下创建产品A与B</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">productFlavors &#123;</span><br><span class="line">    <span class="regexp">//</span>新建产品A</span><br><span class="line">    A &#123;</span><br><span class="line">        <span class="regexp">//</span>程序包名</span><br><span class="line">        applicationId <span class="string">&quot;com.wmj.a&quot;</span></span><br><span class="line">        <span class="regexp">//</span>不同渠道号</span><br><span class="line">        manifestPlaceholders = [UMC:<span class="string">&quot;product-Complete&quot;</span>]</span><br><span class="line">        <span class="regexp">//</span>versionName</span><br><span class="line">        versionName <span class="string">&quot;1.0.0&quot;</span></span><br><span class="line">        <span class="regexp">//</span>versionCode</span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 自定义buildConfig.java中的变量供代码中使用</span><br><span class="line">        buildConfigField(<span class="string">&quot;String&quot;</span>, <span class="string">&quot;APPID&quot;</span>, <span class="string">&quot;\&quot;111111\&quot;&quot;</span>)</span><br><span class="line">        buildConfigField(<span class="string">&quot;int&quot;</span>, <span class="string">&quot;TYPE&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="regexp">//</span>新建产品B</span><br><span class="line">    B &#123;</span><br><span class="line">        <span class="regexp">//</span>程序包名</span><br><span class="line">        applicationId <span class="string">&quot;com.wmj.b&quot;</span></span><br><span class="line">        <span class="regexp">//</span>不同渠道号</span><br><span class="line">        manifestPlaceholders = [UMC:<span class="string">&quot;product-Temp&quot;</span>]</span><br><span class="line">        <span class="regexp">//</span>versionName</span><br><span class="line">        versionName <span class="string">&quot;2.1.1&quot;</span></span><br><span class="line">        <span class="regexp">//</span>versionCode</span><br><span class="line">        versionCode <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 自定义buildConfig.java中的变量供代码中使用</span><br><span class="line">        buildConfigField (<span class="string">&quot;String&quot;</span>, <span class="string">&quot;APPID&quot;</span>, <span class="string">&quot;\&quot;222222\&quot;&quot;</span>)</span><br><span class="line">        buildConfigField(<span class="string">&quot;int&quot;</span>, <span class="string">&quot;TYPE&quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这样，就可以区分A和B两个不同的产品了。A和B分别有自己不同的包名、渠道号、版本号等属性；当然，如果你想区分他们的其他属性比如不同的应用名、应用图标icon、引用不同代码资源、图片资源等等也是可以的；<br>先在src目录下简历对应的文件夹，比如java代码则建立，product/java,res文件夹则建立product/res</p><p><strong>二、配置不同的「开发环境」，并为不同环境配置「专有信息」</strong><br>有时候我们开发一个产品，需要经过开发环境、测试环境、生产环境等不同环境的测试才能正式发布；而不同的环境可能有不同的服务请求地址、不同的资源地址等等，这时候productFlavors就可以大显身手了。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flavorDimensions</span> <span class="string">&#x27;default&#x27;</span></span><br><span class="line">   productFlavors &#123;</span><br><span class="line">       <span class="section">sit</span> &#123;</span><br><span class="line">           <span class="attribute">dimension</span> = <span class="string">&#x27;default&#x27;</span></span><br><span class="line">           //自定义变量，如：配置sit环境的请求地址，不同环境的请求地址各不相同</span><br><span class="line">           buildConfigField <span class="string">&quot;String&quot;</span>, <span class="string">&quot;BASE_URL&quot;</span>, <span class="string">&#x27;&quot;http://123.123.123:8080&quot;&#x27;</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       uat &#123;</span><br><span class="line">           <span class="attribute">dimension</span> = <span class="string">&#x27;default&#x27;</span></span><br><span class="line">           buildConfigField <span class="string">&quot;String&quot;</span>, <span class="string">&quot;BASE_URL&quot;</span>, <span class="string">&#x27;&quot;http://124.124.124:8081&quot;&#x27;</span></span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">pro &#123;</span><br><span class="line">           <span class="attribute">dimension</span> = <span class="string">&#x27;default&#x27;</span></span><br><span class="line">           buildConfigField <span class="string">&quot;String&quot;</span>, <span class="string">&quot;BASE_URL&quot;</span>, <span class="string">&#x27;&quot;http://125.125.125:8083&quot;&#x27;</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>如上，配置了sit、uat、pro三个不同的环境，分别配有不同的服务请求地址，这样就不用每次打不同环境的apk时手动去修改配置文件了。</p><hr><p>当然，上面两种使用方式也可以配合一起使用啊！<br>就可以组合出不同产品在不同环境的apk了。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">flavorDimensions(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;build&quot;</span>)</span><br><span class="line">    productFlavors &#123;</span><br><span class="line">    </span><br><span class="line"><span class="regexp">//</span>产品A</span><br><span class="line">        A &#123;</span><br><span class="line">            dimension <span class="string">&quot;name&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="regexp">//</span>产品B</span><br><span class="line">B &#123;</span><br><span class="line">            dimension <span class="string">&quot;name&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>sit环境配置</span><br><span class="line">        sit &#123;</span><br><span class="line">            dimension = <span class="string">&#x27;build&#x27;</span></span><br><span class="line">            <span class="regexp">//</span>自定义变量，如：配置sit环境的请求地址，不同环境的请求地址各不相同</span><br><span class="line">            buildConfigField <span class="string">&quot;String&quot;</span>, <span class="string">&quot;BASE_URL&quot;</span>, <span class="string">&#x27;&quot;http://123.123.123:8080&quot;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//u</span>at环境配置</span><br><span class="line">        uat &#123;</span><br><span class="line">            dimension = <span class="string">&#x27;build&#x27;</span></span><br><span class="line">            buildConfigField <span class="string">&quot;String&quot;</span>, <span class="string">&quot;BASE_URL&quot;</span>, <span class="string">&#x27;&quot;http://124.124.124:8081&quot;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>pro环境配置</span><br><span class="line">       pro &#123;</span><br><span class="line">            dimension = <span class="string">&#x27;build&#x27;</span></span><br><span class="line">            buildConfigField <span class="string">&quot;String&quot;</span>, <span class="string">&quot;BASE_URL&quot;</span>, <span class="string">&#x27;&quot;http://125.125.125:8083&quot;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>构建变体：[A, B] [sit, uat, pro] [Debug, Release] 到时这样组合就可以构建12个变体了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android代码混淆之——依赖库Library中混淆配置方法</title>
      <link href="2020/10/23/Android%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86%E4%B9%8B%E2%80%94%E2%80%94%E4%BE%9D%E8%B5%96%E5%BA%93Library%E4%B8%AD%E6%B7%B7%E6%B7%86%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/"/>
      <url>2020/10/23/Android%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86%E4%B9%8B%E2%80%94%E2%80%94%E4%BE%9D%E8%B5%96%E5%BA%93Library%E4%B8%AD%E6%B7%B7%E6%B7%86%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li><p>我们自己新建一个Library给主工程引用；</p></li><li><p>引入三方Library给项目主工程引用；</p><p>这种情况下，一般我们需要对Library中的代码配置一些混淆规则，以免打混淆包某些方法不生效而无法使用。</p></li></ul><h2 id="一、在app模块写混淆规则（不建议使用）"><a href="#一、在app模块写混淆规则（不建议使用）" class="headerlink" title="一、在app模块写混淆规则（不建议使用）"></a>一、在app模块写混淆规则（不建议使用）</h2><p>这种形式比较简单无脑，全部的混淆规则都写在了app模块里面，如果app模块依赖很多个Library模块那么app模块中的混淆规则将会非常的庞大，不利于代码的维护。</p><p>使用app模块编写所有混淆命令是<strong>基于Library模块当中不再编写混淆命令</strong>为前提。<br>也就是Library模块中minifyEnabled都是false，如果强行将Library模块的minifyEnabled设置为true，那么程序将很大概率会崩溃掉，<strong>因为Library模块开启minifyEnabled后，app模块的混淆规则将无法作用到Library模块上，导致Library模块不该混淆的代码被混淆从而导致崩溃。</strong></p><p>Library模块中minifyEnabled设置为false就会保证app模块的混淆规则作用到Library模块上，这也是Library模块中minifyEnabled设置为true还是false对组件化开发影响比较大的一个地方。</p><h2 id="二、在各自Library模块写混淆规则（推荐做法）"><a href="#二、在各自Library模块写混淆规则（推荐做法）" class="headerlink" title="二、在各自Library模块写混淆规则（推荐做法）"></a>二、在各自Library模块写混淆规则（推荐做法）</h2><p>这是<strong>组件化/模块化</strong>开发最推荐的做法，最大的优点就是不用在app模块写上大量的混淆规则，只需要在相应模块写各自的混淆，方便混淆的维护。</p><p>在各自模块中配置混淆方法如下：</p><p><strong>方式一：精简模式</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">release</span> &#123;</span><br><span class="line">            <span class="attribute">consumerProguardFiles</span> <span class="string">&#x27;proguard-rules.pro&#x27;</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>只需要配置一行代码即可，proguard-rules.pro就是该模块特定的混淆规则，使用这种配置最大的一个好处就是Library模块的是否混淆完全由app模块来决定；<br><strong>这种配置有一个非常重要的关键点</strong>：就是不能设置minifyEnabled true，因为设置为true之后，Library模块是否混淆的控制权将只能由该模块自身决定，app模块将无法控制Library模块的混淆与否。</p><p><strong>方式二：常用模式</strong><br>第一步：开启混淆开关</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">buildTypes</span> &#123;</span><br><span class="line">     <span class="section">release</span> &#123;</span><br><span class="line">         <span class="attribute">minifyEnabled</span> <span class="literal">true</span></span><br><span class="line">         proguardFiles getDefaultProguardFile(<span class="string">&#x27;proguard-android.txt&#x27;</span>), <span class="string">&#x27;proguard-rules.pro&#x27;</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>第二步：配置gradle</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">defaultConfig</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="attr">minSdkVersion</span> <span class="string">22</span></span><br><span class="line">      <span class="attr">targetSdkVersion</span> <span class="string">28</span></span><br><span class="line">      <span class="attr">versionCode</span> <span class="string">1</span></span><br><span class="line">      <span class="attr">versionName</span> <span class="string">&quot;1.0&quot;</span></span><br><span class="line">      <span class="attr">testInstrumentationRunner</span> <span class="string">&quot;android.support.test.runner.AndroidJUnitRunner&quot;</span></span><br><span class="line">     </span><br><span class="line">      <span class="meta">//</span> <span class="string">配置此参数，方可生成混淆文件</span></span><br><span class="line">      <span class="attr">consumerProguardFiles</span> <span class="string">&quot;consumer-rules.pro&quot;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><p><img  src="https://img-blog.csdnimg.cn/20200814205443516.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br><img  src="https://img-blog.csdnimg.cn/20200814205840276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center"  ><span class="image-caption">在这里插入图片描述</span></p><p>细心的朋友可以发现，第1步开启混淆开关配置的是proguard-rules.pro文件，而第2步配置的consumer-rules.pro文件；同时在我们Library目录下这两个混淆文件都存在。<br>那这两文件又有什么区别呢？<br>proguard-rules.pro文件是给Library模块自己使用的混淆规则；<br>consumer-rules.pro文件则是会合并到app的混淆规则中，是给包括app在内的其他模块调用时使用的混淆规则；</p><p>而这两个文件，完全可以使用同一个文件进行配置；当需要进行区分时，可以使用两个不同的文件进行配置；根据项目需求选择所需即可。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows 10 自带输入法微软拼音「简体」「繁体」切换快捷键</title>
      <link href="2020/10/23/Windows-10-%E8%87%AA%E5%B8%A6%E8%BE%93%E5%85%A5%E6%B3%95%E5%BE%AE%E8%BD%AF%E6%8B%BC%E9%9F%B3%E3%80%8C%E7%AE%80%E4%BD%93%E3%80%8D%E3%80%8C%E7%B9%81%E4%BD%93%E3%80%8D%E5%88%87%E6%8D%A2%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>2020/10/23/Windows-10-%E8%87%AA%E5%B8%A6%E8%BE%93%E5%85%A5%E6%B3%95%E5%BE%AE%E8%BD%AF%E6%8B%BC%E9%9F%B3%E3%80%8C%E7%AE%80%E4%BD%93%E3%80%8D%E3%80%8C%E7%B9%81%E4%BD%93%E3%80%8D%E5%88%87%E6%8D%A2%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<p>快捷键：Ctrl + Shift + F</p><p>经常无缘无故的不知道点击了什么导致输入法变成繁体，关键是不太记事每次都要查询一番，还是记下来吧。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android Studio常用快捷键(Mac)</title>
      <link href="2020/10/23/Android-Studio%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE-Mac/"/>
      <url>2020/10/23/Android-Studio%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE-Mac/</url>
      
        <content type="html"><![CDATA[<p><strong>搜索查看类</strong></p><p><img  src="https://img-blog.csdnimg.cn/20200811193746527.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span><br><strong>编辑类<br>编辑</strong><br><img  src="https://img-blog.csdnimg.cn/20200811193827729.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span><br><strong>生成</strong><br><img  src="https://img-blog.csdnimg.cn/20200811193921788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span><br>自动补全<br><img  src="https://img-blog.csdnimg.cn/20200811193920946.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span><br><strong>重构</strong><br><img  src="https://img-blog.csdnimg.cn/2020081119431894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><p><strong>选择, 移动</strong><br><img  src="https://img-blog.csdnimg.cn/20200811194336878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><p><strong>格式化</strong><br><img  src="https://img-blog.csdnimg.cn/20200811194347352.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><p><strong>注释</strong><br><img  src="https://img-blog.csdnimg.cn/2020081119435979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><p><strong>运行调试类</strong><br><img  src="https://img-blog.csdnimg.cn/2020081119441030.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><p><strong>测试类</strong><br><img  src="https://img-blog.csdnimg.cn/20200811194419754.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><p><strong>版本控制类</strong><br><img  src="https://img-blog.csdnimg.cn/2020081119442948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><p><strong>窗口类</strong><br><img  src="https://img-blog.csdnimg.cn/20200811194442286.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>手机Web前端调试页面之——设置debug开关方式</title>
      <link href="2020/10/23/%E6%89%8B%E6%9C%BAWeb%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E9%A1%B5%E9%9D%A2%E4%B9%8B%E2%80%94%E2%80%94%E8%AE%BE%E7%BD%AEdebug%E5%BC%80%E5%85%B3%E6%96%B9%E5%BC%8F/"/>
      <url>2020/10/23/%E6%89%8B%E6%9C%BAWeb%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E9%A1%B5%E9%9D%A2%E4%B9%8B%E2%80%94%E2%80%94%E8%AE%BE%E7%BD%AEdebug%E5%BC%80%E5%85%B3%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="条件："><a href="#条件：" class="headerlink" title="条件："></a>条件：</h2><p>android4.4+</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在APP中启用 WebView 调试，开启调试后，Chrome DevTools才能对WebView进行远程调试</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">WebView</span>.</span></span>set<span class="constructor">WebContentsDebuggingEnabled(<span class="params">true</span>)</span>;</span><br></pre></td></tr></table></figure><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p><strong>1.测试包</strong><br>如果团队中有Android开发人员能够提供测试包，只要在测试包中开启Webview的debug模式就可以了。</p><p><strong>2.线上包</strong><br>对于线上的APP，一般debug开关都是关闭的，这就需要借助第三方工具，才能将debug开关打开，这个工具就是<a href="http://repo.xposed.info/module/de.robv.android.xposed.installer">Xposed</a>和<a href="https://github.com/feix760/WebViewDebugHook">WebviewDebugHook</a>。</p><p>Xposed是一个框架，能够集成很多功能模块，这些模块能够在不修改APK的情况下，修改APP的运行方式。这里我们就需要WebviewDebugHook模块来开启APP的WebView debug模式。下面主要介绍一下安装的步骤：</p><p>（1）获取手机的root权限，这个推荐使用KingRoot，可能一次获取root权限会失败，建议失败后多试几次；</p><p><img  src="https://img-blog.csdnimg.cn/20200807161222805.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><p>（2）下载适合版本的Xposed和WebviewDebugHook，并安装。</p><p>目前Xposed的官网上给出的链接是这样的：</p><p>Android5.0+：<a href="https://forum.xda-developers.com/attachment.php?s=30001ec31416ae09e37652e1b147066e&attachmentid=3921508&d=1477916609">https://forum.xda-developers.com/attachment.php</a></p><p>而WebviewDebugHook的安装文件是git项目<a href="https://github.com/feix760/WebViewDebugHook">https://github.com/feix760/WebViewDebugHook</a>源码中的WebViewDebugHook.apk。</p><p>（3）激活Xposed和WebViewDebugHook模块</p><p>下图是Android5.0+下的截图，通过点击【安装/更新】激活Xposed，并切换菜单到模块功能，然后勾选上WebViewDebugHook。</p><p> <img  src="https://img-blog.csdnimg.cn/20200807161301192.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span><br><img  src="https://img-blog.csdnimg.cn/20200807161313102.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><p>安装完毕后，接下来就可以开开心心的调试Webview了。</p><p>另外还有两个小Tips：</p><p>（1）访问chrome://inspect/#devices如果chrome没有检测到Remote Target中的页面，可能需要安装一下chrome的ADB插件；</p><p>（2）对于腾讯系的APP，默认采用X5内核，需要将WebViewDebugHook的git目录下的debug.conf文件拷贝到SD卡的根目录下即可。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android Studio 清理缓存clean project与invalidate caches——解决项目一片报红，但是可以正常编译</title>
      <link href="2020/10/23/Android-Studio-%E6%B8%85%E7%90%86%E7%BC%93%E5%AD%98clean-project%E4%B8%8Einvalidate-caches%E2%80%94%E2%80%94%E8%A7%A3%E5%86%B3%E9%A1%B9%E7%9B%AE%E4%B8%80%E7%89%87%E6%8A%A5%E7%BA%A2%EF%BC%8C%E4%BD%86%E6%98%AF%E5%8F%AF%E4%BB%A5%E6%AD%A3%E5%B8%B8%E7%BC%96%E8%AF%91/"/>
      <url>2020/10/23/Android-Studio-%E6%B8%85%E7%90%86%E7%BC%93%E5%AD%98clean-project%E4%B8%8Einvalidate-caches%E2%80%94%E2%80%94%E8%A7%A3%E5%86%B3%E9%A1%B9%E7%9B%AE%E4%B8%80%E7%89%87%E6%8A%A5%E7%BA%A2%EF%BC%8C%E4%BD%86%E6%98%AF%E5%8F%AF%E4%BB%A5%E6%AD%A3%E5%B8%B8%E7%BC%96%E8%AF%91/</url>
      
        <content type="html"><![CDATA[<p><strong>报错现象：</strong></p><ol><li>Android studio 打开项目有时找不到R文件、 导入的资源、布局 、 jar包等等资源；</li><li>Android studio打开项目一片报红，但是项目可以正常build打包；</li></ol><p>很有可能是studio 缓存造成的。</p><p><strong>解决方案：</strong></p><p><strong>方法1：</strong></p><p> 工具栏  Build  –&gt; lean project<br> <img  src="https://img-blog.csdnimg.cn/20200803110548863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><p><strong>方法2：</strong></p><p>使用invalidate caches restart<br><img  src="https://img-blog.csdnimg.cn/20200803110707203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span><br><img  src="https://img-blog.csdnimg.cn/20200803110732560.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span><br><strong>备注：</strong><br>如果使用<strong>方法1</strong>无效，可以试一下<strong>方法2</strong>。<br>本人项目就是使用方1无效，使用方法2有效解决问题。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android R(11) app targetSdkVersion30遇到的那些坑之——相册选择图片黑屏现象</title>
      <link href="2020/10/23/Android-R-11-app-targetSdkVersion30%E9%81%87%E5%88%B0%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91%E4%B9%8B%E2%80%94%E2%80%94%E7%9B%B8%E5%86%8C%E9%80%89%E6%8B%A9%E5%9B%BE%E7%89%87%E9%BB%91%E5%B1%8F%E7%8E%B0%E8%B1%A1/"/>
      <url>2020/10/23/Android-R-11-app-targetSdkVersion30%E9%81%87%E5%88%B0%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91%E4%B9%8B%E2%80%94%E2%80%94%E7%9B%B8%E5%86%8C%E9%80%89%E6%8B%A9%E5%9B%BE%E7%89%87%E9%BB%91%E5%B1%8F%E7%8E%B0%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<p><strong>问题：</strong><br>当开发版本targetSdkVersion提升到30时：</p><ol><li>在android10手机上安装app后，调用相册选择图片时，相册会出现图片全部都是黑屏现象，选择后的图片也是黑屏图片，而且无法获取图片的小大；</li><li>在android10以下的手机安装app，可以正常选择图片；</li></ol><p><strong>解决：</strong></p><p>把targetSdkVersion降到28，在android10手机上则可以正常选择相册的图片。<br>目前（2020.08.03）没有找到targetSdkVersion30的适配方法，如有大神有解决方法，望请告知，不甚感激。</p><p><strong>备注：</strong></p><ol><li>当项目targetSdkVersion为28时，在android10手机安装了app；然后将项目targetSdkVersion升级到30，再在android10手机覆盖安装此app，则相册是可以正常选择图片的。</li><li>当项目targetSdkVersion直接为30，Android10手机之前并未在targetSdkVersion低版本安装过此app，直接在targetSdkVersion30第一次安装此app，则调用相册会出现黑屏现象。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>手机Web前端调试页面之——Chrome DevTools（谷歌浏览器）的模拟手机调试</title>
      <link href="2020/10/23/%E6%89%8B%E6%9C%BAWeb%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E9%A1%B5%E9%9D%A2%E4%B9%8B%E2%80%94%E2%80%94Chrome-DevTools%EF%BC%88%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%89%E7%9A%84%E6%A8%A1%E6%8B%9F%E6%89%8B%E6%9C%BA%E8%B0%83%E8%AF%95/"/>
      <url>2020/10/23/%E6%89%8B%E6%9C%BAWeb%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E9%A1%B5%E9%9D%A2%E4%B9%8B%E2%80%94%E2%80%94Chrome-DevTools%EF%BC%88%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%89%E7%9A%84%E6%A8%A1%E6%8B%9F%E6%89%8B%E6%9C%BA%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="Chrome-DevTools（谷歌浏览器）的模拟手机调试"><a href="#Chrome-DevTools（谷歌浏览器）的模拟手机调试" class="headerlink" title="Chrome DevTools（谷歌浏览器）的模拟手机调试"></a>Chrome DevTools（谷歌浏览器）的模拟手机调试</h2><p><strong>前言</strong></p><p>在客户端开发中，由于使用手机app加载webview页面，客户端与前端经常会出现数据交互情况；<br>但是在手机中无法调试看到前端代码的步骤流程，有时候会导致数据交互失败查找问题比较麻烦；因此可以引入Chrome DevTools（谷歌浏览器）的模拟手机调试。</p><ol><li>Chrome DevTools（谷歌浏览器）的模拟手机调试</li><li>Chrome DevTools远程调试Android和iOS页面</li></ol><p><strong>阅读</strong></p><p> <strong>1. Chrome DevTools模拟手机调试</strong></p><p>直接使用谷歌浏览器的开发者工具，可以参照下图，也可以使用快捷键F12或者ctrl+shift+I；个人觉得不管是哪个浏览器，直接先按下F12，一般都可以打开开发者工具，打不开再说嘛。</p><p>这种调试方式不仅能用于模拟手机调试还是主要的PC端页面调试的方式，这里主要说用于手机调试。</p><p><img  src="https://img-blog.csdnimg.cn/20200802202730450.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><p> 打开后看到类似如下界面的开发者调试界面，Elements可以查看文档元素，Console可以在线调试js和查看输出结果，Sources可以调试JS和查看依赖资源，Network查看所有的网络请求</p><p> <img  src="https://img-blog.csdnimg.cn/20200802202747145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><p>在浏览器地址栏输入要调试的页面地址，选择模拟设备，然后就可以选择要调试的js调试了，右侧面板中有调试操作按钮；在Application面板中可以看到应用存储的数据Cookies什么的</p><p><img  src="https://img-blog.csdnimg.cn/20200802202819687.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><p>如果没有需要模拟的机型怎么办？当然是增加了，打开DevTools的设置面板，左图中的Setting点开会出现右图，如下：</p><p><img  src="https://img-blog.csdnimg.cn/20200802202858518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span><br><img  src="https://img-blog.csdnimg.cn/20200802202935931.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><p> <strong>2. Chrome DevTools远程调试Android和iOS页面</strong></p><p>电脑上安装新版谷歌浏览器，然后地址栏输入chrome://inspect会打开设备监视页面，这里可以监视到iOS和Android设备，如果界面和图中不一致请安装最新版浏览器<br><img  src="https://img-blog.csdnimg.cn/20200802203038777.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span><br>Android:</p><p>前提：</p><p>1、手机和电脑使用usb连接，手机要开启usb调试模式(不同手机不一样)</p><p>2、手机上安装最新版谷歌浏览器并打开</p><p>会发现设备监视页面多出了一个华为设备，并且能看到当前手机上谷歌浏览器打开的网页的连接</p><p>a):可以在这里输入手机要打开的url然后open，手机上显示的当前页面就会改变</p><p>b):inspect表示开始调试当前页面，会打开调试面板(重要)</p><p>c):focus tab，表示让手机显示当前这个连接</p><p>d):reload表示重新加载页面，也就是刷新</p><p>e):close表示关闭当前手机显示的页面<br><img  src="https://img-blog.csdnimg.cn/20200802203104394.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span><br>接下来，点击inspect开始调试页面，注意如果google浏览器不能翻|墙的话，这个调试页面是打不开的，可以百度修改hosts文件翻|墙<br><img  src="https://img-blog.csdnimg.cn/2020080220312643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span><br>然后就可以像调试PC端网页一样远程调试手机网页了</p><p><strong>iOS(window系统上，如果是macbook系统忽略此部分):</strong></p><p>可以参考：<a href="http://www.cnblogs.com/kelsen/p/6402477.html">http://www.cnblogs.com/kelsen/p/6402477.html</a></p><p>前提：</p><p>1、电脑安装iTunes软件，不然苹果手机不能正常被识别，安装好后数据线连接手机和电脑</p><p>2、打开手机的设置——&gt;Sarafi——&gt;高级——&gt;Web检查器——&gt;启用(默认是关闭的，将其打开)</p><p>3、下载ios-webkit-debug-prox代理(32位或者64位)，其作用就是在Chrome和Sarafi之间建立了一个代理，便于电脑的Chrome检测手机Sarafi打开的页面</p><p>4、在cmd中执行ios_webkit_debug_proxy -f chrome-devtools://devtools/bundled/inspector.html，命令中-f是以谷歌内置的监视器来调试(默认使用远程的)<br><img  src="https://img-blog.csdnimg.cn/20200802203159102.png"  ><span class="image-caption">在这里插入图片描述</span><br>启动后会监听9222端口，然后看到连接上了一台名为jiba的iOS设备，括号中为设备的UDID；然后看谷歌浏览器是否检查了这个端口，右图中有9222端口即可，没有就手动添加<br><img  src="https://img-blog.csdnimg.cn/20200802203213647.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span><br><img  src="https://img-blog.csdnimg.cn/20200802203220692.png"  ><span class="image-caption">在这里插入图片描述</span><br>此时打开手机Sarafi浏览器，打开百度首页，发现浏览器能检测到，没看到就刷新这个监视界面，一般来说会在3秒内自动出现<br><img  src="https://img-blog.csdnimg.cn/20200802203236671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span><br>点击inspect同样出现了调试面板，如下，发现iOS调试的面板不能看到手机屏幕在电脑上的投影，不过这并不影响调试；但是可能会遇到在调试js时断点不生效的问题，</p><p>如果很不幸遇到这个问题的话，将图中红框中的按钮连续点击两次——先禁用断点再启动即可恢复端点调试功能，不知道为什么，猜测是这个过程中恢复了断点的状态；这个问题很奇葩。<br><img  src="https://img-blog.csdnimg.cn/20200802203254161.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span><br>到这里使用Chrome调试iOS和Android就都完了，这种使用谷歌浏览器的方式，在Android上依赖于手机谷歌浏览器，在iOS上依赖Sarafi浏览器，受到具体软件的限制；不过可以理解，毕竟远程调试不如模拟调试简单</p><p><strong>转载来源：</strong></p><ol><li><a href="https://www.cnblogs.com/xy-nb/p/web.html">手机Web前端调试页面</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>AndroidQ(10)分区存储完美适配</title>
      <link href="2020/10/23/AndroidQ-10-%E5%88%86%E5%8C%BA%E5%AD%98%E5%82%A8%E5%AE%8C%E7%BE%8E%E9%80%82%E9%85%8D/"/>
      <url>2020/10/23/AndroidQ-10-%E5%88%86%E5%8C%BA%E5%AD%98%E5%82%A8%E5%AE%8C%E7%BE%8E%E9%80%82%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong></p><ul><li>Android Q文件存储机制修改成了沙盒模式</li><li>APP只能访问自己目录下的文件和公共媒体文件</li><li>对于AndroidQ以下，还是使用老的文件存储方式</li></ul><p><strong>背景</strong></p><ul><li><strong>存储权限</strong><br>Android Q仍然使用READ_EXTERNAL_STORAGE和WRITE_EXTERNAL_STORAGE作为存储相关运行时权限，但现在即使获取了这些权限，访问外部存储也受到了限制，只能访问自身目录下的文件和公共内体文件。</li><li><strong>外部存储结构划分</strong><br>1、<strong>公有目录</strong>：Downloads、Documents、Pictures 、DCIM、Movies、Music、Ringtones等<br>地址：/storage/emulated/0/Downloads(Pictures)等<br>公有目录下的文件不会跟随APP卸载而删除。<br>2、<strong>APP私有目录</strong><br>地址：/storage/emulated/0/Android/data/包名/files<br>私有目录存放app的私有文件，会随着App的卸载而删除。</li></ul><p><strong>适配方案</strong></p><p>AndroidQ中使用ContentResolver进行文件的增删改查</p><p><strong>1、获取(创建)自身目录下的文件夹</strong><br>获取及创建，如果手机中没有对应的文件夹，则系统会自动生成</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//在自身目录下创建apk文件夹</span></span><br><span class="line"><span class="built_in">File</span> apkFile = context.getExternalFilesDir(<span class="string">&quot;apk&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>2、创建自身目录下的文件</strong><br>生成需要下载的路径，通过输入输出流读取写入</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> apkFilePath = context.getExternalFilesDir(<span class="string">&quot;apk&quot;</span>).getAbsolutePath();</span><br><span class="line">File <span class="keyword">new</span><span class="type">File</span> = <span class="keyword">new</span> <span class="type">File</span>(apkFilePath + File.separator + <span class="string">&quot;temp.apk&quot;</span>);</span><br><span class="line">OutputStream os = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  os = <span class="keyword">new</span> <span class="type">FileOutputStream</span>(<span class="keyword">new</span><span class="type">File</span>);</span><br><span class="line">  <span class="keyword">if</span> (os != <span class="literal">null</span>) &#123;</span><br><span class="line">    os.write(<span class="string">&quot;file is created&quot;</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">    os.flush();</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (os != <span class="literal">null</span>) &#123;</span><br><span class="line">      os.close();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">     </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、创建公共目录下的文件夹</strong><br>通过MediaStore.insert写入</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.Q) &#123;</span><br><span class="line">  <span class="built_in">return</span> null;</span><br><span class="line">&#125;</span><br><span class="line">ContentResolver resolver = <span class="built_in">context</span>.getContentResolver();</span><br><span class="line">ContentValues <span class="built_in">values</span> = <span class="built_in">new</span> ContentValues();</span><br><span class="line"><span class="built_in">values</span>.<span class="built_in">put</span>(MediaStore.Downloads.DISPLAY_NAME, fileName);</span><br><span class="line"><span class="built_in">values</span>.<span class="built_in">put</span>(MediaStore.Downloads.DESCRIPTION, fileName);</span><br><span class="line">//设置文件类型</span><br><span class="line"><span class="built_in">values</span>.<span class="built_in">put</span>(MediaStore.Downloads.MIME_TYPE, <span class="string">&quot;application/vnd.android.package-archive&quot;</span>);</span><br><span class="line">//注意MediaStore.Downloads.RELATIVE_PATH需要targetVersion=<span class="number">29</span>,</span><br><span class="line">//故该方法只可在Android10的手机上执行</span><br><span class="line"><span class="built_in">values</span>.<span class="built_in">put</span>(MediaStore.Downloads.RELATIVE_PATH, <span class="string">&quot;Download&quot;</span> + File.separator + <span class="string">&quot;apk&quot;</span>);</span><br><span class="line">Uri external = MediaStore.Downloads.EXTERNAL_CONTENT_URI;</span><br><span class="line">Uri insertUri = resolver.insert(external, <span class="built_in">values</span>);</span><br><span class="line"><span class="built_in">return</span> insertUri;</span><br></pre></td></tr></table></figure><p><strong>4、公共目录下的指定文件夹下创建文件</strong><br>结合上面代码，我们主要是在公共目录下创建文件或文件夹拿到本地路径uri，不同的Uri，可以保存到不同的公共目录中。接下来使用输入输出流就可以写入文件</p><p>重点：AndroidQ中不支持file://类型访问文件，只能通过uri方式访问</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">ContentResolver resolver = context.getContentResolver();</span><br><span class="line">Uri insertUri = resolver.<span class="keyword">insert</span>(<span class="keyword">external</span>, <span class="keyword">values</span>);</span><br><span class="line"><span class="keyword">if</span>(insertUri == <span class="keyword">null</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">String mFilePath = insertUri.toString();</span><br><span class="line">InputStream <span class="keyword">is</span> = <span class="keyword">null</span>;</span><br><span class="line">OutputStream os = <span class="keyword">null</span>;</span><br><span class="line">try &#123;</span><br><span class="line">  os = resolver.openOutputStream(insertUri);</span><br><span class="line">  <span class="keyword">if</span>(os == <span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> <span class="keyword">read</span>;</span><br><span class="line">  File sourceFile = <span class="built_in">new</span> File(sourcePath);</span><br><span class="line">  <span class="keyword">if</span> (sourceFile.<span class="keyword">exists</span>()) &#123; // 文件存在时</span><br><span class="line">    <span class="keyword">is</span> = <span class="built_in">new</span> FileInputStream(sourceFile); // 读入原文件</span><br><span class="line">    byte[] buffer = <span class="built_in">new</span> byte[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">while</span> ((<span class="keyword">read</span> = <span class="keyword">is</span>.<span class="keyword">read</span>(buffer)) != <span class="number">-1</span>) &#123;</span><br><span class="line">      os.<span class="keyword">write</span>(buffer, <span class="number">0</span>, <span class="keyword">read</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; catch (<span class="keyword">Exception</span> e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125;finally &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">is</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">is</span>.<span class="keyword">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (os != <span class="keyword">null</span>) &#123;</span><br><span class="line">      os.<span class="keyword">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; catch (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5、通过MediaStore读取公共目录下的文件</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">ParcelFileDescriptor parcelFileDescriptor = null;</span><br><span class="line">FileDescriptor fileDescriptor = null;</span><br><span class="line">Bitmap tagBitmap = null;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  parcelFileDescriptor = context.get<span class="constructor">ContentResolver()</span>.<span class="keyword">open</span><span class="constructor">FileDescriptor(<span class="params">uri</span>, <span class="string">&quot;r&quot;</span>)</span>;</span><br><span class="line">       </span><br><span class="line">  <span class="keyword">if</span> (parcelFileDescriptor != null<span class="operator"> &amp;&amp; </span>parcelFileDescriptor.get<span class="constructor">FileDescriptor()</span> != null) &#123;</span><br><span class="line">    fileDescriptor = parcelFileDescriptor.get<span class="constructor">FileDescriptor()</span>;</span><br><span class="line">    <span class="comment">//转换uri为bitmap类型</span></span><br><span class="line">    tagBitmap = <span class="module-access"><span class="module"><span class="identifier">BitmapFactory</span>.</span></span>decode<span class="constructor">FileDescriptor(<span class="params">fileDescriptor</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">  e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">  e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (parcelFileDescriptor != null) &#123;</span><br><span class="line">      parcelFileDescriptor.close<span class="literal">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; catch (IOException e) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>6、使用MediaStore删除文件</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">context.getContentResolver().delete(fileUri,</span> <span class="literal">null</span><span class="string">,</span> <span class="literal">null</span><span class="string">);</span></span><br></pre></td></tr></table></figure><p><strong>转载来自</strong></p><p><a href="https://www.jianshu.com/p/271bbd13bfcf">会撒娇的犀犀利</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java中try()catch{}的使用方法：自动资源释放</title>
      <link href="2020/10/23/Java%E4%B8%ADtry-catch-%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%9A%E8%87%AA%E5%8A%A8%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/"/>
      <url>2020/10/23/Java%E4%B8%ADtry-catch-%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%9A%E8%87%AA%E5%8A%A8%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/</url>
      
        <content type="html"><![CDATA[<p>今天撸代码的时候发现了一段这样的代码</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">try(</span><br><span class="line">          <span class="built_in"> Connection </span><span class="attribute">conn</span>=DriverManager.getConnection(url,user,pass);</span><br><span class="line"></span><br><span class="line">           Statement <span class="attribute">stmt</span>=conn.createStatement()</span><br><span class="line"></span><br><span class="line">        ) &#123;</span><br><span class="line"></span><br><span class="line">           boolean <span class="attribute">hasResultSet</span>=stmt.execute(sql);</span><br><span class="line"></span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure><p>和平常见的不一样，我们平常见的是这样的</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">       fis=<span class="keyword">new</span> FileInputStream(<span class="string">&quot;src\\com\\ggp\\first\\FileInputStreamDemo.java&quot;</span>);</span><br><span class="line">       <span class="keyword">byte</span>[]bbuf=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">       <span class="keyword">int</span> hasRead=<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">while</span>((hasRead=fis.<span class="built_in">read</span>(bbuf))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">     </span><br><span class="line">       System.out.<span class="built_in">println</span>(<span class="keyword">new</span> <span class="keyword">String</span>(bbuf,<span class="number">0</span>,hasRead));</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">       e.printStackTrace();</span><br><span class="line">       &#125;finally&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">            fis.<span class="built_in">close</span>();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>如果{}中的代码块出现了异常，会被catch捕获，然后执行catch中的代码，接着执行finally中的码，其中catch中的代码有了异常才会被执行，finally中的代码无论有没有异常都会被执行，</p><p>而第一种情况的()中的代码一般放的是对资源的申请，如果{}中的代码出项了异常，（）中的资源就会被关闭，这在inputstream和outputstream的使用中会很方便例如</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> customBufferStreamCopy(<span class="keyword">File</span> <span class="keyword">source</span>, <span class="keyword">File</span> target) &#123;</span><br><span class="line">    <span class="keyword">try</span> (InputStream fis = <span class="keyword">new</span> FileInputStream(<span class="keyword">source</span>);</span><br><span class="line">        OutputStream fos = <span class="keyword">new</span> FileOutputStream(target))&#123;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8192</span>];</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">while</span> ((i = fis.<span class="keyword">read</span>(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fos.<span class="keyword">write</span>(buf, <span class="number">0</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从网上查阅资料得知从 Java 7 build 105 版本开始，Java 7 的编译器和运行环境支持新的 try-with-resources 语句，称为 ARM 块(Automatic Resource Management) ，自动资源管理。</p><p>The try-with-resources statement is a try statement that declares one or more resources. A resource is an object that must be closed after the program is finished with it. The try-with-resources statement ensures that each resource is closed at the end of the statement. Any object that implements java.lang.AutoCloseable, which includes all objects which implement java.io.Closeable, can be used as a resource.</p><p>带有resources的try语句声明一个或多个resources。resources是在程序结束后必须关闭的对象。try-with-resources语句确保在语句末尾关闭每个resources。<br><strong>任何实现java.lang.AutoCloseable,包括实现了java.io.Closeable的类，都可以作为resources使用。</strong></p><hr><p><strong>自定义AutoClosable 实现</strong></p><p>这个try-with-resources结构里不仅能够操作java内置的类。你也可以在自己的类中实现java.lang.AutoCloseable接口，然后在try-with-resources结构里使用这个类。</p><p>AutoClosable 接口仅仅有一个方法，接口定义如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>AutoClosable &#123;</span><br><span class="line"></span><br><span class="line">    public void close() throws Exception;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>任何实现了这个接口的方法都可以在try-with-resources结构中使用。下面是一个简单的例子：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyAutoClosable</span> <span class="title">implements</span> <span class="title">AutoCloseable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doIt</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;MyAutoClosable doing it!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span>(<span class="params"></span>) throws Exception</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;MyAutoClosable closed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>doIt()是方法不是AutoClosable 接口中的一部分，之所以实现这个方法是因为我们想要这个类除了关闭方法外还能做点其他事。</p><p>下面是MyAutoClosable 在try-with-resources结构中使用的例子：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">myAutoClosable</span>(<span class="params"></span>) throws Exception</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>(MyAutoClosable myAutoClosable = <span class="keyword">new</span> MyAutoClosable())&#123;</span><br><span class="line"></span><br><span class="line">        myAutoClosable.doIt();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当方法myAutoClosable.doIt()被调用时，下面是打印到System.out的输出：</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MyAutoClosable doing it!</span><br><span class="line"></span><br><span class="line">MyAutoClosable closed!</span><br></pre></td></tr></table></figure><p>通过上面这些你可以看到，不论try-catch中使用的资源是自己创造的还是java内置的类型，try-with-resources都是一个能够确保资源能被正确地关闭的强大方法。</p><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>1、<a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html#suppressed-exceptions">The try-with-resources Statement</a></p><h2 id="转载来自"><a href="#转载来自" class="headerlink" title="转载来自"></a>转载来自</h2><p>1、<a href="https://blog.csdn.net/qq_33543634/article/details/80725899">https://blog.csdn.net/qq_33543634/article/details/80725899</a><br>2、<a href="https://blog.csdn.net/bigtree_3721/article/details/50508985">https://blog.csdn.net/bigtree_3721/article/details/50508985</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>原生WebView长截图 和 Tencent x5webview截长图</title>
      <link href="2020/10/23/%E5%8E%9F%E7%94%9FWebView%E9%95%BF%E6%88%AA%E5%9B%BE-%E5%92%8C-Tencent-x5webview%E6%88%AA%E9%95%BF%E5%9B%BE/"/>
      <url>2020/10/23/%E5%8E%9F%E7%94%9FWebView%E9%95%BF%E6%88%AA%E5%9B%BE-%E5%92%8C-Tencent-x5webview%E6%88%AA%E9%95%BF%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p><strong>前言：</strong> 之前项目用的是原生webview，最近使用公司新框架使用的是x5的webview；正好有需求需要做长截图，踩坑之路开始。</p><hr><h2 id="1、原生WebView长截图"><a href="#1、原生WebView长截图" class="headerlink" title="1、原生WebView长截图"></a>1、原生WebView长截图</h2><p> Android5.0及以上版本，Android对WebView进行了优化，为了减少内存使用和提高性能，使用WebView加载网页时只绘制显示部分。如果我们不做处理，仍然使用上述代码截图的话，就会出现只截到屏幕内显示的WebView内容，其它部分是空白的情况。<br>这时候，我们通过调用WebView.enableSlowWholeDocumentDraw()方法可以关闭这种优化，但要注意的是，该方法需要在WebView实例被创建前就要调用，否则没有效果。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (<span class="keyword">Build.VERSION.SDK_INT </span>&gt;= <span class="keyword">Build.VERSION_CODES.LOLLIPOP) </span>&#123;</span><br><span class="line">        <span class="keyword">android.webkit.WebView.enableSlowWholeDocumentDraw();</span></span><br><span class="line"><span class="keyword"> </span>   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 原生WebView长截图</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param webView</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public static Bitmap get<span class="constructor">WebViewBtpBase64Str(WebView <span class="params">webView</span>)</span> &#123;</span><br><span class="line">        Bitmap bitmap = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class="line">                Picture snapShot = webView.capture<span class="constructor">Picture()</span>;</span><br><span class="line">                bitmap = <span class="module-access"><span class="module"><span class="identifier">Bitmap</span>.</span></span>create<span class="constructor">Bitmap(<span class="params">snapShot</span>.<span class="params">getWidth</span>()</span>, snapShot.get<span class="constructor">Height()</span>, Bitmap.Config.RGB_565);</span><br><span class="line">                Canvas canvas = <span class="keyword">new</span> <span class="constructor">Canvas(<span class="params">bitmap</span>)</span>;</span><br><span class="line">                snapShot.draw(canvas);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">float</span> scale = webView.get<span class="constructor">Scale()</span>;</span><br><span class="line">                <span class="comment">//得到缩放后webview内容的高度</span></span><br><span class="line">                <span class="built_in">int</span> webViewHeight = (<span class="built_in">int</span>) (webView.get<span class="constructor">ContentHeight()</span><span class="operator"> * </span>scale);</span><br><span class="line">                bitmap = <span class="module-access"><span class="module"><span class="identifier">Bitmap</span>.</span></span>create<span class="constructor">Bitmap(<span class="params">webView</span>.<span class="params">getWidth</span>()</span>, webViewHeight, Bitmap.Config.RGB_565);</span><br><span class="line">                Canvas canvas = <span class="keyword">new</span> <span class="constructor">Canvas(<span class="params">bitmap</span>)</span>;</span><br><span class="line">                <span class="comment">//绘制</span></span><br><span class="line">                webView.draw(canvas);</span><br><span class="line">            &#125;</span><br><span class="line">            return bitmap;</span><br><span class="line">        &#125; catch (OutOfMemoryError e) &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">LogEx</span>.</span></span>e(<span class="string">&quot;ScreenUtils&quot;</span>, e.get<span class="constructor">Message()</span>, e);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">LogEx</span>.</span></span>e(<span class="string">&quot;ScreenUtils&quot;</span>, e.get<span class="constructor">Message()</span>, e);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        return <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2、Tencent-x5webview截长图"><a href="#2、Tencent-x5webview截长图" class="headerlink" title="2、Tencent x5webview截长图"></a>2、Tencent x5webview截长图</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Tencent x5webview截长图</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param webView</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public static Bitmap get<span class="constructor">X5WebViewBtpBase64Str(WebView <span class="params">webView</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (webView<span class="operator"> == </span>null) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> wholeWidth = webView.get<span class="constructor">ContentWidth()</span>;</span><br><span class="line">        <span class="built_in">int</span> wholeHeight = webView.get<span class="constructor">ContentHeight()</span>;</span><br><span class="line">        Bitmap x5bitmap = <span class="module-access"><span class="module"><span class="identifier">Bitmap</span>.</span></span>create<span class="constructor">Bitmap(<span class="params">wholeWidth</span>, <span class="params">wholeHeight</span>, Bitmap.Config.RGB_565)</span>;</span><br><span class="line">        Canvas x5canvas = <span class="keyword">new</span> <span class="constructor">Canvas(<span class="params">x5bitmap</span>)</span>;</span><br><span class="line"><span class="comment">//        x5canvas.scale((float) wholeWidth / (float) webView.getContentWidth(), (float) wholeHeight / (float)webView.getContentHeight());</span></span><br><span class="line">        <span class="keyword">if</span> (webView.get<span class="constructor">X5WebViewExtension()</span><span class="operator"> == </span>null) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        IX5WebViewExtension ix5WebViewExtension = webView.get<span class="constructor">X5WebViewExtension()</span>;</span><br><span class="line">        ix5WebViewExtension.snapshot<span class="constructor">WholePage(<span class="params">x5canvas</span>, <span class="params">false</span>, <span class="params">false</span>)</span>;</span><br><span class="line">        Bitmap bitmap = <span class="module-access"><span class="module"><span class="identifier">Bitmap</span>.</span></span>create<span class="constructor">Bitmap(<span class="params">x5bitmap</span>)</span>;</span><br><span class="line">        return bitmap;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Android Webview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设置Android studio内存大小防止使用卡顿</title>
      <link href="2020/10/23/%E8%AE%BE%E7%BD%AEAndroid-studio%E5%86%85%E5%AD%98%E5%A4%A7%E5%B0%8F%E9%98%B2%E6%AD%A2%E4%BD%BF%E7%94%A8%E5%8D%A1%E9%A1%BF/"/>
      <url>2020/10/23/%E8%AE%BE%E7%BD%AEAndroid-studio%E5%86%85%E5%AD%98%E5%A4%A7%E5%B0%8F%E9%98%B2%E6%AD%A2%E4%BD%BF%E7%94%A8%E5%8D%A1%E9%A1%BF/</url>
      
        <content type="html"><![CDATA[<p><strong>前言：</strong> 最近开发中发现AS越来越卡，尤其使用CPU Profiler时直接卡死，顿时才想起来自己使用的是重新下载的最新版4.0.1的AS，并没有对其内存设置大小=。=</p><p><strong>操作：</strong></p><ul><li><strong>在AS的安装目录bin目录下找到studio64.exe.vmoptions文件；</strong></li></ul><p><img  src="https://img-blog.csdnimg.cn/20200723163604472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p><ul><li><p><strong>设置JVM参数</strong></p></li><li><p>Xms    JVM启动的起始堆内存，堆内存是分配给对象的内存。</p><p>  -Xmx    AndroidStudio能使用的最大heap内存</p><p>  -XX:ReservedCodeCacheSize   设置JIT java compiler在compile的时候的最大代码缓存</p><p>  -XX:+UseCompressedOops     这个参数允许系统将代码里面的引用(reference)类型用32位存储，同时却能够让引用能够使用64位的内存大小。</p><p>  -XX:SoftRefLRUPolicyMSPerMB  每兆堆空闲空间中SoftReference的存活时间(ms),越小越好<br><img  src="https://img-blog.csdnimg.cn/20200723163943352.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p></li><li><p><strong>打开AS，打开Setting，选中Appearance，勾选Show memory indicator；就可以在AS的右下角看到内存实际使用情况；</strong></p></li></ul><p><img  src="https://img-blog.csdnimg.cn/20200723164213219.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></p>]]></content>
      
      
      
        <tags>
            
            <tag> Android Studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android studio菜单栏被隐藏解决方案</title>
      <link href="2020/10/23/Android-studio%E8%8F%9C%E5%8D%95%E6%A0%8F%E8%A2%AB%E9%9A%90%E8%97%8F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>2020/10/23/Android-studio%E8%8F%9C%E5%8D%95%E6%A0%8F%E8%A2%AB%E9%9A%90%E8%97%8F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>今天使用android studio 开发项目，在想打开一个新的项目时，发现自己的File菜单栏不见了？？？一顿莫名其妙，不知道自己啥时候无意间点了什么快捷键把菜单栏隐藏了。</p><p><strong>问题：android studio菜单栏被隐藏</strong><br><strong>现象：</strong><br><img  src="https://img-blog.csdnimg.cn/20200723153612771.png"  ><span class="image-caption">File去哪啦？</span><br><strong>解决：</strong></p><ol><li>点击右边【搜索】按钮；</li><li>输入搜索【Main menu】，下面就会出现View|Appearance：Main Menu一栏；</li><li>把右侧【OFF】切换到【ON】就ok了。<br><img  src="https://img-blog.csdnimg.cn/20200723153919471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70"  ><span class="image-caption">在这里插入图片描述</span></li></ol><p>总结：不要手贱啊！！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android Studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android fragment 4种切换方式及对应的生命周期步骤</title>
      <link href="2020/10/23/Android-fragment-4%E7%A7%8D%E5%88%87%E6%8D%A2%E6%96%B9%E5%BC%8F%E5%8F%8A%E5%AF%B9%E5%BA%94%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%AD%A5%E9%AA%A4/"/>
      <url>2020/10/23/Android-fragment-4%E7%A7%8D%E5%88%87%E6%8D%A2%E6%96%B9%E5%BC%8F%E5%8F%8A%E5%AF%B9%E5%BA%94%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%AD%A5%E9%AA%A4/</url>
      
        <content type="html"><![CDATA[<p>最近做项目使用到fragment切换，要求切换时对fragment页面进行刷新操作。</p><p>由于使用的是公司封装好的框架（暂无法改动），框架使用的是add hidden show的方式进行fragment切换，而这种方式切换fragment是不会重新走fragment的生命周期的，导致页面无法刷新。。。于是决定对fragment使用进行学习下</p><h2 id="Fragment-1-切换到-Fragment-2时生命周期变化"><a href="#Fragment-1-切换到-Fragment-2时生命周期变化" class="headerlink" title="Fragment 1 切换到 Fragment 2时生命周期变化"></a>Fragment 1 切换到 Fragment 2时生命周期变化</h2><p><strong>1、通过 add hide show 方式来切换 Fragment</strong></p><ul><li>Fragment1 的生命周期变化为：onCreate（）、onCreateView、onStart（）、onResume（） 回调<br>onHiddenChanged（） 方法</li><li>Fragment2 的生命周期变化为： onCreate（）、onCreateView、onStart（）、onResume（）</li><li>Fragment 2 再次返回到 Fragment 1：不走任何生命周期方法但是回调 onHiddenChanged（）方法</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">onHiddenChanged</span>(<span class="params"><span class="built_in">boolean</span> hidden</span>)</span> &#123;</span><br><span class="line">       <span class="built_in">super</span>.onHiddenChanged(hidden);</span><br><span class="line">       <span class="keyword">if</span> (hidden) &#123;</span><br><span class="line"><span class="comment">//隐藏时所作的事情</span></span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">//显示时所作的事情</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>boolean的值代表是否隐藏，当切换到当前fragment时hidden为false，切换到别到fragment时hidden为true。<br>fragment的“显示”“隐藏”监听就这么简单。</p><p><strong>总结：当以这种方式进行 Fragment 1 与 Fragment 2 的切换时，Fragment 隐藏的时候并不走 onDestroyView，所有的显示也不会走 onCreateView 方法，所有的 view 都会保存在内存</strong></p><hr><p><strong>2、使用 replace 的方法进行切换时</strong></p><ul><li><p>载入Fragment 1时：<br>Fragment1的生命周期：onCreate（）、onCreateView（）、onStart（）、onResume（）</p></li><li><p>切换到Fragment2时：<br>Fragment1的生命周期：onPause（）、onStop()、onDestroyView（）、onDestroy（）</p><p> Fragment 2的生命周期：onCreate（）、onCreateV（）、onStart（）、onResume（）</p></li><li><p>Fragment 2切换回Fragment 1时：<br>Fragment2的生命周期：onPause（）、onStop()、onDestroyView（）、onDestroy（）</p><p> Fragment 1的生命周期：onCreate（）、onCreateV（）、onStart（）、onResume（）</p></li></ul><p><strong>总结：通过 replace 方法进行替换的时，Fragment 都是进行了销毁，重建的过程，相当于走了一整套的生命周期</strong></p><hr><p><strong>3、使用 ViewPager 进行切换时</strong></p><p>当使用 ViewPager 与 Fragment 进行切换时，Fragment 会进行预加载操作</p><p>所有的 Fragment 都会提前初始—&gt;预加载；</p><p>初始化时 Fragment 们的生命周期：</p><p>Fragment 1 的生命周期：onCreate（）、onCreateView（）<br>Fragment 2 的生命周期：onCreate（）、 onCreateView（）</p><p>Fragment 1 切换到 Fragment 2 的生命周期：</p><p>Fragment 1 ：不走任何生命周期；<br>Fragment 2 ：走 setUserVisVleHint（）方法</p><p>切回去也是一样的</p><p><strong>注意： setUserVisVleHint（）方法在 Fragment 1 第一次加载的时候不走，只有在切换的时候 走该方法</strong></p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">*第一个 Fragment 需要处理  <span class="built_in">set</span>UserVisVleHint（）方法，设置为 <span class="built_in">set</span>UserVisibleHint(true);</span><br><span class="line">*否则会产空指针异常，因为 <span class="built_in">set</span>UserVisVleHint（）方法的优先级高于 <span class="keyword">on</span>Create（）方法。</span><br><span class="line">*</span><br><span class="line">* @param savedInstanceState</span><br><span class="line">*/</span><br><span class="line">@Override</span><br><span class="line">public void <span class="keyword">on</span>ActivityCreated(Bundle savedInstanceState) &#123;</span><br><span class="line">    <span class="built_in">set</span>UserVisibleHint(true);</span><br><span class="line">    super.<span class="keyword">on</span>ActivityCreated(savedInstanceState);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">主动调用 <span class="built_in">set</span>UserVisibleHint（）方法来控制第一次不会调用<span class="built_in">set</span>UserVisibleHint方法的问题。</span><br><span class="line"><span class="built_in">set</span>UserVisibleHint（）方法优先<span class="keyword">on</span>CreateView方法，当<span class="keyword">on</span>CreateView方法调用后还会再次调用<span class="built_in">set</span>UserVisibleHint方法。</span><br><span class="line">此时要对是否调用了<span class="keyword">on</span>CreateView（）方法进行标记判断。</span><br><span class="line"> </span><br><span class="line">作者：吾乃韩小呆</span><br><span class="line">链接：https://www.jianshu.com/p/c8f34229b6dc</span><br><span class="line">來源：简书</span><br><span class="line">简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</span><br></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 标志位，标志已经初始化完成</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> boolean isPrepared;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">public void on<span class="constructor">ActivityCreated(Bundle <span class="params">savedInstanceState</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 配置setUserVisibleHint（）方法</span></span><br><span class="line">    set<span class="constructor">UserVisibleHint(<span class="params">true</span>)</span>;</span><br><span class="line">    super.on<span class="constructor">ActivityCreated(<span class="params">savedInstanceState</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">public View on<span class="constructor">CreateView(LayoutInflater <span class="params">inflater</span>, ViewGroup <span class="params">container</span>, Bundle <span class="params">savedInstanceState</span>)</span> &#123;</span><br><span class="line">    View view = <span class="module-access"><span class="module"><span class="identifier">LayoutInflater</span>.</span></span>from(get<span class="constructor">Activity()</span>).inflate(<span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>layout.fragment_a, container, <span class="literal">false</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//已经初始化</span></span><br><span class="line">    isPrepared = <span class="literal">true</span>;</span><br><span class="line">    return view;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">public void set<span class="constructor">UserVisibleHint(<span class="params">boolean</span> <span class="params">isVisibleToUser</span>)</span> &#123;</span><br><span class="line">    super.set<span class="constructor">UserVisibleHint(<span class="params">isVisibleToUser</span>)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//可见的并且是初始化之后才加载</span></span><br><span class="line">    <span class="keyword">if</span> (isPrepared<span class="operator"> &amp;&amp; </span>isVisibleToUser) &#123;</span><br><span class="line"> </span><br><span class="line">         getList（）；</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">作者：吾乃韩小呆</span><br><span class="line">链接：https:<span class="comment">//www.jianshu.com/p/c8f34229b6dc</span></span><br><span class="line">來源：简书</span><br><span class="line">简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</span><br></pre></td></tr></table></figure><hr><p><strong>4.attach和detach切换</strong></p><p>方法和show  hide一样，只是把show改为attach，把hide改为detach</p><p>从Fragment 1切换到Fragment 2的时候，</p><p>Fragment 1调用detach()方法，onPause()-&gt;onStop()-&gt;onDestroyView();      </p><p>Fragment 2 调用attach()方法，onCreateView()-&gt;onActivityCreated()-&gt;onStart()-&gt;onResume()</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android命令行装包：卸载之前的包再重新安装新包</title>
      <link href="2020/10/23/Android%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%A3%85%E5%8C%85%EF%BC%9A%E5%8D%B8%E8%BD%BD%E4%B9%8B%E5%89%8D%E7%9A%84%E5%8C%85%E5%86%8D%E9%87%8D%E6%96%B0%E5%AE%89%E8%A3%85%E6%96%B0%E5%8C%85/"/>
      <url>2020/10/23/Android%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%A3%85%E5%8C%85%EF%BC%9A%E5%8D%B8%E8%BD%BD%E4%B9%8B%E5%89%8D%E7%9A%84%E5%8C%85%E5%86%8D%E9%87%8D%E6%96%B0%E5%AE%89%E8%A3%85%E6%96%B0%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p><strong>Android命令行装包：卸载之前的包再重新安装新包</strong></p><p>最近遇到早部分厂商手机（华为、小米、oppo、vivo等）中出现覆盖安装包无法安装现象，具体报错为：*<strong>系统已存在**<em>包名的包，请卸载后在安装。</em></strong><br>然而明明已经是卸载了，还是一直报错无法安装成功，很让人头疼。</p><p> adb uninstall “包名”<br> Success<br> adb install -r “新包的路径”.apk</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android scrollview里面放listview 滚动出现的问题：listview展示不全</title>
      <link href="2020/10/23/Android-scrollview%E9%87%8C%E9%9D%A2%E6%94%BElistview-%E6%BB%9A%E5%8A%A8%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%9Alistview%E5%B1%95%E7%A4%BA%E4%B8%8D%E5%85%A8/"/>
      <url>2020/10/23/Android-scrollview%E9%87%8C%E9%9D%A2%E6%94%BElistview-%E6%BB%9A%E5%8A%A8%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%9Alistview%E5%B1%95%E7%A4%BA%E4%B8%8D%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>问题</strong>：<br>scrollview中加LinearLayout，然后在LinearLayout中又加了listview；导致listview展示不全，只展示出一条数据。</p><p><strong>解决</strong>：<br>先写一个工具类</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package com.android.fmis.client.util;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> android.widget.ListAdapter;</span><br><span class="line"><span class="keyword">import</span> android.widget.ListView;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">ListHeightUtils</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> static <span class="built_in">void</span> setListViewHeightBasedOnChildren(ListView listView) &#123; </span><br><span class="line">          ListAdapter listAdapter = listView.getAdapter(); </span><br><span class="line">          <span class="keyword">if</span> (listAdapter == <span class="literal">null</span>) &#123; </span><br><span class="line">                  <span class="comment">// pre-condition </span></span><br><span class="line">                  <span class="keyword">return</span>; </span><br><span class="line">          &#125; </span><br><span class="line">          <span class="built_in">int</span> totalHeight = <span class="number">0</span>; </span><br><span class="line">          <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; listAdapter.getCount(); i++) &#123; </span><br><span class="line">                  View listItem = listAdapter.getView(i, <span class="literal">null</span>, listView); </span><br><span class="line">                  listItem.measure(<span class="number">0</span>, <span class="number">0</span>); </span><br><span class="line">                  totalHeight += listItem.getMeasuredHeight(); </span><br><span class="line">          &#125; </span><br><span class="line">          ViewGroup.LayoutParams params = listView.getLayoutParams(); </span><br><span class="line">          params.height = totalHeight + (listView.getDividerHeight() * (listAdapter.getCount() - <span class="number">1</span>)); </span><br><span class="line">          listView.setLayoutParams(params); </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在listview设置了adapter填充数据后调用此方法，重新设置一下listview的高度，就搞定了。</p><p><strong>于此同时会产生一些问题</strong></p><p>问题1：scrollview界面出来不是显示的最顶端【滚动条不是在最顶端】，   那么请在  listview填充后  这样设置</p><p>ScrollView s=(ScrollView)findViewById(R.id.scrollview1);<br>s.smoothScrollTo(0, 20);</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 监听应用「进入后台」「回到前台」的几种方式整理</title>
      <link href="2020/10/23/Android-%E7%9B%91%E5%90%AC%E5%BA%94%E7%94%A8%E3%80%8C%E8%BF%9B%E5%85%A5%E5%90%8E%E5%8F%B0%E3%80%8D%E3%80%8C%E5%9B%9E%E5%88%B0%E5%89%8D%E5%8F%B0%E3%80%8D%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%E6%95%B4%E7%90%86/"/>
      <url>2020/10/23/Android-%E7%9B%91%E5%90%AC%E5%BA%94%E7%94%A8%E3%80%8C%E8%BF%9B%E5%85%A5%E5%90%8E%E5%8F%B0%E3%80%8D%E3%80%8C%E5%9B%9E%E5%88%B0%E5%89%8D%E5%8F%B0%E3%80%8D%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><strong>需求</strong></p><blockquote><p>最近接到一个新的需求：用户把app切换到后台，再次切回到app界面的时候会被要求重新输入登陆密码，这一需求的设计主要是出于安全性考虑。</p></blockquote><blockquote><p>这里就需要监听app的状态，从而判断app当前处于前台还是后台，再对其做不同的逻辑处理即可。</p></blockquote><p><strong>方案一：利用ActivityLifecycleCallbacks监听所有activity的生命周期</strong></p><blockquote><p>解释下registerActivityLifecycleCallbacks这个方法，只要app中有一个activity的生命周期改变了就会调用registerActivityLifecycleCallbacks的相应方法.<br>比如说splashActivity走了onCreate方法，registerActivityLifecycleCallbacks的onActivityCreated也会被调用，括号中的参数activity就是splashActivity本身</p></blockquote><p>1.在application中注册监听方法，一般写在onCreate方法中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">private int countActivity = 0;</span><br><span class="line">//是否进入后台</span><br><span class="line">private boolean isBackground = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">    public void <span class="function"><span class="title">onCreate</span></span>() &#123;</span><br><span class="line">        super.onCreate();</span><br><span class="line">        //监听应用进入后台回到前台</span><br><span class="line">        initBackgroundCallBack();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>2.实现监听方法：具体实现onActivityStarted,onActivityStopped方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">private void <span class="function"><span class="title">initBackgroundCallBack</span></span>() &#123;</span><br><span class="line">        registerActivityLifecycleCallbacks(new <span class="function"><span class="title">ActivityLifecycleCallbacks</span></span>() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onActivityCreated(Activity activity, Bundle bundle) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onActivityStarted(Activity activity) &#123;</span><br><span class="line">                countActivity++;</span><br><span class="line">                <span class="keyword">if</span> (countActivity == 1 &amp;&amp; isBackground) &#123;</span><br><span class="line">                    Log.e(<span class="string">&quot;MyApplication&quot;</span>, <span class="string">&quot;onActivityStarted: 应用进入前台&quot;</span>);</span><br><span class="line">                    isBackground = <span class="literal">false</span>;</span><br><span class="line">                    //说明应用重新进入了前台</span><br><span class="line">                    Toast.makeText(MyApplication.this, <span class="string">&quot;应用进入前台&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onActivityResumed(Activity activity) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onActivityPaused(Activity activity) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onActivityStopped(Activity activity) &#123;</span><br><span class="line">                countActivity--;</span><br><span class="line">                <span class="keyword">if</span> (countActivity &lt;= 0 &amp;&amp; !isBackground) &#123;</span><br><span class="line">                    Log.e(<span class="string">&quot;MyApplication&quot;</span>, <span class="string">&quot;onActivityStarted: 应用进入后台&quot;</span>);</span><br><span class="line">                    isBackground = <span class="literal">true</span>;</span><br><span class="line">                    //说明应用进入了后台</span><br><span class="line">                    Toast.makeText(MyApplication.this, <span class="string">&quot;应用进入后台&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onActivitySaveInstanceState(Activity activity, Bundle bundle) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onActivityDestroyed(Activity activity) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>countActivity 是为了判断应用是否进入后台，当一个activity的调用onStart方法时countActivity就会+1，调用onStop方法时countActivity就会-1<br>当所有activity的countActivity都=0时，说明所有的activity都在后台，即整个应用都处于后台</p></blockquote><blockquote><p>isBackground 是为了判断应用是否在后台，如果应用在后台又被调用了onActivityStarted方法，说明应用从后台回到前台</p></blockquote><hr><p><strong>方案二：利用ActivityManager的RunningAppProcessInfo类</strong></p><blockquote><p>ActivityManager在整个系统里面起着非常重要的作用，主要为系统中运行着的activity交互提供接口，其中RunningAppProcessInfo类则封装了正在运行着的进程信息，当然也包含了正在运行的app的包名，因此我们可以activitymanager.getRunningAppProcesses()获取当前运行的app列表，对比自身的包名，来判断本身app是否处于前台运行。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * App前后台状态</span><br><span class="line">    */</span><br><span class="line">   public boolean isForeground = <span class="literal">false</span>;</span><br><span class="line">   </span><br><span class="line">   @Override</span><br><span class="line">   protected void <span class="function"><span class="title">onResume</span></span>() &#123;</span><br><span class="line">       ......</span><br><span class="line">       <span class="keyword">if</span> (isForeground == <span class="literal">false</span>) &#123;</span><br><span class="line">           //由后台切换到前台</span><br><span class="line">           isForeground = <span class="literal">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   protected void <span class="function"><span class="title">onPause</span></span>() &#123;</span><br><span class="line">       ......</span><br><span class="line">       <span class="keyword">if</span> (!isAppOnForeground()) &#123;</span><br><span class="line">           //由前台切换到后台</span><br><span class="line">           isForeground = <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   /**</span><br><span class="line">    * 判断app是否处于前台</span><br><span class="line">    *</span><br><span class="line">    * @<span class="built_in">return</span></span><br><span class="line">    */</span><br><span class="line">   public boolean <span class="function"><span class="title">isAppOnForeground</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">       ActivityManager activityManager = (ActivityManager) getApplicationContext()</span><br><span class="line">               .getSystemService(Context.ACTIVITY_SERVICE);</span><br><span class="line">       String packageName = getApplicationContext().getPackageName();</span><br><span class="line">       /**</span><br><span class="line">        * 获取Android设备中所有正在运行的App</span><br><span class="line">        */</span><br><span class="line">       List&lt;RunningAppProcessInfo&gt; appProcesses = activityManager</span><br><span class="line">               .getRunningAppProcesses();</span><br><span class="line">       <span class="keyword">if</span> (appProcesses == null)</span><br><span class="line">           <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (RunningAppProcessInfo appProcess : appProcesses) &#123;</span><br><span class="line">           // The name of the process that this object is associated with.</span><br><span class="line">           <span class="keyword">if</span> (appProcess.processName.equals(packageName)</span><br><span class="line">                   &amp;&amp; appProcess.importance == RunningAppProcessInfo.IMPORTANCE_FOREGROUND) &#123;</span><br><span class="line">               <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过ActivityManager来获取当前运行的app列表，然后判断我们的app是否处于前台，能基本达到我们的预期需求。但如果将上面代码放到每一个activity，或者activity基类里面，这消耗还是挺大的。而且而且，ActivityManager通过.getRunningAppProcesses()获取当前运行列表这个方法，在5.0以后已经被deprecated掉了</p></blockquote><hr><p><strong>参考文献</strong></p><p>1.<a href="https://www.cnblogs.com/zhujiabin/p/9336663.html">Android 监听APP进入后台或切换到前台方案对比</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android自定义permission android:protectionLevel介绍</title>
      <link href="2020/10/23/Android%E8%87%AA%E5%AE%9A%E4%B9%89permission-android-protectionLevel%E4%BB%8B%E7%BB%8D/"/>
      <url>2020/10/23/Android%E8%87%AA%E5%AE%9A%E4%B9%89permission-android-protectionLevel%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p><strong>Android protectionLevel分4个级别：</strong></p><ul><li>normal</li><li>dangerous</li><li>signature</li><li>signatureOrSystem</li></ul><blockquote><p>如果定义的是normal或者dangerous：我们自己的应用需要去访问其对应受保护的资源时只需要在androidManifest.xml中<strong>添加相同的权限uses-permission</strong></p></blockquote><blockquote><p>如果是signature：不仅需要<strong>添加相同的权限</strong>， 必须同时<strong>具有相同的签名</strong>。</p></blockquote><blockquote><p>如果是signatureOrSystem（这种权限的应用第三方的应用无法单独访问）：不仅要有<strong>相同的签名</strong>，而且签名必须是<strong>系统签名</strong>，此外可能还需要android:sharedUserId=”android.uid.system”。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> android:protectionLevel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android四大组件：BroadcastReceiver</title>
      <link href="2020/10/23/Android%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%EF%BC%9ABroadcastReceiver/"/>
      <url>2020/10/23/Android%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%EF%BC%9ABroadcastReceiver/</url>
      
        <content type="html"><![CDATA[<p><strong>1. 定义</strong></p><blockquote><p>BroadcastReceiver即 广播，是一个全局的监听器，属于Android四大组件之一<br>广播分为两个角色：广播发送者、广播接收者</p></blockquote><p><strong>2. 作用</strong></p><blockquote><p>监听 / 接收 应用 App 发出的广播消息，并 做出响应</p></blockquote><p><strong>3. 应用场景</strong></p><blockquote><ul><li>Android不同组件间的通信（含 ：应用内 / 不同应用之间）</li><li>多线程通信</li><li>与 Android 系统在特定情况下的通信（如：电话呼入时、网络可用时）</li></ul></blockquote><p><strong>4. 实现原理</strong></p><p><img  src="https://img-blog.csdnimg.cn/20201020195205200.png#pic_center"  ><span class="image-caption">在这里插入图片描述</span></p><p>​—</p><p><strong>5. 使用流程</strong></p><p><strong>5.1 自定义广播接收者BroadcastReceiver</strong></p><ul><li>继承BroadcastReceivre基类</li><li>必须复写抽象方法onReceive()方法</li></ul><blockquote><p>1.广播接收器接收到相应广播后，会自动回调 onReceive() 方法<br>2.一般情况下，onReceive方法会涉及 与 其他组件之间的交互，如发送Notification、启动Service等<br>3.默认情况下，广播接收器运行在 UI 线程，因此，onReceive()方法不能执行耗时操作，否则将导致ANR</p></blockquote><ul><li>代码范例</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承BroadcastReceivre基类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mBroadcastReceiver</span> <span class="title">extends</span> <span class="title">BroadcastReceiver</span> &#123;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 复写onReceive()方法</span></span><br><span class="line">  <span class="comment">// 接收到广播后，则自动调用该方法</span></span><br><span class="line">  @Override</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//写入接收广播后的操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>5.2 广播接收器注册</strong></p><p>注册的方式分为两种：<strong>静态注册</strong>、<strong>动态注册</strong></p><p><strong>5.2.1 静态注册</strong></p><ul><li>注册方式：在AndroidManifest.xml里通过<receive>标签声明</li><li>属性说明：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;receiver </span><br><span class="line">    android:enabled=[<span class="string">&quot;true&quot;</span> | <span class="string">&quot;false&quot;</span>]</span><br><span class="line"><span class="comment">//此broadcastReceiver能否接收其他App的发出的广播</span></span><br><span class="line"><span class="comment">//默认值是由receiver中有无intent-filter决定的：如果有intent-filter，默认值为true，否则为false</span></span><br><span class="line">    android:exported=[<span class="string">&quot;true&quot;</span> | <span class="string">&quot;false&quot;</span>]</span><br><span class="line">    android:icon=<span class="string">&quot;drawable resource&quot;</span></span><br><span class="line">    android:label=<span class="string">&quot;string resource&quot;</span></span><br><span class="line"><span class="comment">//继承BroadcastReceiver子类的类名</span></span><br><span class="line">    android:name=<span class="string">&quot;.mBroadcastReceiver&quot;</span></span><br><span class="line"><span class="comment">//具有相应权限的广播发送者发送的广播才能被此BroadcastReceiver所接收；</span></span><br><span class="line">    android:permission=<span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="comment">//BroadcastReceiver运行所处的进程</span></span><br><span class="line"><span class="comment">//默认为app的进程，可以指定独立的进程</span></span><br><span class="line"><span class="comment">//注：Android四大基本组件都可以通过此属性指定自己的独立进程</span></span><br><span class="line">    android:process=<span class="string">&quot;string&quot;</span> &gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于指定此广播接收器将接收的广播类型</span></span><br><span class="line"><span class="comment">//本示例中给出的是用于接收网络状态改变时发出的广播</span></span><br><span class="line"> &lt;intent-filter&gt;</span><br><span class="line">&lt;action android:name=<span class="string">&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;</span> /&gt;</span><br><span class="line">    &lt;/intent-filter&gt;</span><br><span class="line">&lt;/receiver&gt;</span><br></pre></td></tr></table></figure><ul><li>注册示例</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;receiver </span><br><span class="line">    <span class="comment">//此广播接收者类是mBroadcastReceiver</span></span><br><span class="line">    android:name=<span class="string">&quot;.mBroadcastReceiver&quot;</span> &gt;</span><br><span class="line">    <span class="comment">//用于接收网络状态改变时发出的广播</span></span><br><span class="line">    &lt;intent-filter&gt;</span><br><span class="line">        &lt;action android:name=<span class="string">&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;</span> /&gt;</span><br><span class="line">    &lt;/intent-filter&gt;</span><br><span class="line">&lt;/receiver&gt;</span><br></pre></td></tr></table></figure><p>当此 App首次启动时，系统会自动实例化mBroadcastReceiver类，并注册到系统中。</p><p><strong>5.2.2 动态注册</strong></p><ul><li>注册方式：在代码中调用Context.registerReceiver（）方法</li><li>具体代码如下：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 选择在Activity生命周期方法中的onResume()中注册</span></span><br><span class="line">@Override</span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span></span>&#123;</span><br><span class="line">      super.onResume();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 实例化BroadcastReceiver子类 &amp;  IntentFilter</span></span><br><span class="line">     mBroadcastReceiver mBroadcastReceiver = <span class="keyword">new</span> mBroadcastReceiver();</span><br><span class="line">     IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 设置接收广播的类型</span></span><br><span class="line">    intentFilter.addAction(android.net.conn.CONNECTIVITY_CHANGE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 动态注册：调用Context的registerReceiver（）方法</span></span><br><span class="line">     registerReceiver(mBroadcastReceiver, intentFilter);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册广播后，要在相应位置记得销毁广播</span></span><br><span class="line"><span class="comment">// 即在onPause() 中unregisterReceiver(mBroadcastReceiver)</span></span><br><span class="line"><span class="comment">// 当此Activity实例化时，会动态将MyBroadcastReceiver注册到系统中</span></span><br><span class="line"><span class="comment">// 当此Activity销毁时，动态注册的MyBroadcastReceiver将不再接收到相应的广播。</span></span><br><span class="line"> @Override</span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     super.onPause();</span><br><span class="line">      <span class="comment">//销毁在onResume()方法中的广播</span></span><br><span class="line">     unregisterReceiver(mBroadcastReceiver);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特别注意</strong></p><ul><li>动态广播最好在Activity 的 onResume()注册、onPause()注销。</li><li>对于动态广播，有注册就必然得有注销，否则会导致内存泄露。</li></ul><p><strong>5.2.3 两种注册方式的区别</strong></p><p><img  src="https://img-blog.csdnimg.cn/20201020200118345.png#pic_center"  ><span class="image-caption">在这里插入图片描述</span><br><strong>5.3 广播发送者向AMS发送广播</strong></p><p><strong>5.3.1 广播的发送</strong></p><blockquote><ul><li>广播 是 用”意图（Intent）“标识</li><li>定义广播的本质 = 定义广播所具备的“意图（Intent）”</li><li>广播发送 = 广播发送者 将此广播的“意图（Intent）”通过sendBroadcast（）方法发送出去</li></ul></blockquote><p><strong>5.3.2 广播的类型</strong></p><blockquote><p>广播的类型主要分为5类：</p><ul><li>普通广播（Normal Broadcast）</li><li>系统广播（System Broadcast）</li><li>有序广播（Ordered Broadcast）</li><li>粘性广播（Sticky Broadcast）</li><li>App应用内广播（Local Broadcast）</li></ul></blockquote><p><strong>1. 普通广播（Normal Broadcast）</strong></p><p>即 开发者自身定义 intent的广播（最常用）。发送广播使用如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line"><span class="comment">//对应BroadcastReceiver中intentFilter的action</span></span><br><span class="line">intent.setAction(BROADCAST_ACTION);</span><br><span class="line"><span class="comment">//发送广播</span></span><br><span class="line">sendBroadcast(intent);</span><br></pre></td></tr></table></figure><ul><li>若被注册了的广播接收者中注册时intentFilter的action与上述匹配，则会接收此广播（即进行回调onReceive()）。如下mBroadcastReceiver则会接收上述广播</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;receiver </span><br><span class="line">    <span class="comment">//此广播接收者类是mBroadcastReceiver</span></span><br><span class="line">    android:name=<span class="string">&quot;.mBroadcastReceiver&quot;</span> &gt;</span><br><span class="line">    <span class="comment">//用于接收网络状态改变时发出的广播</span></span><br><span class="line">    &lt;intent-filter&gt;</span><br><span class="line">        &lt;action android:name=<span class="string">&quot;BROADCAST_ACTION&quot;</span> /&gt;</span><br><span class="line">    &lt;/intent-filter&gt;</span><br><span class="line">&lt;/receiver&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>若发送广播有相应权限，那么广播接收者也需要相应权限</strong></li></ul><p>​</p><p><strong>2. 系统广播（System Broadcast）</strong></p><p><strong>3.有序广播（Ordered Broadcast）</strong></p><p><strong>4.App应用内广播（Local Broadcast）</strong></p><hr><p><strong>2.3.4.类型的广播用法详见：</strong></p><p> <a href="https://www.jianshu.com/p/ca3d87a4cdf3">Android四大组件：BroadcastReceiver史上最全面解析</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/10/22/hello-world/"/>
      <url>2020/10/22/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
