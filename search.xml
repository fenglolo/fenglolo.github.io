<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mac通过命令行编辑保存文件</title>
      <link href="2020/11/09/Mac%E9%80%9A%E8%BF%87%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%BC%96%E8%BE%91%E4%BF%9D%E5%AD%98%E6%96%87%E4%BB%B6/"/>
      <url>2020/11/09/Mac%E9%80%9A%E8%BF%87%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%BC%96%E8%BE%91%E4%BF%9D%E5%AD%98%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p><strong>1.</strong> cd 文件所在目录</p><p><strong>2.</strong> vi 文件名.文件后缀</p><p><strong>3.</strong> 输入i，进入insert模式编辑文本</p><p><strong>4.</strong> esc退出插入模式</p><p><strong>5.</strong> shift + ：wq 保存文件并退出文本编辑模式</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android 内存泄漏「检测工具」之——LeakCanary2.0</title>
      <link href="2020/10/23/Android-%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E3%80%8C%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7%E3%80%8D%E4%B9%8B%E2%80%94%E2%80%94LeakCanary2-0/"/>
      <url>2020/10/23/Android-%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E3%80%8C%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7%E3%80%8D%E4%B9%8B%E2%80%94%E2%80%94LeakCanary2-0/</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong></p><blockquote><p>在Android的性能优化中，内存优化是必不可少的点，而内存优化最重要的一点就是解决内存泄漏的问题，在Android的内存泄漏分析工具也不少，比如PC端的有：AndroidStudio自带的Android Profiler、MAT等工具；手机端也有，就是我们今天要介绍的LeakCanary</p></blockquote><p><strong>LeakCanary2.0原理</strong></p><p>详见<a href="https://github.com/square/leakcanary/tree/v2.5">LeakCanary官网文档</a></p><p><strong>LeakCanary2.0使用</strong></p><p> <strong>1. 集成</strong></p><p> LeakCanary2.0只需要在build.gradle中添加依赖即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies&#123;</span><br><span class="line">// debugImplementation because LeakCanary should only run <span class="keyword">in</span> debug builds.</span><br><span class="line">debugImplementation <span class="string">&#x27;com.squareup.leakcanary:leakcanary-android:2.4&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>官方给出的这种依赖方式，是为了<strong>防止在release环境中使用LeakCanary</strong>。</p><p>一般开发我们会有debug和release两种buildType，但是如果你想额外创建一个buildType也是可以的，也可以为这个buildType单独设置LeakCanary2.0的依赖。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            debuggable <span class="literal">false</span> //是否开启debug模式</span><br><span class="line">            ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        debug &#123;</span><br><span class="line">            debuggable <span class="literal">true</span> //是否开启debug模式</span><br><span class="line">            ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        debug2 &#123;//新建的一个buildType</span><br><span class="line">            debuggable <span class="literal">true</span> //是否开启debug模式</span><br><span class="line">            ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>为debug2单独设置LeakCanary2.0：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies&#123;</span><br><span class="line">debug2Implementation <span class="string">&#x27;com.squareup.leakcanary:leakcanary-android:2.4&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.确认LeakCanary是否运行</strong></p><p>在LogCat控制台查看如下日志确认LeakCanary已经运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D LeakCanary: LeakCanary is running and ready to detect leaks</span><br></pre></td></tr></table></figure><p><strong>参考文献</strong><br>1、<a href="https://www.jianshu.com/p/261e70f3083f">LeakCanary原理解析</a><br>2、<a href="https://www.jianshu.com/p/3b429c38e73e">LeakCanary2.0使用及原理分析</a><br>3、<a href="https://blog.csdn.net/weixin_43771048/article/details/105403750">leakcanary以及leakcanary2.0使用方法总结</a><br>4、<a href="https://blog.csdn.net/ahou2468/article/details/106973416">内存分析工具之LeakCanary2.4使用整理</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android monkey测试adb命令</title>
      <link href="2020/10/23/Android-monkey%E6%B5%8B%E8%AF%95adb%E5%91%BD%E4%BB%A4/"/>
      <url>2020/10/23/Android-monkey%E6%B5%8B%E8%AF%95adb%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p><strong>Android monkey测试</strong></p><blockquote><p>通用monkey测试命令：<br>adb shell monkey<br>-p com.hoomsun.hxb（包名）<br>–throttle 100<br>–ignore-crashes（忽略崩溃可设置）<br>–ignore-timeouts （忽略超时可设置）<br>–ignore-security-exceptions（索引越界）<br>–ignore-native-crashes<br>–monitor-native-crashes -v -v -v 10000&gt;monkeysss.txt</p></blockquote><p><strong>一、理解monkey测试</strong></p><p>1、Monkey测试是Android自动化测试的一种手段。Monkey测试本身非常简单，就是模拟用户的按键输入，触摸屏输入，手势输入等，看设备多长时间会出异常。</p><p>2、当Monkey程序在模拟器或真实设备运行的时候，程序会产生一定数量或一定时间内的随机模拟用户操作的事件, 如点击，按键，手势等， 以及一些系统级别的事件。通常也称随机测试或者稳定性测试。</p><hr><p><strong>二、查看设备连接、包名、和入口Activity</strong></p><p>1、进入cmd查看设备连接状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure><p>2、查看包名、和入口Activity</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">进入<span class="built_in">cd</span> D:\Program Files\adt-bundle-windows-x86_64-20130917\sdk\build-tools\android-4.3 </span><br><span class="line"></span><br><span class="line">目录下执行下条命令</span><br><span class="line">aapt  dump badging  apk安装包绝对路径</span><br></pre></td></tr></table></figure><hr><p><strong>三、运行monkey测试</strong></p><p>//不间断操作500次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell monkey -p 包名 -v 500 </span><br></pre></td></tr></table></figure><p>//每个操作间隔500ms，共执行100次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell  monkey -p 包名  -v-v --throttle  500 100</span><br></pre></td></tr></table></figure><p>//每个操作间隔100ms,共执行1000次 ，其中点击事件占比50%，轨迹50%                                                                            </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell monkey  -p  包名  -v-v --pct-touch  50  --pct-trackball 50 --throttle 100 1000</span><br></pre></td></tr></table></figure><p>//日志重定向到桌面文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell monkey  -p  包名  -v-v --pct-touch  50  --pct-trackball 50 --throttle 100 1000   &gt;C:\Users\xyp\Desktop\Android脚本\1.log</span><br></pre></td></tr></table></figure><p>//每个操作间隔500ms、崩溃、超时、许可错误继续执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell  monkey -p  包名   --throttle  500 --ignore-crashes --ignore-timeouts --ignore-security-exceptions --ignore-native-crashes --monitor-native-crashes -v-v-v  1000000&gt;C:\Users\xyp\Desktop\Android脚本\1.log</span><br></pre></td></tr></table></figure><hr><p><strong>四、停止monkey测试</strong></p><p>重新打开一个cmd窗口<br>进入adb shell<br>ps | grep monkey      //查找monkey进程<br>kill  进程号   //结束monkey</p><hr><p><strong>五、结果分析</strong></p><p>得到Monkey测试的log之后，我们可以通过几个关键词来判断测试是否通过。</p><p>1、<strong>Monkey finished</strong><br>用记事本打开LOG，查看log的最下端，是否有类似以下字段：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Network stats: elapsed time=3799ms (3799ms mobile, 0ms wifi, 0ms not connected)</span></span><br><span class="line">// Monkey finished</span><br></pre></td></tr></table></figure><p>这个字段表明本次的Monkey测试通过，没有异常</p><p>2、<strong>CRASH</strong><br>同样，在得到LOG后，搜索”CRASH”字段，如果搜索到有结果，则表明，在测试过程中，测试对象出现了报错现象，因此测试失败。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// CRASH: com.onekchi.downloadmanager (pid 12919)</span><br></pre></td></tr></table></figure><p>3、<strong>NOT RESPONDING</strong><br>在log中搜素该字段，如果有搜索有结果，则表示测试过程中，测试对象出现了进程无响应的现象，因此测试失败。</p><p>4、无法搜索到上述信息<br>出现这种情况，一般都是外界原因而非程序本身原因。比如测试过程中，电脑断电关机。或者测试过程中内存不足等等，结果作废，需要重新测试。</p><hr><p><strong>六、monkey说明</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">--throttle   时间间隔</span><br><span class="line">--ignore-crashes    忽略崩溃</span><br><span class="line">--ignore-timeouts  忽略超时</span><br><span class="line">--ignore-security-exceptions   忽略许可错误</span><br><span class="line">--ignore-native-crashes  忽略本地崩溃</span><br><span class="line">--monitor-native-crashes   监控本地崩溃</span><br><span class="line"> </span><br><span class="line">--pct-touch  触摸、点击</span><br><span class="line">--pct-motion 调整动作事件的百分比(动作事件由屏幕上某处的一个down事件、一系列的伪随机事件和一个up事件组成)</span><br><span class="line">--pct-trackball  调整轨迹事件的百分比(轨迹事件由一个或几个随机的移动组成，有时还伴随有点击)</span><br><span class="line">--pct-nav 调整“基本”导航事件的百分比(导航事件由来自方向输入设备的up/down/left/right组成)</span><br><span class="line"></span><br><span class="line">--pct-majornav 调整“主要”导航事件的百分比(这些导航事件通常引发图形界面中的动作，如：5-way键盘的中间按键、回退按键、菜单按键)</span><br><span class="line"></span><br><span class="line">--pct-syskeys 调整“系统”按键事件的百分比(这些按键通常被保留，由系统使用，如Home、Back、Start Call、End Call及音量控制键)</span><br><span class="line"></span><br><span class="line">--pct-appswitch 调整启动Activity的百分比。在随机间隔里，Monkey将执行一个startActivity()调用，作为最大程度覆盖包中全部Activity的一种方法</span><br><span class="line"></span><br><span class="line">--pct-flip 调整“键盘翻转”事件的百分比。</span><br><span class="line"></span><br><span class="line">--pct-anyevent 调整其它类型事件的百分比。它包罗了所有其它类型的事件，如：按键、其它不常用的设备按钮、等等</span><br></pre></td></tr></table></figure><p>注意：各事件类型的百分比总数不能超过100%。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mac安装adb工具</title>
      <link href="2020/10/23/mac%E5%AE%89%E8%A3%85adb%E5%B7%A5%E5%85%B7/"/>
      <url>2020/10/23/mac%E5%AE%89%E8%A3%85adb%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p><strong>homebrew</strong>是macOS的一个包管理工具</p><p>1、安装homebrew</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>2、安装adb</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install android-platform-tools</span><br></pre></td></tr></table></figure><p>3、运行adb</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>点击非Edittext触发EditText焦点和自动弹出软键盘</title>
      <link href="2020/10/23/%E7%82%B9%E5%87%BB%E9%9D%9EEdittext%E8%A7%A6%E5%8F%91EditText%E7%84%A6%E7%82%B9%E5%92%8C%E8%87%AA%E5%8A%A8%E5%BC%B9%E5%87%BA%E8%BD%AF%E9%94%AE%E7%9B%98/"/>
      <url>2020/10/23/%E7%82%B9%E5%87%BB%E9%9D%9EEdittext%E8%A7%A6%E5%8F%91EditText%E7%84%A6%E7%82%B9%E5%92%8C%E8%87%AA%E5%8A%A8%E5%BC%B9%E5%87%BA%E8%BD%AF%E9%94%AE%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong></p><blockquote><p>最近做项目时遇到要求点击非EditText时，使该EditText获取焦点并自动弹出软键盘的需求。由于一般情况下我们点击EditText时会自动弹出系统键盘，而对与点击其他button触发EditText的弹出键盘没做过，于是记录下。</p></blockquote><blockquote><p>实用场景<br>1、点击button时，触发EditText的获取焦点和自动弹出软键盘<br>2、点击某个话题的选项卡，会弹出一个popupwindow，或开启新的ACTIVITY。里面有诸如 评论、回复的选项，你点击这个选项的时候，需要定位到EditText编辑框，并且自动弹出输入法。</p></blockquote><p><strong>方法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">editText.requestFocus();</span><br><span class="line">InputMethodManager imm = (InputMethodManager) login_phone_et.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);</span><br><span class="line"><span class="keyword">if</span> (null != imm) &#123;</span><br><span class="line">imm.toggleSoftInput(0, InputMethodManager.SHOW_FORCED);</span><br><span class="line">&#125;          </span><br></pre></td></tr></table></figure><p>1、通过requestFocus();获取焦点；<br>2、通过InputMethodManager强制弹出键盘；</p><p><strong>参考文献</strong></p><p>1、<a href="https://www.jianshu.com/p/6f09de9e903b">事件触发EditText焦点和自动弹出键盘以及InputMethodManager输入法简</a>介</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android 获取屏幕、状态栏、标题栏的高度详解</title>
      <link href="2020/10/23/Android-%E8%8E%B7%E5%8F%96%E5%B1%8F%E5%B9%95%E3%80%81%E7%8A%B6%E6%80%81%E6%A0%8F%E3%80%81%E6%A0%87%E9%A2%98%E6%A0%8F%E7%9A%84%E9%AB%98%E5%BA%A6%E8%AF%A6%E8%A7%A3/"/>
      <url>2020/10/23/Android-%E8%8E%B7%E5%8F%96%E5%B1%8F%E5%B9%95%E3%80%81%E7%8A%B6%E6%80%81%E6%A0%8F%E3%80%81%E6%A0%87%E9%A2%98%E6%A0%8F%E7%9A%84%E9%AB%98%E5%BA%A6%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong></p><blockquote><p>如下图：<br>绿色区域：屏幕区域<br>蓝色区域：状态栏区域<br>红色区域：标题栏区域<br>黄色区域：view绘制区域</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200928204537168.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>1.Android手机屏幕的高度（绿色区域）</strong></p><p>方法一</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DisplayMetrics dm = new DisplayMetrics();</span><br><span class="line">getWindowManager().getDefaultDisplay().getMetrics(dm);</span><br><span class="line">Log.e(<span class="string">&quot;TAG&quot;</span>, <span class="string">&quot;屏幕高:&quot;</span> + dm.heightPixels);</span><br></pre></td></tr></table></figure><p>方法二</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DisplayMetrics displayMetrics = getResources().getDisplayMetrics();</span><br><span class="line">Log.e(<span class="string">&quot;TAG&quot;</span>,<span class="string">&quot;screenHeight&quot;</span>+displayMetrics.heightPixels);</span><br></pre></td></tr></table></figure><hr><p><strong>2.Android手机状态栏的高度（蓝色区域）</strong></p><p>方法一</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int statusBarHeight1 = -1;</span><br><span class="line">//获取status_bar_height资源的ID</span><br><span class="line">int resourceId = getResources().getIdentifier(<span class="string">&quot;status_bar_height&quot;</span>, <span class="string">&quot;dimen&quot;</span>, <span class="string">&quot;android&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (resourceId &gt; 0) &#123;</span><br><span class="line">//根据资源ID获取响应的尺寸值</span><br><span class="line">statusBarHeight1 = getResources().getDimensionPixelSize(resourceId);</span><br><span class="line">&#125;</span><br><span class="line">Log.e(<span class="string">&quot;TAG&quot;</span>, <span class="string">&quot;方法1:&quot;</span> + statusBarHeight1); </span><br></pre></td></tr></table></figure><p>方法二：通过反射</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int statusBarHeight2 = -1;</span><br><span class="line">try &#123;</span><br><span class="line">Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.android.internal.R<span class="variable">$dimen</span>&quot;</span>);</span><br><span class="line">Object object = clazz.newInstance();</span><br><span class="line">    int height = Integer.parseInt(clazz.getField(<span class="string">&quot;status_bar_height&quot;</span>)</span><br><span class="line">       .get(object).toString());</span><br><span class="line"> statusBarHeight2 = getResources().getDimensionPixelSize(height);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">Log.e(<span class="string">&quot;TAG&quot;</span>, <span class="string">&quot;方法2:&quot;</span> + statusBarHeight2); </span><br></pre></td></tr></table></figure><p>方法三：状态栏高度 = 屏幕高度 - 应用区高度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//屏幕</span><br><span class="line">DisplayMetrics dm = new DisplayMetrics();</span><br><span class="line">getWindowManager().getDefaultDisplay().getMetrics(dm);</span><br><span class="line">//应用区域</span><br><span class="line">Rect outRect1 = new Rect();</span><br><span class="line">getWindow().getDecorView().getWindowVisibleDisplayFrame(outRect1);</span><br><span class="line">//状态栏高度=屏幕高度-应用区域高度</span><br><span class="line">int statusBar = dm.heightPixels - outRect1.height(); </span><br><span class="line">Log.e(<span class="string">&quot;TAG&quot;</span>, <span class="string">&quot;方法3:&quot;</span> + statusBar);</span><br></pre></td></tr></table></figure><hr><p><strong>3.Android手机应用区域（红+黄区域）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//应用区域</span><br><span class="line">Rect outRect1 = new Rect();</span><br><span class="line">getWindow().getDecorView().getWindowVisibleDisplayFrame(outRect1);</span><br><span class="line">Log.e(<span class="string">&quot;TAG&quot;</span>, <span class="string">&quot;应用区高&quot;</span> + outRect1.height());</span><br></pre></td></tr></table></figure><hr><p><strong>4.Android手机标题高度（红色区域）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int viewTop = getWindow().findViewById(Window.ID_ANDROID_CONTENT).getTop();</span><br><span class="line">Log.e(<span class="string">&quot;TAG&quot;</span>, <span class="string">&quot;标题栏：&quot;</span> + viewTop);</span><br></pre></td></tr></table></figure><hr><p><strong>5.Android手机绘制区域高度(黄色区域)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Rect outRect2 = new Rect();</span><br><span class="line">getWindow().findViewById(Window.ID_ANDROID_CONTENT).getDrawingRect(outRect2);</span><br><span class="line">Log.e(<span class="string">&quot;TAG&quot;</span>, <span class="string">&quot;View绘制区域高度：&quot;</span> + outRect2.height());</span><br></pre></td></tr></table></figure><hr><p><strong>参考文献</strong></p><p><a href="https://www.zhangshengrong.com/p/K2EaEAdaMn/">Android如何获取屏幕、状态栏及标题栏的高度详解</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android 硬件加速 4种方式</title>
      <link href="2020/10/23/Android-%E7%A1%AC%E4%BB%B6%E5%8A%A0%E9%80%9F-4%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>2020/10/23/Android-%E7%A1%AC%E4%BB%B6%E5%8A%A0%E9%80%9F-4%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><strong>前言：</strong></p><blockquote><p>硬件加速可以在一下四个级别开启或关闭：<br>（1）Application<br>（2）Activity<br>（3）Window<br>（4）View</p></blockquote><p><strong>1、Application级别</strong></p><p>在应用程序AndroidManifest.xml文件为application标签添加如下的属性即可为整个应用程序开启硬件加速：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;application android:hardwareAccelerated=<span class="string">&quot;true&quot;</span> ...&gt;</span><br></pre></td></tr></table></figure><p><strong>2、Activity级别</strong></p><p>可以控制每个activity是否开启硬件加速，只需在activity元素中添加<strong>android:hardwareAccelerated属性</strong>即可办到。<br>比如下面的例子，在application级别开启硬件加速，但在某个activity上关闭硬件加速。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;application </span><br><span class="line">android:hardwareAccelerated=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">&lt;activity ... /&gt;</span><br><span class="line">&lt;activity android:hardwareAccelerated=<span class="string">&quot;false&quot;</span> /&gt;</span><br><span class="line">&lt;/application&gt;</span><br></pre></td></tr></table></figure><p><strong>3、Window级别</strong></p><p>如果需要更小粒度的控制，可以使用如下代码开启某个window的硬件加速：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getWindow().setFlags(</span><br><span class="line">WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED,</span><br><span class="line">WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);</span><br></pre></td></tr></table></figure><p>4、View级别</p><p>可以在运行时用以下的代码关闭单个view的硬件加速：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">testView.setLayerType(View.LAYER_TYPE_SOFTWARE, null);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android 全面屏显示\沉浸式状态栏</title>
      <link href="2020/10/23/Android-%E5%85%A8%E9%9D%A2%E5%B1%8F%E6%98%BE%E7%A4%BA-%E6%B2%89%E6%B5%B8%E5%BC%8F%E7%8A%B6%E6%80%81%E6%A0%8F/"/>
      <url>2020/10/23/Android-%E5%85%A8%E9%9D%A2%E5%B1%8F%E6%98%BE%E7%A4%BA-%E6%B2%89%E6%B5%B8%E5%BC%8F%E7%8A%B6%E6%80%81%E6%A0%8F/</url>
      
        <content type="html"><![CDATA[<p><strong>前言：</strong></p><p>之前做项目为了达到全面屏显示，设置了一个theme主题样式，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 应用全屏样式 --&gt;</span><br><span class="line">   &lt;style name=<span class="string">&quot;AppFullWindowTheme&quot;</span> parent=<span class="string">&quot;AppTheme&quot;</span>&gt;</span><br><span class="line">       &lt;item name=<span class="string">&quot;android:windowFullscreen&quot;</span>&gt;<span class="literal">true</span>&lt;/item&gt;</span><br><span class="line">   &lt;/style&gt;</span><br></pre></td></tr></table></figure><blockquote><p>但是在部分手机上会出现一个坑爹的现象：<strong>虽然状态栏隐藏了，但是原状态栏位置上会被黑条占领。</strong>（没错，就是在万恶的小米手机上出现了…）</p></blockquote><p><strong>解决方案：</strong></p><p><strong>方案1:在代码中设置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">WindowManager.LayoutParams lp = activity.getWindow().getAttributes();</span><br><span class="line">            lp.layoutInDisplayCutoutMode = WindowManager.LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES;</span><br><span class="line">            activity.getWindow().setAttributes(lp);</span><br><span class="line">            </span><br><span class="line">            View decorView = activity.getWindow().getDecorView();</span><br><span class="line">            int systemUiVisibility = decorView.getSystemUiVisibility();</span><br><span class="line">            int flags =View.SYSTEM_UI_FLAG_HIDE_NAVIGATION//隐藏导航栏</span><br><span class="line">                    | View.SYSTEM_UI_FLAG_FULLSCREEN;//隐藏状态栏</span><br><span class="line">            systemUiVisibility |= flags;</span><br><span class="line">            </span><br><span class="line">            activity.getWindow().getDecorView().setSystemUiVisibility(systemUiVisibility);</span><br></pre></td></tr></table></figure><p><strong>方案2:在xml中设置theme</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style name=<span class="string">&quot;AppFullTheme&quot;</span> parent=<span class="string">&quot;AppTheme&quot;</span>&gt;</span><br><span class="line">        &lt;item name=<span class="string">&quot;android:windowTranslucentNavigation&quot;</span>&gt;<span class="literal">true</span>&lt;/item&gt;</span><br><span class="line">        &lt;item name=<span class="string">&quot;android:windowLayoutInDisplayCutoutMode&quot;</span>&gt;shortEdges&lt;/item&gt;</span><br><span class="line">        &lt;item name=<span class="string">&quot;android:windowFullscreen&quot;</span>&gt;<span class="literal">true</span>&lt;/item&gt;</span><br><span class="line"> &lt;/style&gt;</span><br></pre></td></tr></table></figure><hr><p><strong>注解1:</strong> Android P版本为我们提供了解决方法，我们可以通过对Window设置layoutInDisplayCutoutMode来达到我们的目的，先来看一下layoutInDisplayCutoutMode的几种属性：</p><blockquote><p>LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT：默认情况下，全屏窗口不会使用到刘海区域，非全屏窗口可正常使用刘海区域<br>LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER：窗口不允许和刘海屏重叠<br>LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES<br>：该窗口始终允许延伸到屏幕短边上的DisplayCutout区域。</p></blockquote><p><strong>注解2:</strong> 了解一下几个设置沉浸式状态栏的基础属性：</p><blockquote><p>1.View.SYSTEM_UI_FLAG_LOW_PROFILE：低调模式, 会隐藏不重要的状态栏图标；<br>2.View.SYSTEM_UI_FLAG_HIDE_NAVIGATION：隐藏导航栏；<br>3.View.SYSTEM_UI_FLAG_FULLSCREEN：状态栏隐藏（高度不变）；<br>4.View.SYSTEM_UI_FLAG_LAYOUT_STABLE：保持整个View稳定, 常和控制System UI悬浮, 隐藏的Flags共用, 使View不会因为System UI的变化而重新layout；<br>5.View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION：视图延伸至导航栏区域，导航栏覆盖在视图之上（在style中设置windowTranslucentNavigation）；<br>6.View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN ：视图延伸至状态栏区域，状态栏覆盖在视图之上（在style中设置windowTranslucentStatus）；<br>7.View.SYSTEM_UI_FLAG_IMMERSIVE：配合2或3同时使用，假设同时设置了2和7，状态栏隐藏，此时在状态栏顶部下滑，系统清除2设置，重新唤出状态栏，导航栏同理，滑动方向为由下至上；<br>8.View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY：作用与7相似，但是设置并未被清楚，所以状态栏与导航栏在被唤出3s后或再次点击时，再次隐藏。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac 电脑查看本机的mac地址和ip地址</title>
      <link href="2020/10/23/Mac-%E7%94%B5%E8%84%91%E6%9F%A5%E7%9C%8B%E6%9C%AC%E6%9C%BA%E7%9A%84mac%E5%9C%B0%E5%9D%80%E5%92%8Cip%E5%9C%B0%E5%9D%80/"/>
      <url>2020/10/23/Mac-%E7%94%B5%E8%84%91%E6%9F%A5%E7%9C%8B%E6%9C%AC%E6%9C%BA%E7%9A%84mac%E5%9C%B0%E5%9D%80%E5%92%8Cip%E5%9C%B0%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<p><strong>Mac电脑：获取mac地址和ip地址</strong></p><p><strong>方法1：通过「命令行」获取</strong></p><blockquote><p>打开命令行，输入ifconfig，然后找到en0，找到ether对应的就是mac地址，找到inet对应的就是ip地址。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200917154730177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><strong>方法2：通过「查看关于本机信息」获取</strong></p><blockquote><p>打开关于本机 -&gt; 系统报告 -&gt; 左侧找到“WIFI” -&gt; 右边找到“en0”目录下的MAC地址</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200917152209953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200917152109908.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200917152233206.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>方法三：通过「系统偏好设置」获取</strong></p><blockquote><p>打开“系统偏好设置” -&gt; “网络” -&gt; “高级” -&gt; “TCP/IP”查看ip -&gt; “硬件”查看mac地址</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200917155927358.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200917155927139.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200917155927972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200917155927979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android 防止按钮多次重复点击之「防重复点击」</title>
      <link href="2020/10/23/Android-%E9%98%B2%E6%AD%A2%E6%8C%89%E9%92%AE%E5%A4%9A%E6%AC%A1%E9%87%8D%E5%A4%8D%E7%82%B9%E5%87%BB%E4%B9%8B%E3%80%8C%E9%98%B2%E9%87%8D%E5%A4%8D%E7%82%B9%E5%87%BB%E3%80%8D/"/>
      <url>2020/10/23/Android-%E9%98%B2%E6%AD%A2%E6%8C%89%E9%92%AE%E5%A4%9A%E6%AC%A1%E9%87%8D%E5%A4%8D%E7%82%B9%E5%87%BB%E4%B9%8B%E3%80%8C%E9%98%B2%E9%87%8D%E5%A4%8D%E7%82%B9%E5%87%BB%E3%80%8D/</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong></p><blockquote><p>为了防止“按钮”的点击事件在短时间内多次点击从而触发了多次处理操作；<br>比如：快速点击“登录按钮”发送了多次登录接口，导致程序在短时间内进行多次数据提交or数据处理，这样的体验就不太好了。</p></blockquote><p><strong>方法</strong></p><p>判断用户点击按钮间隔时间，如果间隔时间太短，则认为是无效操作，否则进行相关业务处理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 判断两次点击事件的间隔</span><br><span class="line"> */</span><br><span class="line">public class ClickHelper &#123;</span><br><span class="line">    private static long lastClickTime = 0;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 判断事件出发时间间隔是否超过预定值</span><br><span class="line">     * 如果小于间隔（目前是1000毫秒）则返回<span class="literal">true</span>，否则返回<span class="literal">false</span></span><br><span class="line">     */</span><br><span class="line">    public static boolean <span class="function"><span class="title">isFastDoubleClick</span></span>() &#123;</span><br><span class="line">        long time = System.currentTimeMillis();</span><br><span class="line">        long timeD = time - lastClickTime;</span><br><span class="line">        <span class="keyword">if</span> (0 &lt; timeD &amp;&amp; timeD &lt; 1000) &#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        lastClickTime = time;</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>调用demo</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">btn.setOnClickListener(new View.<span class="function"><span class="title">OnClickListener</span></span>() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onClick(View view) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (ClickHelper.isFastDoubleClick()) &#123;//连续点击</span><br><span class="line">                        <span class="built_in">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    ...//此处添加点击按钮后的触发事件处理</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>macOS Catalina(10.15.6)双网卡同时连内外网</title>
      <link href="2020/10/23/macOS-Catalina-10-15-6-%E5%8F%8C%E7%BD%91%E5%8D%A1%E5%90%8C%E6%97%B6%E8%BF%9E%E5%86%85%E5%A4%96%E7%BD%91/"/>
      <url>2020/10/23/macOS-Catalina-10-15-6-%E5%8F%8C%E7%BD%91%E5%8D%A1%E5%90%8C%E6%97%B6%E8%BF%9E%E5%86%85%E5%A4%96%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<p><strong>前提</strong></p><blockquote><p>使用网线连接内网，此时不能连接外网，无线可以连接外网，却又不能完成部分在内网才能完成的操作</p></blockquote><p><strong>1、修改无线网卡的优先级，使之大于有线网卡</strong></p><p><img src="https://img-blog.csdnimg.cn/20200916155335616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200916155349832.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><blockquote><p>进入系统偏好设置，网络，左下角的齿轮，更改服务顺序，拖动wifi到有线网卡上面就可以了（我的有线网卡是AX8817）</p><p>此时变成的状态是连着无线，插着网卡，以无线网卡优先，即上不了内网，可以上外网（苹果默认的是插上有线网络有线优先）</p></blockquote><p><strong>2、设置路由修改连接内网使用的网卡</strong></p><p>由于公司里内外网分两个路由，只需要修改前往公司内网地址的网关就可以了，比如你需要访问的内网地址是158.220.155.188和158.220.21.39，而公司的内网网关是158.223.13.254，那么就这样写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ sudo route delete -net 158.220.155.188 </span><br><span class="line"> </span><br><span class="line">$ sudo route -n add -net 158.220.155.188 158.223.13.254</span><br><span class="line"> </span><br><span class="line">$ sudo route delete -net 158.220.21.39</span><br><span class="line"> </span><br><span class="line">$ sudo route -n add -net 158.220.21.39 158.223.13.254</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 列出全部的路由信息</span></span><br><span class="line">$ sudo netstat -nr</span><br></pre></td></tr></table></figure><p>如果公司里内外网是一个路由，或者两个路由在同一个网段之内。此时需要有线网卡转发内网链接，无线网卡转发外网链接，写法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo route delete -net 158.220.155.188</span><br><span class="line"> </span><br><span class="line">$ sudo route add -net 158.220.155.188 -netmask 255.255.255.0 -interface en10</span><br></pre></td></tr></table></figure><p><strong>3、如何自动在每次启动的时候都切换到当前的路由表</strong></p><blockquote><p>当mac每次重启的时候，路由表都会被重置；或者拔了网线之后再连接网线，也会重置。<br>这时候避免每次我们都需要执行命令行，可以使用macOS里好用的小机器人 Automator来帮我们。<br><img src="https://img-blog.csdnimg.cn/20200916165627607.png#pic_center" alt="在这里插入图片描述"></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200916161739688.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>点击右上角的「运行」就OK了。</p><hr><p><strong>参考链接</strong></p><p><a href="https://www.jianshu.com/p/807883b2949f">Macbook利用双网卡同时连内外网</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android dp和px之间相互转换</title>
      <link href="2020/10/23/Android-dp%E5%92%8Cpx%E4%B9%8B%E9%97%B4%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/"/>
      <url>2020/10/23/Android-dp%E5%92%8Cpx%E4%B9%8B%E9%97%B4%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong></p><blockquote><p>android中在xml布局中我们可以使用dp和px都可以；<br>但是在代码中，很多方法只提供了设置px的方法，这时候就需要用到dp和px相互切换了。</p></blockquote><p><strong>方法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * dp和px之间进行转换</span><br><span class="line"> */</span><br><span class="line">public class DensityHelper &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 根据手机的分辨率从 dp 的单位 转成为 px(像素)</span><br><span class="line">     */</span><br><span class="line">    public static int dip2px(Context context, <span class="built_in">float</span> dpValue) &#123;</span><br><span class="line">        final <span class="built_in">float</span> scale = context.getResources().getDisplayMetrics().density;</span><br><span class="line">        <span class="built_in">return</span> (int) (dpValue * scale + 0.5f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据手机的分辨率从 px(像素) 的单位 转成为 dp</span><br><span class="line">     */</span><br><span class="line">    public static int px2dip(Context context, <span class="built_in">float</span> pxValue) &#123;</span><br><span class="line">        final <span class="built_in">float</span> scale = context.getResources().getDisplayMetrics().density;</span><br><span class="line">        <span class="built_in">return</span> (int) (pxValue / scale + 0.5f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android 限制EditText输入的文本行数为1</title>
      <link href="2020/10/23/Android-%E9%99%90%E5%88%B6EditText%E8%BE%93%E5%85%A5%E7%9A%84%E6%96%87%E6%9C%AC%E8%A1%8C%E6%95%B0%E4%B8%BA1/"/>
      <url>2020/10/23/Android-%E9%99%90%E5%88%B6EditText%E8%BE%93%E5%85%A5%E7%9A%84%E6%96%87%E6%9C%AC%E8%A1%8C%E6%95%B0%E4%B8%BA1/</url>
      
        <content type="html"><![CDATA[<p><strong>前言：</strong></p><p>android Edittext默认是可以换行的，但当我们用来作为输入账号、密码的时候，是希望它作为一行来展示，并不想让它可以换行。</p><hr><p><strong>方法1：</strong> 「不建议」</p><p>xml设置maxlines属性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:maxlines=<span class="string">&quot;1&quot;</span></span><br></pre></td></tr></table></figure><p>此属性设置为1，发现仅仅是显示1行，但按下回车仍然生效，可以换行输入。</p><hr><p><strong>方法2：</strong>「不建议」</p><p> xml设置singleLine属性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:singleLine=<span class="string">&quot;true&quot;</span></span><br></pre></td></tr></table></figure><p> 可以保证EditText为单行，但此方法在Android 7.0的环境下过期了</p><hr><p>**方法3:**「实用」</p><p>xml设置lines和inputType属性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android:inputType=<span class="string">&quot;text&quot;</span></span><br><span class="line">android:lines=<span class="string">&quot;1&quot;</span></span><br></pre></td></tr></table></figure><p>两项属性如上配置，可实现EditText输入框屏蔽回车键，按下回车键为换行的功能。</p><hr><p><strong>方法4:</strong></p><p>动态用addTextChangedListener去监听控件中文本的变化：</p><p>需要实现的函数有三个：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void beforeTextChanged(CharSequence A, int B, int C,int D)</span><br><span class="line"></span><br><span class="line">public void onTextChanged(CharSequence A, int B, int C, int D)</span><br><span class="line"></span><br><span class="line">public void afterTextChanged(Editable A)</span><br></pre></td></tr></table></figure><p>这个三个函数描述了editText控件的一次输入过程：</p><blockquote><p>beforeTextChanged 字符串A中从索引B位置开始的C个字符将被D个字符替换<br>onTextChanged 字符串A中从索引B位置开始的C个字符刚刚被D个字符替<br>afterTextChanged 控件中现在的字符</p></blockquote><p>这里beforeTextChanged ，onTextChanged 这两个函数中是不能对控件内容进行重新的设定的，但是afterTextChanged 是可以递归的，当然要能正确的结束递归过程。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">EditText.addTextChangedListener</span><br><span class="line">@Override</span><br><span class="line">    public void beforeTextChanged(CharSequence s, int start, int count,</span><br><span class="line">            int after) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onTextChanged(CharSequence s, int start, int before, int count) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void afterTextChanged(Editable s) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        int lines = editText.getLineCount();</span><br><span class="line">        // 限制最大输入行数</span><br><span class="line">        <span class="keyword">if</span> (lines &gt; MAXLINES) &#123;</span><br><span class="line">            String str = s.toString();</span><br><span class="line">            int cursorStart = editText.getSelectionStart();</span><br><span class="line">            int cursorEnd = editText.getSelectionEnd();</span><br><span class="line">            <span class="keyword">if</span> (cursorStart == cursorEnd &amp;&amp; cursorStart &lt; str.length() &amp;&amp; cursorStart &gt;= 1) &#123;</span><br><span class="line">                str = str.substring(0, cursorStart-1) + str.substring(cursorStart);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                str = str.substring(0, s.length()-1);</span><br><span class="line">            &#125;</span><br><span class="line">            // setText会触发afterTextChanged的递归</span><br><span class="line">            editText.setText(str);    </span><br><span class="line">            // setSelection用的索引不能使用str.length()否则会越界</span><br><span class="line">            editText.setSelection(editText.getText().length());</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MAC下Apktool、dex2jar、jd-gui的安装和反编译、回编译、重新签名简单使用</title>
      <link href="2020/10/23/MAC%E4%B8%8BApktool%E3%80%81dex2jar%E3%80%81jd-gui%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E5%8F%8D%E7%BC%96%E8%AF%91%E3%80%81%E5%9B%9E%E7%BC%96%E8%AF%91%E3%80%81%E9%87%8D%E6%96%B0%E7%AD%BE%E5%90%8D%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>2020/10/23/MAC%E4%B8%8BApktool%E3%80%81dex2jar%E3%80%81jd-gui%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E5%8F%8D%E7%BC%96%E8%AF%91%E3%80%81%E5%9B%9E%E7%BC%96%E8%AF%91%E3%80%81%E9%87%8D%E6%96%B0%E7%AD%BE%E5%90%8D%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>一、安装</strong></p><p><strong>1、安装Apktool</strong></p><p><strong>方法1：普通下载安装</strong></p><ul><li>下载<a href="https://ibotpeaches.github.io/Apktool/">Apktool</a></li><li>下载<a href="https://ibotpeaches.github.io/Apktool/install/">Apktool安装包脚本</a></li></ul><blockquote><p>macOS：<br>下载Mac 包装器脚本（右键单击，将链接另存为apktool）<br>下载apktool-2（在这里找到最新的）<br>将下载的jar重命名为 apktool.jar<br>将两个文件（apktool.jar＆apktool）移动到/usr/local/bin（需要root）<br>确保两个文件均可执行（chmod +x）<br>尝试apktool通过cli 运行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$：<span class="built_in">cd</span> /usr/<span class="built_in">local</span>/bin</span><br><span class="line">$：chmod +x apktool</span><br></pre></td></tr></table></figure><p><strong>方法2:使用homebrew安装</strong></p><blockquote><p>或者您可以通过Homebrew安装apktool ：<br>如本页所述安装Homebrew<br>brew install apktool在终端中执行命令（无需root）。最新版本将安装/usr/local/Cellar/apktool/[version]/并链接到/usr/local/bin/apktool。<br>尝试apktool通过cli 运行<br>注意 -包装脚本不是必需的，但很有用，因此您不必java -jar apktool.jar一遍又一遍地输入。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew install apktool</span><br><span class="line"><span class="comment"># 验证安装结果</span></span><br><span class="line">apktool -version </span><br></pre></td></tr></table></figure><p><strong>2、安装dex2jar</strong></p><blockquote><p>需要注意的是，假如使用dex2jar遇到<br>报错 com.googlecode.d2j.DexException: not support version。<br>则说明你安装的版本不兼容，所以尽量安装最新版本。</p></blockquote><p>下载地址：<a href="https://github.com/pxb1988/dex2jar/tree/2.1-nightly-28">https://github.com/pxb1988/dex2jar/tree/2.1-nightly-28</a></p><p><img src="https://img-blog.csdnimg.cn/20200907203734324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>点击右下角的<strong>Latest按钮</strong>，选择最新版本进行下载；</p><p><img src="https://img-blog.csdnimg.cn/20200907203918681.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>最后点击下载zip文件，解压就OK了。我比较懒，直接把dex2jar放在了桌面，也方便我使用。</p><p><strong>3、安装JD-GUI</strong></p><p>官网下载地址：<a href="http://java-decompiler.github.io/">http://java-decompiler.github.io/</a></p><p><img src="https://img-blog.csdnimg.cn/20200907204507177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>把app文件拖到Application文件夹下就ok了。</p><hr><p><strong>二、反编译流程</strong></p><p> 现在桌面上有一个demo.apk文件，我们复制一份，demo副本.apk<br>将副本文件名的后缀改为zip，即demo副本.zip</p><p> <strong>1. 获取xml反编译文件和smail代码</strong></p><p>启动终端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$：<span class="built_in">cd</span> /Users/apple/Desktop </span><br><span class="line">$：apktool d demo.apk</span><br></pre></td></tr></table></figure><blockquote><p>注意，demo.apk 要在控制台的当前目录下，因为demo.apk 在桌面，所以我先cd到了桌面的目录。</p></blockquote><blockquote><p>其中d是decode的意思，表示我们要对Demo.apk这个文件进行解码。那除了这个基本用法之外，我们还可以再加上一些附加参数来控制decode的更多行为：<br>· f 如果目标文件夹已存在，则强制删除现有文件夹（默认如果目标文件夹已存在，则解码失败）。<br>·o 指定解码目标文件夹的名称（默认使用APK文件的名字来命名目标文件夹。<br>·s 不反编译dex文件，也就是说classes.dex文件会被保留（默认会将dex文件解码成smali文件）。<br>·r 不反编译资源文件，也就是说resources.arsc文件会被保留（默认会将resources.arsc解码成具体的资源文件）。<br>常用用法就这么多了，那么上述命令的执行结果如下图所示：<br>原文链接：<a href="https://blog.csdn.net/u013082948/article/details/52195514">https://blog.csdn.net/u013082948/article/details/52195514</a></p></blockquote><p> <strong>2. 反编译calss.dex文件</strong></p><p>刚刚的demo副本.zip解压获得demo副本文件夹，进入文件夹后拷贝classes.dex(如果解压失败，换一个解压软件，不用系统自带的)</p><p>打开dex2jar 解压的目录，将classes.dex文件复制进去</p><p>由于我的dex2jar文件夹在桌面上，所以终端直接执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apple@fenglolodeMacBook-Pro ~ % <span class="built_in">cd</span> /Users/apple/Desktop/dex-tools-2.1 </span><br><span class="line">apple@fenglolodeMacBook-Pro dex-tools-2.1 % ./d2j-dex2jar.sh classes.dex</span><br></pre></td></tr></table></figure><p>如果没有执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apple@fenglolodeMacBook-Pro ~ % <span class="built_in">cd</span> /Users/apple/Desktop/dex-tools-2.1 </span><br><span class="line">apple@fenglolodeMacBook-Pro dex-tools-2.1 % chmod +x ./*</span><br><span class="line">apple@fenglolodeMacBook-Pro dex-tools-2.1 % ./d2j-dex2jar.sh classes.dex</span><br></pre></td></tr></table></figure><p>这个时候文件夹下回多出一个jar文件classes-dex2jar.jar</p><p> <strong>3. 查看jar文件代码</strong></p><p>打开 JD-GUI ，将 jar 拖拽到 JD-GUI 区域就可以看代码了（该代码是混淆之后的）</p><hr><p><strong>三、回编译流程</strong></p><p>以demo.apk通过 <strong>apktool d demo.apk</strong> 反编译生成的demo文件为例：<br>命令行窗口输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apktool b demo</span><br></pre></td></tr></table></figure><p>新生成的apk会在<strong>demo/dist/目录</strong>下面。<strong>若报错则输入apktool -r b name,资源文件不反编译，避免资源报错</strong></p><hr><p> <strong>四、apk 签名，打包</strong></p><p>命令行窗口输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jarsigner -verbose -keystore 签名文件名字 -signedjar newName.apk oldName.apk 签名文件名字</span><br><span class="line">输入密钥库的密码短语:</span><br></pre></td></tr></table></figure><blockquote><p>备注：<br>签名文件名字：如abc.keystore<br>newName.apk：签名后的apk的名字，可自定义<br>oldName.apk：需要被签名的apk的名字，如我的案例中应为demo.apk</p></blockquote><p>然后输入你的签名文件的密码就开始重新签名了，签名后的apk为你自定义的newName.apk。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>记录wget使用详解 &amp; Mac安装wget</title>
      <link href="2020/10/23/%E8%AE%B0%E5%BD%95wget%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3-Mac%E5%AE%89%E8%A3%85wget/"/>
      <url>2020/10/23/%E8%AE%B0%E5%BD%95wget%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3-Mac%E5%AE%89%E8%A3%85wget/</url>
      
        <content type="html"><![CDATA[<p><strong>一、记录wget使用详解</strong></p><p><strong>1、什么是wget</strong></p><p><a href="https://baike.baidu.com/item/wget">百度百科介绍的wget</a></p><p><strong>2、wget命令详解</strong></p><p>来自大牛<a href="https://www.cnblogs.com/sx66/">随性i</a>的文章介绍的<a href="https://www.cnblogs.com/sx66/p/11887022.html">wget命令详解</a></p><p><strong>二、Mac安装wget的两种方法</strong></p><p><strong>1、手动下载并终端安装</strong></p><ul><li>从<a href="ftp://ftp.gnu.org/gnu/wget/">ftp://ftp.gnu.org/gnu/wget/</a>下载到最新的wget安装包到本地</li><li>将解压的安装包放到自己想要保管的路径下，然后在终端进入对应的安装包位置，如果不知道文件的路径可查看文件的简介-位置 或者直接把文件拖进终端即可显示文件路径</li><li>打开终端，进入wget文件路径，然后在终端依次输入：./configure、  make  以及 make install 命令</li></ul><p><strong>2、直接终端使用homebrew安装</strong></p><ul><li><p>执行安装brew（<a href="https://brew.sh/index_zh-cn">homebrew官网地址</a>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>安装 wget</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install wget</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android Dialog 去掉透明遮罩层「全透明」</title>
      <link href="2020/10/23/Android-Dialog-%E5%8E%BB%E6%8E%89%E9%80%8F%E6%98%8E%E9%81%AE%E7%BD%A9%E5%B1%82%E3%80%8C%E5%85%A8%E9%80%8F%E6%98%8E%E3%80%8D/"/>
      <url>2020/10/23/Android-Dialog-%E5%8E%BB%E6%8E%89%E9%80%8F%E6%98%8E%E9%81%AE%E7%BD%A9%E5%B1%82%E3%80%8C%E5%85%A8%E9%80%8F%E6%98%8E%E3%80%8D/</url>
      
        <content type="html"><![CDATA[<p>dialog即使设置透明背景也会有一个蒙层（遮罩层），有时候因为UI设计并不想要这个蒙层。</p><p>一行代码搞定</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dialog.getWindow().setDimAmount(0f);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android 使用简单帧动画实现一个自定义动态等待层</title>
      <link href="2020/10/23/Android-%E4%BD%BF%E7%94%A8%E7%AE%80%E5%8D%95%E5%B8%A7%E5%8A%A8%E7%94%BB%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8A%A8%E6%80%81%E7%AD%89%E5%BE%85%E5%B1%82/"/>
      <url>2020/10/23/Android-%E4%BD%BF%E7%94%A8%E7%AE%80%E5%8D%95%E5%B8%A7%E5%8A%A8%E7%94%BB%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8A%A8%E6%80%81%E7%AD%89%E5%BE%85%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong></p><p>项目中有时候需要自定义等待层，使用帧动画实现一个动态的等待层还是不错的。</p><p><strong>一、简单帧动画实现</strong></p><p><strong>1.在drawable下创建loading_view.xml</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;animation-list xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">               android:oneshot=<span class="string">&quot;false&quot;</span> &gt;</span><br><span class="line">    &lt;item android:drawable=<span class="string">&quot;@drawable/loading_001&quot;</span> android:duration=<span class="string">&quot;50&quot;</span>/&gt;</span><br><span class="line">    &lt;item android:drawable=<span class="string">&quot;@drawable/loading_002&quot;</span> android:duration=<span class="string">&quot;50&quot;</span>/&gt;</span><br><span class="line">    &lt;item android:drawable=<span class="string">&quot;@drawable/loading_003&quot;</span> android:duration=<span class="string">&quot;50&quot;</span>/&gt;</span><br><span class="line">&lt;/animation-list&gt;</span><br></pre></td></tr></table></figure><p><strong>2.在xml布局中调用loading_view</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ImageView</span><br><span class="line">          android:id=<span class="string">&quot;@+id/img_loading_view&quot;</span></span><br><span class="line">          android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">          android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">          android:layout_gravity=<span class="string">&quot;center&quot;</span></span><br><span class="line">          android:src=<span class="string">&quot;@drawable/loading_view&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p><strong>3、在代码中调用</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ImageView imgLoadingView = (ImageView) view.findViewById(R.id.img_loading_view);</span><br><span class="line">AnimationDrawable animationDrawable = (AnimationDrawable) imgLoadingView.getDrawable();</span><br><span class="line"></span><br><span class="line">animationDrawable.start();//开启动画</span><br><span class="line">animationDrawable.stop();//关闭动画</span><br></pre></td></tr></table></figure><p><strong>二、帧动画等待层</strong></p><p>只需要自定义一个dialog，xml布局中使用以上帧动画即可。<br>当开启等待层时调用：</p><blockquote><p>animationDrawable.start();//开启动画</p></blockquote><p>当关闭等待层时调用：</p><blockquote><p>animationDrawable.stop();//关闭动画</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android 自定义dialog学习之——自定义一个提示框</title>
      <link href="2020/10/23/Android-%E8%87%AA%E5%AE%9A%E4%B9%89dialog%E5%AD%A6%E4%B9%A0%E4%B9%8B%E2%80%94%E2%80%94%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E6%8F%90%E7%A4%BA%E6%A1%86/"/>
      <url>2020/10/23/Android-%E8%87%AA%E5%AE%9A%E4%B9%89dialog%E5%AD%A6%E4%B9%A0%E4%B9%8B%E2%80%94%E2%80%94%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E6%8F%90%E7%A4%BA%E6%A1%86/</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong></p><p>最近项目中觉的Android系统的dialog样式太丑，确实也不太好看，就打算自定义一个dialog来使用。</p><p><strong>自定义dialog实例demo</strong></p><p><strong>1、布局</strong><br>dialog_alert</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;@dimen/dp_550&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">    android:layout_gravity=<span class="string">&quot;center&quot;</span></span><br><span class="line">    android:background=<span class="string">&quot;@drawable/new_dialog_bg&quot;</span></span><br><span class="line">    android:orientation=<span class="string">&quot;vertical&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--标题--&gt;</span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=<span class="string">&quot;@+id/tv_title&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;@dimen/dp_80&quot;</span></span><br><span class="line">        android:layout_marginLeft=<span class="string">&quot;@dimen/dp_60&quot;</span></span><br><span class="line">        android:layout_marginRight=<span class="string">&quot;@dimen/dp_60&quot;</span></span><br><span class="line">        android:gravity=<span class="string">&quot;center|bottom&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;@string/title&quot;</span></span><br><span class="line">        android:textColor=<span class="string">&quot;@color/color_222222&quot;</span></span><br><span class="line">        android:textSize=<span class="string">&quot;@dimen/dp_32&quot;</span></span><br><span class="line">        android:textStyle=<span class="string">&quot;bold&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--提示信息--&gt;</span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=<span class="string">&quot;@+id/tv_msg&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_marginLeft=<span class="string">&quot;@dimen/dp_60&quot;</span></span><br><span class="line">        android:layout_marginTop=<span class="string">&quot;@dimen/dp_36&quot;</span></span><br><span class="line">        android:layout_marginRight=<span class="string">&quot;@dimen/dp_60&quot;</span></span><br><span class="line">        android:layout_marginBottom=<span class="string">&quot;@dimen/dp_50&quot;</span></span><br><span class="line">        android:gravity=<span class="string">&quot;center&quot;</span></span><br><span class="line">        android:textColor=<span class="string">&quot;@color/color_222222&quot;</span></span><br><span class="line">        android:textSize=<span class="string">&quot;@dimen/dp_28&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;View</span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;@dimen/dp_1&quot;</span></span><br><span class="line">        android:background=<span class="string">&quot;@color/color_E8E8E8&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;@dimen/dp_92&quot;</span></span><br><span class="line">        android:orientation=<span class="string">&quot;horizontal&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--取消按钮--&gt;</span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:id=<span class="string">&quot;@+id/tv_cancel&quot;</span></span><br><span class="line">            android:layout_width=<span class="string">&quot;0dp&quot;</span></span><br><span class="line">            android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">            android:layout_weight=<span class="string">&quot;1&quot;</span></span><br><span class="line">            android:gravity=<span class="string">&quot;center&quot;</span></span><br><span class="line">            android:text=<span class="string">&quot;@string/tv_cancel&quot;</span></span><br><span class="line">            android:textColor=<span class="string">&quot;@color/color_666666&quot;</span></span><br><span class="line">            android:textSize=<span class="string">&quot;@dimen/dp_28&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;View</span><br><span class="line">            android:id=<span class="string">&quot;@+id/v_line&quot;</span></span><br><span class="line">            android:layout_width=<span class="string">&quot;@dimen/dp_1&quot;</span></span><br><span class="line">            android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">            android:background=<span class="string">&quot;@color/color_E8E8E8&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--确认按钮--&gt;</span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:id=<span class="string">&quot;@+id/tv_ok&quot;</span></span><br><span class="line">            android:layout_width=<span class="string">&quot;0dp&quot;</span></span><br><span class="line">            android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">            android:layout_weight=<span class="string">&quot;1&quot;</span></span><br><span class="line">            android:gravity=<span class="string">&quot;center&quot;</span></span><br><span class="line">            android:text=<span class="string">&quot;@string/tv_ok&quot;</span></span><br><span class="line">            android:textColor=<span class="string">&quot;@color/color_00A1C1&quot;</span></span><br><span class="line">            android:textSize=<span class="string">&quot;@dimen/dp_28&quot;</span> /&gt;</span><br><span class="line">    &lt;/LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure><p>new_dialog_bg</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;shape xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br><span class="line">    &lt;!-- 边框的宽度和颜色 --&gt;</span><br><span class="line">    &lt;stroke</span><br><span class="line">        android:width=<span class="string">&quot;@dimen/dp_1&quot;</span></span><br><span class="line">        android:color=<span class="string">&quot;#E8E8E8&quot;</span> /&gt;</span><br><span class="line">    &lt;!-- 圆角的半径 --&gt;</span><br><span class="line">    &lt;corners android:radius=<span class="string">&quot;@dimen/dp_12&quot;</span> /&gt;</span><br><span class="line">    &lt;!-- 填充颜色 --&gt;</span><br><span class="line">    &lt;solid android:color=<span class="string">&quot;#FFFFFF&quot;</span> /&gt;</span><br><span class="line">&lt;/shape&gt;</span><br></pre></td></tr></table></figure><p><strong>2、代码实现</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">public class MyDialog extends Dialog implements View.OnClickListener &#123;</span><br><span class="line">    private TextView tv_title;</span><br><span class="line">    private TextView tv_msg;</span><br><span class="line">    private TextView tv_cancel;</span><br><span class="line">    private TextView tv_ok;</span><br><span class="line">    private View v_line;</span><br><span class="line"></span><br><span class="line">    private OkOnClickListener okOnClickListener;</span><br><span class="line">    private CancelOnClickListener cancelOnClickListener;</span><br><span class="line"></span><br><span class="line">    public MyDialog(@NonNull Context context) &#123;</span><br><span class="line">        this(context, R.style.BaseDialogStyle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public MyDialog(@NonNull Context context, int themeResId) &#123;</span><br><span class="line">        super(context, themeResId);</span><br><span class="line">        setContentView(R.layout.dialog_alert);</span><br><span class="line">        initView();</span><br><span class="line">        initAction();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        WindowManager m = getWindow().getWindowManager();</span><br><span class="line">        Display d = m.getDefaultDisplay();</span><br><span class="line">        WindowManager.LayoutParams p = getWindow().getAttributes();</span><br><span class="line">        p.width = d.getWidth(); //设置dialog的宽度为当前手机屏幕的宽度</span><br><span class="line">        getWindow().setAttributes(p);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void <span class="function"><span class="title">initView</span></span>() &#123;</span><br><span class="line">        tv_title = findViewById(R.id.tv_title);</span><br><span class="line">        tv_msg = findViewById(R.id.tv_msg);</span><br><span class="line">        tv_cancel = findViewById(R.id.tv_cancel);</span><br><span class="line">        tv_ok = findViewById(R.id.tv_ok);</span><br><span class="line">        v_line = findViewById(R.id.v_line);</span><br><span class="line"></span><br><span class="line">        tv_ok.setOnClickListener(this);</span><br><span class="line">        tv_cancel.setOnClickListener(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //默认设置ok和cancel按钮都不可见：这样可以代码动态设置只显示一个按钮或者两个按钮，使控件更加实用</span><br><span class="line">    private void <span class="function"><span class="title">initAction</span></span>() &#123;</span><br><span class="line">        tv_cancel.setVisibility(View.GONE);</span><br><span class="line">        tv_ok.setVisibility(View.GONE);</span><br><span class="line">        v_line.setVisibility(View.GONE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//设置title</span><br><span class="line">    public MyDialog setTitle(String title) &#123;</span><br><span class="line">        <span class="keyword">if</span> (this.tv_title != null) &#123;</span><br><span class="line">            this.tv_title.setText(StringUtil.isEmpty(title) ? this.getContext().getResources().getString(R.string.title) : title);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //设置msg</span><br><span class="line">    public MyDialog setMessage(String message) &#123;</span><br><span class="line">        <span class="keyword">if</span> (this.tv_msg != null) &#123;</span><br><span class="line">            this.tv_msg.setText(StringUtil.isEmpty(message) ? <span class="string">&quot;&quot;</span> : message);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //设置ok按钮点击事件</span><br><span class="line">    public MyDialog setPositiveButton(String okMsg, OkOnClickListener okOnClickListener) &#123;</span><br><span class="line">        <span class="keyword">if</span> (this.tv_ok != null) &#123;</span><br><span class="line">            this.tv_ok.setVisibility(View.VISIBLE);</span><br><span class="line">            this.tv_ok.setText(StringUtil.isEmpty(okMsg) ? this.getContext().getResources().getString(R.string.tv_ok) : okMsg);</span><br><span class="line">            this.okOnClickListener = okOnClickListener;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //设置cancel按钮点击事件</span><br><span class="line">    public MyDialog setNegativeButton(String cancelMsg, CancelOnClickListener cancelOnClickListener) &#123;</span><br><span class="line">        <span class="keyword">if</span> (this.tv_cancel != null) &#123;</span><br><span class="line">            this.tv_cancel.setVisibility(View.VISIBLE);</span><br><span class="line">            this.v_line.setVisibility(View.VISIBLE);</span><br><span class="line">            this.tv_cancel.setText(StringUtil.isEmpty(cancelMsg) ? this.getContext().getResources().getString(R.string.tv_cancel) : cancelMsg);</span><br><span class="line">            this.cancelOnClickListener = cancelOnClickListener;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View v) &#123;</span><br><span class="line">        dismiss();</span><br><span class="line">        int id = v.getId();</span><br><span class="line">        <span class="keyword">if</span> (id == R.id.tv_ok) &#123;</span><br><span class="line">            <span class="keyword">if</span> (okOnClickListener != null) &#123;</span><br><span class="line">                okOnClickListener.confirm();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (id == R.id.tv_cancel) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cancelOnClickListener != null) &#123;</span><br><span class="line">                cancelOnClickListener.cancel();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public interface OkOnClickListener &#123;</span><br><span class="line">        void confirm();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public interface CancelOnClickListener &#123;</span><br><span class="line">        void cancel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、调用dialog</strong><br>我们写一个工具类来调用，这样全局只需要调用工具类就ok了，不用每次都new一个dialog对象来调用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">//工具类</span><br><span class="line">public class DialogHelper &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 单按钮dialog弹出框</span><br><span class="line">     *</span><br><span class="line">     * @param context           上下文</span><br><span class="line">     * @param title             标题</span><br><span class="line">     * @param msg               内容</span><br><span class="line">     * @param cancelOutSide     是否可以点击dialog外部时关闭dialog</span><br><span class="line">     * @param ok                确认按钮</span><br><span class="line">     * @param okOnClickListener 确认回调</span><br><span class="line">     */</span><br><span class="line">    public static void showDialog(Context context, String title, String msg, boolean cancelOutSide,</span><br><span class="line">                                  String ok, MyDialog.OkOnClickListener okOnClickListener) &#123;</span><br><span class="line"></span><br><span class="line">        showDialog(context, title, msg, <span class="literal">true</span>, cancelOutSide, ok, okOnClickListener, <span class="string">&quot;&quot;</span>, null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 双按钮dialog弹出框</span><br><span class="line">     *</span><br><span class="line">     * @param context               上下文</span><br><span class="line">     * @param title                 标题</span><br><span class="line">     * @param msg                   内容</span><br><span class="line">     * @param hideCancel            是否隐藏“取消”按钮</span><br><span class="line">     * @param cancelOutSide         是否可以点击dialog外部时关闭dialog</span><br><span class="line">     * @param ok                    确认按钮</span><br><span class="line">     * @param okOnClickListener     确认回调</span><br><span class="line">     * @param cancel                取消按钮</span><br><span class="line">     * @param cancelOnClickListener 取消回调</span><br><span class="line">     */</span><br><span class="line">    public static void showDialog(Context context, String title, String msg, boolean hideCancel, boolean cancelOutSide,</span><br><span class="line">                                  String ok, MyDialog.OkOnClickListener okOnClickListener,</span><br><span class="line">                                  String cancel, MyDialog.CancelOnClickListener cancelOnClickListener) &#123;</span><br><span class="line">        MyDialog dialog = new MyDialog(context);</span><br><span class="line">        dialog.setTitle(title);</span><br><span class="line">        dialog.setMessage(msg);</span><br><span class="line">        dialog.setCanceledOnTouchOutside(cancelOutSide);</span><br><span class="line">        dialog.setCancelable(cancelOutSide);</span><br><span class="line">        dialog.setPositiveButton(ok, okOnClickListener);</span><br><span class="line">        <span class="keyword">if</span> (!hideCancel) &#123;</span><br><span class="line">            dialog.setNegativeButton(cancel, cancelOnClickListener);</span><br><span class="line">        &#125;</span><br><span class="line">        dialog.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4、最后附上自定义dialog的样式</strong></p><p><img src="https://img-blog.csdnimg.cn/20200905152857622.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac 中 Android Studio使用内存调整方法</title>
      <link href="2020/10/23/Mac-%E4%B8%AD-Android-Studio%E4%BD%BF%E7%94%A8%E5%86%85%E5%AD%98%E8%B0%83%E6%95%B4%E6%96%B9%E6%B3%95/"/>
      <url>2020/10/23/Mac-%E4%B8%AD-Android-Studio%E4%BD%BF%E7%94%A8%E5%86%85%E5%AD%98%E8%B0%83%E6%95%B4%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><strong>Mac下调整Android Studio可使用内存大小</strong></p><p><strong>前言</strong></p><blockquote><p>当使用 MAC 安装完 AS 后，系统会给AS的内存值分配一个默认值，这个默认值是一个通用的，不可能去适配到每台机器。<br>默认的值在/Applications/Android Studio.app/Contents/bin/studio.vmoptions这个文件里面</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-Xms256m</span><br><span class="line">-Xmx1280m</span><br><span class="line">-XX:ReservedCodeCacheSize=240m</span><br><span class="line">-XX:+UseConcMarkSweepGC</span><br><span class="line">-XX:SoftRefLRUPolicyMSPerMB=50</span><br><span class="line">-XX:CICompilerCount=2</span><br><span class="line">-Dsun.io.useCanonPrefixCache=<span class="literal">false</span></span><br><span class="line">-Djava.net.preferIPv4Stack=<span class="literal">true</span></span><br><span class="line">-Djdk.http.auth.tunneling.disabledSchemes=<span class="string">&quot;&quot;</span></span><br><span class="line">-Djdk.attach.allowAttachSelf=<span class="literal">true</span></span><br><span class="line">-Dkotlinx.coroutines.debug=off</span><br><span class="line">-Djdk.module.illegalAccess.silent=<span class="literal">true</span></span><br><span class="line">-Djna.nosys=<span class="literal">true</span></span><br><span class="line">-Djna.boot.library.path=</span><br><span class="line">-XX:+UseCompressedOops</span><br><span class="line">-Dfile.encoding=UTF-8</span><br><span class="line"></span><br><span class="line">-XX:ErrorFile=<span class="variable">$USER_HOME</span>/java_error_in_studio_%p.log</span><br><span class="line">-XX:HeapDumpPath=<span class="variable">$USER_HOME</span>/java_error_in_studio.hprof</span><br></pre></td></tr></table></figure><p><strong>修改方式1:（不建议）</strong></p><p>可以直接修改/Applications/AndroidStudio.app/Contents/bin/studio.vmoptions这个文件的内容，但是不建议直接修改该安装目录下的配置，如果修改了这个配置，每当你升级AS的时候都会有个alert框提示：这个目录下有冲突了，还是有点烦的。</p><p><strong>修改方式2:（推荐）</strong></p><p>修改~/Library/Preferences/AndroidStudio4.0/目录下的studio.vmoptions文件，如果没这个文件的话就自己touch个，最后将自己的配置写进去</p><p>如果你用的是别的版本的AS，上面的路径需要对应到正确的版本，比如用的是AS v3.1，那么对应的路径应该是~/Library/Preferences/AndroidStudio3.1/</p><p>以下是我的修改的配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># custom Android Studio VM options, see https://developer.android.com/studio/intro/studio-config.html</span></span><br><span class="line">-Xmx4096m</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android ViewFlipper控件使用之——图片切换的实现「带手势检测」</title>
      <link href="2020/10/23/Android-ViewFlipper%E6%8E%A7%E4%BB%B6%E4%BD%BF%E7%94%A8%E4%B9%8B%E2%80%94%E2%80%94%E5%9B%BE%E7%89%87%E5%88%87%E6%8D%A2%E7%9A%84%E5%AE%9E%E7%8E%B0%E3%80%8C%E5%B8%A6%E6%89%8B%E5%8A%BF%E6%A3%80%E6%B5%8B%E3%80%8D/"/>
      <url>2020/10/23/Android-ViewFlipper%E6%8E%A7%E4%BB%B6%E4%BD%BF%E7%94%A8%E4%B9%8B%E2%80%94%E2%80%94%E5%9B%BE%E7%89%87%E5%88%87%E6%8D%A2%E7%9A%84%E5%AE%9E%E7%8E%B0%E3%80%8C%E5%B8%A6%E6%89%8B%E5%8A%BF%E6%A3%80%E6%B5%8B%E3%80%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="使用ViewFlipper控件实现图片切换"><a href="#使用ViewFlipper控件实现图片切换" class="headerlink" title="使用ViewFlipper控件实现图片切换"></a>使用ViewFlipper控件实现图片切换</h2><p><strong>参考</strong>：<a href="https://blog.csdn.net/harvic880925/article/details/39585347">ViewFlipper使用详解</a></p><p><strong>前言</strong></p><blockquote><p>ViewFlipper是一个切换控件<br>1、一般用于图片的切换<br>2、也可以用来添加View，不限定只用于ImageView，也可以是自定义View；只是我们经常利用ViewFlipper来实现ImageView的切换，如果切换自定义的View，使用ViewPager做更方便吧。</p></blockquote><p><strong>一、使用ViewFlipper实现「图片切换」demo案例</strong></p><p><strong>ViewFlipper布局：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ViewFlipper</span><br><span class="line">        android:id=<span class="string">&quot;@+id/flipper&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;100dp&quot;</span></span><br><span class="line">        android:layout_marginTop=<span class="string">&quot;10dp&quot;</span></span><br><span class="line">        android:flipInterval=<span class="string">&quot;2000&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p><strong>代码实现：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ViewFlipper mFlipper = findViewById(R.id.flipper);</span><br><span class="line"></span><br><span class="line">mFlipper.addView(getImageView(R.mipmap.img_1));</span><br><span class="line">    mFlipper.addView(getImageView(R.mipmap.img_2));</span><br><span class="line">    mFlipper.addView(getImageView(R.mipmap.img_3));</span><br><span class="line">    mFlipper.addView(getImageView(R.mipmap.img_4));</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> (mFlipper.getChildCount() &gt; 1) &#123;</span><br><span class="line">        mFlipper.startFlipping();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mFlipper.stopFlipping();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><p><strong>二、完整版demo「包含手势检测，可以手动滑动图片切换」</strong></p><p><strong>代码实现：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 图片切换demo:手势切换</span><br><span class="line"> */</span><br><span class="line">public class TwoActivity extends Activity &#123;</span><br><span class="line"></span><br><span class="line">    private ViewFlipper mFlipper;</span><br><span class="line">    private GestureDetector mDetector; //手势检测</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_two);</span><br><span class="line"></span><br><span class="line">        initView();</span><br><span class="line">        initData();</span><br><span class="line">        initAction();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void <span class="function"><span class="title">initView</span></span>() &#123;</span><br><span class="line">        mFlipper = findViewById(R.id.flipper);</span><br><span class="line">        mDetector = new GestureDetector(new simpleGestureListener());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void <span class="function"><span class="title">initData</span></span>() &#123;</span><br><span class="line">        mFlipper.addView(getImageView(R.mipmap.img_1));</span><br><span class="line">        mFlipper.addView(getImageView(R.mipmap.img_2));</span><br><span class="line">        mFlipper.addView(getImageView(R.mipmap.img_3));</span><br><span class="line">        mFlipper.addView(getImageView(R.mipmap.img_4));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @SuppressLint(<span class="string">&quot;ClickableViewAccessibility&quot;</span>)</span><br><span class="line">    private void <span class="function"><span class="title">initAction</span></span>() &#123;</span><br><span class="line">        mFlipper.setOnTouchListener(new View.<span class="function"><span class="title">OnTouchListener</span></span>() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public boolean onTouch(View view, MotionEvent motionEvent) &#123;</span><br><span class="line">                <span class="built_in">return</span> mDetector.onTouchEvent(motionEvent);//手势监听</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span> (mFlipper.getChildCount() &gt; 1) &#123;</span><br><span class="line">            mFlipper.startFlipping();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mFlipper.stopFlipping();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private ImageView getImageView(int id) &#123;</span><br><span class="line">        ImageView imageView = new ImageView(this);</span><br><span class="line">        imageView.setImageResource(id);</span><br><span class="line">        <span class="built_in">return</span> imageView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private class simpleGestureListener extends GestureDetector.SimpleOnGestureListener &#123;</span><br><span class="line">        final int FLING_MIN_DISTANCE = 100, FLING_MIN_VELOCITY = 200;</span><br><span class="line"></span><br><span class="line">        //不知道为什么，不加上onDown函数的话，onFling就不会响应，真是奇怪</span><br><span class="line">        @Override</span><br><span class="line">        public boolean onDown(MotionEvent e) &#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public boolean onFling(MotionEvent e1, MotionEvent e2, <span class="built_in">float</span> velocityX, <span class="built_in">float</span> velocityY) &#123;</span><br><span class="line">            // Fling left</span><br><span class="line">            <span class="keyword">if</span> (e1.getX() - e2.getX() &gt; FLING_MIN_DISTANCE</span><br><span class="line">                    &amp;&amp; Math.abs(velocityX) &gt; FLING_MIN_VELOCITY) &#123;</span><br><span class="line"></span><br><span class="line">                mFlipper.showNext();//展示下一张图片</span><br><span class="line"></span><br><span class="line">                Toast.makeText(TwoActivity.this, <span class="string">&quot;Fling Left&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e2.getX() - e1.getX() &gt; FLING_MIN_DISTANCE</span><br><span class="line">                    &amp;&amp; Math.abs(velocityX) &gt; FLING_MIN_VELOCITY) &#123;</span><br><span class="line">                // Fling right</span><br><span class="line"></span><br><span class="line">                mFlipper.showPrevious();//展示上一张图片</span><br><span class="line"></span><br><span class="line">                Toast.makeText(TwoActivity.this, <span class="string">&quot;Fling Right&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android  ViewFlipper控件使用之——滑动轮播公告的实现</title>
      <link href="2020/10/23/Android-ViewFlipper%E6%8E%A7%E4%BB%B6%E4%BD%BF%E7%94%A8%E4%B9%8B%E2%80%94%E2%80%94%E6%BB%91%E5%8A%A8%E8%BD%AE%E6%92%AD%E5%85%AC%E5%91%8A%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>2020/10/23/Android-ViewFlipper%E6%8E%A7%E4%BB%B6%E4%BD%BF%E7%94%A8%E4%B9%8B%E2%80%94%E2%80%94%E6%BB%91%E5%8A%A8%E8%BD%AE%E6%92%AD%E5%85%AC%E5%91%8A%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="使用ViewFlipper控件实现轮播公告"><a href="#使用ViewFlipper控件实现轮播公告" class="headerlink" title="使用ViewFlipper控件实现轮播公告"></a>使用ViewFlipper控件实现轮播公告</h2><p><strong>前言</strong></p><blockquote><p>ViewFlipper是一个切换控件<br>1、一般用于图片的切换<br>2、也可以用来添加View，不限定只用于ImageView，也可以是自定义View；只是我们经常利用ViewFlipper来实现ImageView的切换，如果切换自定义的View，使用ViewPager做更方便吧。</p></blockquote><p><strong>一、使用ViewFlipper实现轮播公告demo案例</strong></p><p><strong>1、布局文件配置：</strong></p><p><strong>ViewFlipper布局：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;ViewFlipper</span><br><span class="line">        android:id=<span class="string">&quot;@+id/vf_notice&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;60dp&quot;</span></span><br><span class="line">        android:autoStart=<span class="string">&quot;true&quot;</span></span><br><span class="line">        android:background=<span class="string">&quot;@mipmap/new_home_bubble&quot;</span></span><br><span class="line">        android:flipInterval=<span class="string">&quot;3000&quot;</span></span><br><span class="line">        android:inAnimation=<span class="string">&quot;@anim/home_notice_in&quot;</span></span><br><span class="line">        android:outAnimation=<span class="string">&quot;@anim/home_notice_out&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p><strong>进入动画home_notice_in：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;<span class="built_in">set</span> xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;translate</span><br><span class="line">        android:duration=<span class="string">&quot;500&quot;</span></span><br><span class="line">        android:fromYDelta=<span class="string">&quot;100.0%p&quot;</span></span><br><span class="line">        android:toYDelta=<span class="string">&quot;0.0&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;alpha</span><br><span class="line">        android:duration=<span class="string">&quot;500&quot;</span></span><br><span class="line">        android:fromAlpha=<span class="string">&quot;0.0&quot;</span></span><br><span class="line">        android:toAlpha=<span class="string">&quot;1.0&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/<span class="built_in">set</span>&gt;</span><br></pre></td></tr></table></figure><p><strong>滑出动画home_notice_out:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;<span class="built_in">set</span> xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;translate</span><br><span class="line">        android:duration=<span class="string">&quot;500&quot;</span></span><br><span class="line">        android:fromYDelta=<span class="string">&quot;0.0&quot;</span></span><br><span class="line">        android:toYDelta=<span class="string">&quot;-100.0%p&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;alpha</span><br><span class="line">        android:duration=<span class="string">&quot;500&quot;</span></span><br><span class="line">        android:fromAlpha=<span class="string">&quot;1.0&quot;</span></span><br><span class="line">        android:toAlpha=<span class="string">&quot;0.0&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/<span class="built_in">set</span>&gt;</span><br></pre></td></tr></table></figure><p><strong>new_notice_item布局</strong><br><strong>自定义view填充ViewFlipper</strong><br>「这里demo使用的是ViewFlipper.add(view)方式」</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;60dp&quot;</span></span><br><span class="line">    android:gravity=<span class="string">&quot;center_vertical&quot;</span></span><br><span class="line">    android:orientation=<span class="string">&quot;horizontal&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=<span class="string">&quot;@+id/tv_value&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_marginLeft=<span class="string">&quot;20dp&quot;</span></span><br><span class="line">        android:gravity=<span class="string">&quot;center_vertical&quot;</span></span><br><span class="line">        android:ellipsize=<span class="string">&quot;end&quot;</span></span><br><span class="line">        android:maxLines=<span class="string">&quot;1&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;测试测试&quot;</span></span><br><span class="line">        android:textColor=<span class="string">&quot;#256470&quot;</span></span><br><span class="line">        android:textSize=<span class="string">&quot;20dp&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure><p><strong>2、代码逻辑实现</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends Activity &#123;</span><br><span class="line"></span><br><span class="line">    private ViewFlipper mViewFlipper;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        initView();</span><br><span class="line">        initData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void <span class="function"><span class="title">initView</span></span>() &#123;</span><br><span class="line">        mViewFlipper = (ViewFlipper) findViewById(R.id.vf_notice);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void <span class="function"><span class="title">initData</span></span>() &#123;</span><br><span class="line">        List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;这是公告111&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;这是公告222&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;这是公告333&quot;</span>);</span><br><span class="line">        initNotice(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //设置滑动轮播list</span><br><span class="line">    private void initNotice(final List&lt;String&gt; list) &#123;</span><br><span class="line">        mViewFlipper.removeAllViews();//先移除之前的所有view</span><br><span class="line">        <span class="keyword">for</span> (int i = 0; i &lt; list.size(); i++) &#123;</span><br><span class="line">            View view = LayoutInflater.from(this).inflate(R.layout.new_notice_item, null);</span><br><span class="line">            TextView tvValue = (TextView) view.findViewById(R.id.tv_value);</span><br><span class="line">            tvValue.setText(list.get(i));</span><br><span class="line">            final int finalI = i;</span><br><span class="line">            view.setOnClickListener(new View.<span class="function"><span class="title">OnClickListener</span></span>() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onClick(View view) &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.this, list.get(finalI), Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            mViewFlipper.addView(view);//add方式进行添加</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mViewFlipper.getChildCount() &gt; 1) &#123;</span><br><span class="line">            mViewFlipper.startFlipping();//开启动画</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mViewFlipper.stopFlipping();//关闭动画</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>二、ViewFlipper使用介绍</strong></p><p><strong>1、在xml布局中的方法介绍:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">android:autoStart： 设置自动加载下一个View</span><br><span class="line"></span><br><span class="line">android:flipInterval：设置View之间切换的时间间隔</span><br><span class="line"></span><br><span class="line">android:inAnimation： 设置切换View的进入动画</span><br><span class="line"></span><br><span class="line">android:outAnimation：设置切换View的退出动画</span><br></pre></td></tr></table></figure><p><strong>2、在代码中设置的方法介绍：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">isFlipping： 判断View切换是否正在进行</span><br><span class="line"></span><br><span class="line">setFilpInterval：设置View之间切换的时间间隔</span><br><span class="line"></span><br><span class="line">startFlipping： 开始View的切换，而且会循环进行</span><br><span class="line"></span><br><span class="line">stopFlipping： 停止View的切换</span><br><span class="line"></span><br><span class="line">setOutAnimation：设置切换View的退出动画</span><br><span class="line"></span><br><span class="line">setInAnimation： 设置切换View的进入动画</span><br><span class="line"></span><br><span class="line">showNext： 显示ViewFlipper里的下一个View</span><br><span class="line"></span><br><span class="line">showPrevious： 显示ViewFlipper里的上一个View</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>demo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">viewflipper.setInAnimation(AnimationUtils.loadAnimation(MainActivity.this, R.anim.home_notice_in));         </span><br><span class="line"></span><br><span class="line">viewflipper.setOutAnimation(AnimationUtils.loadAnimation(MainActivity.this, R.anim.home_notice_out));</span><br><span class="line"> </span><br><span class="line">viewflipper.showNext();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android 获取手机设备信息：名称、型号、系统版本号、厂商、设备制造商、SDK版本、系统语言等等</title>
      <link href="2020/10/23/Android-%E8%8E%B7%E5%8F%96%E6%89%8B%E6%9C%BA%E8%AE%BE%E5%A4%87%E4%BF%A1%E6%81%AF%EF%BC%9A%E5%90%8D%E7%A7%B0%E3%80%81%E5%9E%8B%E5%8F%B7%E3%80%81%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC%E5%8F%B7%E3%80%81%E5%8E%82%E5%95%86%E3%80%81%E8%AE%BE%E5%A4%87%E5%88%B6%E9%80%A0%E5%95%86%E3%80%81SDK%E7%89%88%E6%9C%AC%E3%80%81%E7%B3%BB%E7%BB%9F%E8%AF%AD%E8%A8%80%E7%AD%89%E7%AD%89/"/>
      <url>2020/10/23/Android-%E8%8E%B7%E5%8F%96%E6%89%8B%E6%9C%BA%E8%AE%BE%E5%A4%87%E4%BF%A1%E6%81%AF%EF%BC%9A%E5%90%8D%E7%A7%B0%E3%80%81%E5%9E%8B%E5%8F%B7%E3%80%81%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC%E5%8F%B7%E3%80%81%E5%8E%82%E5%95%86%E3%80%81%E8%AE%BE%E5%A4%87%E5%88%B6%E9%80%A0%E5%95%86%E3%80%81SDK%E7%89%88%E6%9C%AC%E3%80%81%E7%B3%BB%E7%BB%9F%E8%AF%AD%E8%A8%80%E7%AD%89%E7%AD%89/</url>
      
        <content type="html"><![CDATA[<p><strong>常用的设备信息获取方法：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 设备名称</span><br><span class="line">    *</span><br><span class="line">    * @<span class="built_in">return</span> 设备名称</span><br><span class="line">    */</span><br><span class="line">   public static String <span class="function"><span class="title">getDeviceName</span></span>() &#123;</span><br><span class="line">       <span class="built_in">return</span> android.os.Build.DEVICE;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">    * 设备型号</span><br><span class="line">    *</span><br><span class="line">    * @<span class="built_in">return</span> 设备型号</span><br><span class="line">    */</span><br><span class="line">   public static String <span class="function"><span class="title">getModelName</span></span>() &#123;</span><br><span class="line">       <span class="built_in">return</span> android.os.Build.MODEL;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 获取当前手机系统版本号</span><br><span class="line">    *</span><br><span class="line">    * @<span class="built_in">return</span> 系统版本号</span><br><span class="line">    */</span><br><span class="line">   public static String <span class="function"><span class="title">getSystemVersion</span></span>() &#123;</span><br><span class="line">       <span class="built_in">return</span> android.os.Build.VERSION.RELEASE;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 获取厂商</span><br><span class="line">    *</span><br><span class="line">    * @<span class="built_in">return</span> 厂商</span><br><span class="line">    */</span><br><span class="line">   public static String <span class="function"><span class="title">getBrand</span></span>() &#123;</span><br><span class="line">       <span class="built_in">return</span> android.os.Build.BRAND;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 获取设备制造商</span><br><span class="line">    *</span><br><span class="line">    * @<span class="built_in">return</span> 制造商</span><br><span class="line">    */</span><br><span class="line">   public static String <span class="function"><span class="title">getManufacturer</span></span>() &#123;</span><br><span class="line">       <span class="built_in">return</span> android.os.Build.MANUFACTURER;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">    * SDK 版本</span><br><span class="line">    * @<span class="built_in">return</span></span><br><span class="line">    */</span><br><span class="line">   public static String <span class="function"><span class="title">getSDKVersion</span></span>() &#123;</span><br><span class="line">       SDKVersion = android.os.Build.VERSION.SDK ;</span><br><span class="line">       <span class="built_in">return</span>  SDKVersion;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">/**</span><br><span class="line">    * 获取当前手机系统语言。</span><br><span class="line">    *</span><br><span class="line">    * @<span class="built_in">return</span> 返回当前系统语言。例如：当前设置的是“中文-中国”，则返回“zh-CN”</span><br><span class="line">    */</span><br><span class="line">   public static String <span class="function"><span class="title">getSystemLanguage</span></span>() &#123;</span><br><span class="line">       <span class="built_in">return</span> Locale.getDefault().getLanguage();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 获取当前系统上的语言列表(Locale列表)</span><br><span class="line">    *</span><br><span class="line">    * @<span class="built_in">return</span>  语言列表</span><br><span class="line">    */</span><br><span class="line">   public static Locale[] <span class="function"><span class="title">getSystemLanguageList</span></span>() &#123;</span><br><span class="line">       <span class="built_in">return</span> Locale.getAvailableLocales();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android 获取应用「唯一标识符」——DeviceID「兼容android 10（Q）」</title>
      <link href="2020/10/23/Android-%E8%8E%B7%E5%8F%96%E5%BA%94%E7%94%A8%E3%80%8C%E5%94%AF%E4%B8%80%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%8D%E2%80%94%E2%80%94DeviceID%E3%80%8C%E5%85%BC%E5%AE%B9android-10%EF%BC%88Q%EF%BC%89%E3%80%8D/"/>
      <url>2020/10/23/Android-%E8%8E%B7%E5%8F%96%E5%BA%94%E7%94%A8%E3%80%8C%E5%94%AF%E4%B8%80%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%8D%E2%80%94%E2%80%94DeviceID%E3%80%8C%E5%85%BC%E5%AE%B9android-10%EF%BC%88Q%EF%BC%89%E3%80%8D/</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong></p><p>更多方法请参考<a href="https://developer.android.google.cn/training/articles/user-data-ids#java">官方文档</a></p><p><strong>一、Android Q 之前</strong></p><p><strong>1、所需权限</strong><br>需动态申请权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=<span class="string">&quot;android.permission.READ_PHONE_STATE&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p><strong>2、获取方法</strong><br>获取设备Id，IMEI等</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TelephonyManager telManager = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);</span><br><span class="line">telManager.getDeviceId();</span><br><span class="line">telManager.getImei();</span><br></pre></td></tr></table></figure><p>但是这个方法在Android Q之后就不生效了。</p><p><strong>二、Android Q之后</strong><br>下面是我们项目使用的一种方法，当然网上还有其它很多种兼容方式可以参考。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">public static String getDeviceId(Context context) &#123;</span><br><span class="line">    final int targetSdkVersion = context.getApplicationInfo().targetSdkVersion;</span><br><span class="line">    <span class="keyword">if</span> (targetSdkVersion &gt; Build.VERSION_CODES.P &amp;&amp; Build.VERSION.SDK_INT &gt; Build.VERSION_CODES.P) &#123;</span><br><span class="line">        <span class="built_in">return</span> getUniqueID(context);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">return</span> getTelId(context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">private static String getTelId(Context context) &#123;</span><br><span class="line">    final TelephonyManager manager = (TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);</span><br><span class="line">    <span class="built_in">return</span> manager.getDeviceId();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">private static String getUniqueID(Context context) &#123;</span><br><span class="line">    String id = null;</span><br><span class="line">    final String androidId = Settings.Secure.getString(context.getContentResolver(), Settings.Secure.ANDROID_ID);</span><br><span class="line">    <span class="keyword">if</span> (!TextUtils.isEmpty(androidId) &amp;&amp; !<span class="string">&quot;9774d56d682e549c&quot;</span>.equals(androidId)) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            UUID uuid = UUID.nameUUIDFromBytes(androidId.getBytes(<span class="string">&quot;utf8&quot;</span>));</span><br><span class="line">            id = uuid.toString();</span><br><span class="line">        &#125; catch (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(id)) &#123;</span><br><span class="line">        id = getUUID();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">return</span> TextUtils.isEmpty(id) ? UUID.randomUUID().toString() : id;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">private static String <span class="function"><span class="title">getUUID</span></span>() &#123;</span><br><span class="line">    String serial = null;</span><br><span class="line"> </span><br><span class="line">    String m_szDevIDShort = <span class="string">&quot;35&quot;</span> +</span><br><span class="line">            Build.BOARD.length() % 10 + Build.BRAND.length() % 10 +</span><br><span class="line"> </span><br><span class="line">            ((null != Build.CPU_ABI) ? Build.CPU_ABI.length() : 0) % 10 + </span><br><span class="line">            </span><br><span class="line">            Build.DEVICE.length() % 10 + Build.DISPLAY.length() % 10 + </span><br><span class="line">            </span><br><span class="line">            Build.HOST.length() % 10 + Build.ID.length() % 10 + </span><br><span class="line">            </span><br><span class="line">            Build.MANUFACTURER.length() % 10 + Build.MODEL.length() % 10 + </span><br><span class="line">            </span><br><span class="line">            Build.PRODUCT.length() % 10 + Build.TAGS.length() % 10 + </span><br><span class="line">            </span><br><span class="line">            Build.TYPE.length() % 10 + Build.USER.length() % 10; //13 位</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt;= Build.VERSION_CODES.P) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123;</span><br><span class="line">                serial = android.os.Build.getSerial();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                serial = Build.SERIAL;</span><br><span class="line">            &#125;</span><br><span class="line">            //API&gt;=9 使用serial号</span><br><span class="line">            <span class="built_in">return</span> new UUID(m_szDevIDShort.hashCode(), serial.hashCode()).toString();</span><br><span class="line">        &#125; catch (Exception exception) &#123;</span><br><span class="line">            serial = <span class="string">&quot;serial&quot;</span>; // 随便一个初始化</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        serial = android.os.Build.UNKNOWN; // 随便一个初始化</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    //使用硬件信息拼凑出来的15位号码</span><br><span class="line">    <span class="built_in">return</span> new UUID(m_szDevIDShort.hashCode(), serial.hashCode()).toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android Glide集成及使用注意事项——Glide 4.x</title>
      <link href="2020/10/23/Android-Glide%E9%9B%86%E6%88%90%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%E2%80%94%E2%80%94Glide-4-x/"/>
      <url>2020/10/23/Android-Glide%E9%9B%86%E6%88%90%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%E2%80%94%E2%80%94Glide-4-x/</url>
      
        <content type="html"><![CDATA[<h2 id="Glide-4-x集成及使用注意事项"><a href="#Glide-4-x集成及使用注意事项" class="headerlink" title="Glide 4.x集成及使用注意事项"></a>Glide 4.x集成及使用注意事项</h2><p><strong>前言</strong></p><p>原文请到<a href="https://www.jianshu.com/p/f1f17f816d1d">lmz14大神</a>参考使用<br>更多用法请到<a href="https://muyangmin.github.io/glide-docs-cn/doc/download-setup.html">官方指南</a>参考使用</p><p><strong>一、集成</strong></p><p><strong>1、project gradle</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">       mavenLocal()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、app gradle</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">compile &#39;com.android.support:support-v4:25.3.1&#39;</span><br><span class="line">compile &#39;com.github.bumptech.glide:glide:4.0.0&#39;</span><br><span class="line">annotationProcessor &#39;com.github.bumptech.glide:compiler:4.0.0&#39;</span><br></pre></td></tr></table></figure><p><strong>3、混淆</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#glide4.0</span><br><span class="line">-keep public class * implements com.bumptech.glide.module.GlideModule</span><br><span class="line">-keep public class * extends com.bumptech.glide.AppGlideModule</span><br><span class="line">-keep public enum com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$** &#123;</span><br><span class="line">  **[] $VALUES;</span><br><span class="line">  public *;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># for DexGuard only</span><br><span class="line">-keepresourcexmlelements manifest&#x2F;application&#x2F;meta-data@value&#x3D;GlideModule</span><br><span class="line"></span><br><span class="line"># 从glide4.0开始，GifDrawable没有提供getDecoder()方法，</span><br><span class="line"># 需要通过反射获取gifDecoder字段值，所以需要保持GifFrameLoader和GifState类不被混淆</span><br><span class="line">-keep class com.bumptech.glide.load.resource.gif.GifDrawable$GifState&#123;*;&#125;</span><br><span class="line">-keep class com.bumptech.glide.load.resource.gif.GifFrameLoader &#123;*;&#125;</span><br></pre></td></tr></table></figure><p><strong>4、在4.0中不用像3.X需要在AndroidManifest.xml配置GlideModule，而是通过注解继承AppGlideModule的子类来配置。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@GlideModule</span><br><span class="line">public class GlideConfiguration extends AppGlideModule &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void applyOptions(Context context, GlideBuilder builder) &#123;</span><br><span class="line">        &#x2F;&#x2F;自定义缓存目录，磁盘缓存给150M 另外一种设置缓存方式</span><br><span class="line">        builder.setDiskCache(new InternalCacheDiskCacheFactory(context, &quot;GlideImgCache&quot;, 150 * 1024 * 1024));</span><br><span class="line">        &#x2F;&#x2F;配置图片缓存格式 默认格式为8888</span><br><span class="line">        builder.setDefaultRequestOptions(RequestOptions.formatOf(DecodeFormat.PREFER_ARGB_8888));</span><br><span class="line">        ViewTarget.setTagId(R.id.glide_tag_id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 禁止解析Manifest文件</span><br><span class="line">     * 主要针对V3升级到v4的用户，可以提升初始化速度，避免一些潜在错误</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean isManifestParsingEnabled() &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>二、使用</strong></p><p><strong>1、基本用法</strong><br>多数情况下，使用Glide加载图片非常简单，一行代码足矣：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(context)</span><br><span class="line">        .load(myUrl)</span><br><span class="line">        .into(imageView);</span><br></pre></td></tr></table></figure><p>取消加载同样很简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(context).clear(imageView);</span><br></pre></td></tr></table></figure><p>尽管及时取消不必要的加载是很好的实践，但这并不是必须的操作。实际上，当 Glide.with() 中传入的 Activity 或 Fragment 实例销毁时，Glide 会自动取消加载并回收资源。</p><p><strong>2、加载圆形图</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(this)</span><br><span class="line">        .load(R.mipmap.ic_splash_bg)</span><br><span class="line">        .apply(bitmapTransform(new CropCircleTransformation()))</span><br><span class="line">        .into(mImageHead);</span><br></pre></td></tr></table></figure><p><strong>3、模糊过滤</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(this)</span><br><span class="line">        .load(R.mipmap.ic_splash_bg)</span><br><span class="line">        .apply(bitmapTransform(new BlurTransformation( 25, 4)))</span><br><span class="line">        .into(mImageView);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>4、在 Application 模块中的使用</strong><br>在 Application 模块中，可创建一个添加有 @GlideModule 注解，继承自 AppGlideModule 的类。此类可生成出一个流式 API，内联了多种选项，和集成库中自定义的选项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package com.example.myapp;</span><br><span class="line"></span><br><span class="line">import com.bumptech.glide.annotation.GlideModule;</span><br><span class="line">import com.bumptech.glide.module.AppGlideModule;</span><br><span class="line"></span><br><span class="line">@GlideModule</span><br><span class="line">public final class MyAppGlideModule extends AppGlideModule &#123;&#125;</span><br></pre></td></tr></table></figure><p>生成的 API 默认名为 GlideApp ，与 AppGlideModule 的子类包名相同。在 Application 模块中将 Glide.with() 替换为 GlideApp.with()，即可使用该 API 去完成加载工作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GlideApp.with(context)</span><br><span class="line">   .load(myUrl)</span><br><span class="line">    .placeholder(placeholder)</span><br><span class="line">  .fitCenter()</span><br><span class="line"> .into(imageView);</span><br></pre></td></tr></table></figure><p><strong>三、注意事项</strong></p><p><strong>1、使用GlideApp代替Glide，asBitmap、asGif、asDrawable、asFile都要放到load之前（glide3.7.0都是要在load之后调用）。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static void loadImg(Context context,String url, ImageView imageView)&#123;</span><br><span class="line">        GlideApp.with(context)</span><br><span class="line">                .asBitmap()</span><br><span class="line">                .load(url)</span><br><span class="line">                .placeholder(R.drawable.placeholder) &#x2F;&#x2F;设置资源加载过程中的占位符</span><br><span class="line">                .into(imageView);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>2、占位符.placeholder(R.drawable.placeholder)不能用.9图，占位图片和加载的目标图片会同时显示，只是目标图片会先显示缩略图，然后显示正常。</strong></p><p><strong>3、加载gif图时，若调用dontAnimate()移除所有动画，gif就会加载失败。</strong></p><p><strong>4、设置淡入淡出动画</strong><br>glide3.7.0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(context)</span><br><span class="line">                .load(url)</span><br><span class="line">                .crossFade(100)  &#x2F;&#x2F;系统渐变动画</span><br><span class="line">                .placeholder(R.drawable.placeholder)</span><br><span class="line">                .fallback(R.drawable.fallback) </span><br><span class="line">                .diskCacheStrategy(DiskCacheStrategy.ALL)  </span><br><span class="line">                .into(imageView);</span><br></pre></td></tr></table></figure><p>glide4.0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GlideApp.with(context)</span><br><span class="line">                .load(url)</span><br><span class="line">                .transition(DrawableTransitionOptions.withCrossFade(100))&#x2F;&#x2F;淡入淡出100m</span><br><span class="line">                .placeholder(R.drawable.placeholder)</span><br><span class="line">                .fallback(R.drawable.fallback) </span><br><span class="line">                .diskCacheStrategy(DiskCacheStrategy.ALL)</span><br><span class="line">                .into(imageView);</span><br></pre></td></tr></table></figure><p><strong>5、磁盘缓存策略</strong><br>glide3.7.0</p><blockquote><p>DiskCacheStrategy 的枚举意义：<br>DiskCacheStrategy.NONE 什么都不缓存<br>DiskCacheStrategy.SOURCE 只缓存全尺寸图<br>DiskCacheStrategy.RESULT 只缓存最终的加载图<br>DiskCacheStrategy.ALL 缓存所有版本图（默认行为）</p></blockquote><p>glide4.0</p><blockquote><p>//DiskCacheStrategy.ALL 既缓存原始图片，也缓存转换过后的图片。<br>// DiskCacheStrategy.NONE 不缓存任何内容<br>// DiskCacheStrategy.DATA 在资源解码前就将原始数据写入磁盘缓存（即只缓存原始图片）<br>// DiskCacheStrategy.RESOURCE 在资源解码后将数据写入磁盘缓存，即经过缩放等转换后的图片资源（即只缓存转换过后的图片）。<br>// DiskCacheStrategy.AUTOMATIC 让Glide根据图片资源智能地选择使用哪一种缓存策略。<br>//（默认采用）DiskCacheStrategy.AUTOMATIC策略<br>/<em>——————————————————————————-</em>/<br>//源码 RequestOptions.java<br>private DiskCacheStrategy diskCacheStrategy = DiskCacheStrategy.AUTOMATIC;</p></blockquote><p><strong>6、占位符、错误图片设置</strong><br>glide4.0 若into中设置的是target，占位符（placeholder、error）需要在回调中再次设置，否则无效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public static void loadImg(String url, ImageView imageView) &#123;</span><br><span class="line">        &#x2F;&#x2F;into中用Target，占位符（placeholder、error）需要在回调中设置</span><br><span class="line">        GlideApp.with(FanhuanApplication.getInstance().getApplication())</span><br><span class="line">                .asBitmap()</span><br><span class="line">                .load(url)</span><br><span class="line">                .placeholder(drawbleId) &#x2F;&#x2F;设置资源加载过程中的占位符</span><br><span class="line">                .fallback(drawbleId)</span><br><span class="line">                .error(drawbleId)</span><br><span class="line">                .diskCacheStrategy(DiskCacheStrategy.ALL)</span><br><span class="line">                .into(new SimpleTarget&lt;Bitmap&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void onResourceReady(Bitmap resource, Transition&lt;? super Bitmap&gt; transition) &#123;</span><br><span class="line">                       imageView.setImageBitmap(resource);                    </span><br><span class="line">                 &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onLoadFailed(@Nullable Drawable errorDrawable) &#123;</span><br><span class="line">                        super.onLoadFailed(errorDrawable);</span><br><span class="line">                         if(errorDrawable!&#x3D;null)&#123;</span><br><span class="line">                            imageView.setImageDrawable(errorDrawable);</span><br><span class="line">                        &#125;                  </span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onLoadStarted(@Nullable Drawable placeholder) &#123;</span><br><span class="line">                        super.onLoadStarted(placeholder);</span><br><span class="line">                       if(placeholder!&#x3D;null)&#123;</span><br><span class="line">                            imageView.setImageDrawable(placeholder);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android Glide集成及使用注意事项——Glide 3.x</title>
      <link href="2020/10/23/Android-Glide%E9%9B%86%E6%88%90%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%E2%80%94%E2%80%94Glide-3-x/"/>
      <url>2020/10/23/Android-Glide%E9%9B%86%E6%88%90%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%E2%80%94%E2%80%94Glide-3-x/</url>
      
        <content type="html"><![CDATA[<h2 id="Glide-3-x集成及使用注意事项"><a href="#Glide-3-x集成及使用注意事项" class="headerlink" title="Glide 3.x集成及使用注意事项"></a>Glide 3.x集成及使用注意事项</h2><p><strong>前言</strong></p><p>更多用法请参考<a href="https://github.com/bumptech/glide/tree/v3.8.0">官方指南</a>了解使用。</p><p><strong>一、集成</strong></p><p><strong>1、project gradle</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>2、app gradle</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;glide</span><br><span class="line">   implementation &#39;com.github.bumptech.glide:glide:3.8.0&#39;</span><br></pre></td></tr></table></figure><p><strong>3、混淆</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#glide</span><br><span class="line">-keep public class * implements com.bumptech.glide.module.GlideModule</span><br><span class="line">-keep public enum com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$** &#123;</span><br><span class="line">    **[] $VALUES;</span><br><span class="line">    public *;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>二、使用及注意事项</strong></p><p><strong>1、基本方法</strong><br>多数情况下，使用Glide加载图片非常简单，一行代码足矣：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String url &#x3D; &quot;http:&#x2F;&#x2F;www.technosamrat.com&#x2F;wp-content&#x2F;uploads&#x2F;2012&#x2F;02&#x2F;Ocean-Wallpapers-Images1.jpg&quot;;</span><br><span class="line">ImageView imageView &#x3D; (ImageView) findViewById(R.id.imageView);</span><br><span class="line"></span><br><span class="line">Glide.with(context)</span><br><span class="line">    .load(url)</span><br><span class="line">    .into(imageView);</span><br></pre></td></tr></table></figure><p>取消加载同样很简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(context).clear(imageView);</span><br></pre></td></tr></table></figure><p>尽管及时取消不必要的加载是很好的实践，但这并不是必须的操作。实际上，当 Glide.with() 中传入的 Activity 或 Fragment 实例销毁时，Glide 会自动取消加载并回收资源。</p><p><strong>2、占位图设置</strong><br>Glide 也为我们提供这种方法 placeholder() 和 error()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(context)</span><br><span class="line">    .load(url)</span><br><span class="line">    .placeholder(R.drawable.place_image)&#x2F;&#x2F;图片加载出来前，显示的图片</span><br><span class="line">    .error(R.drawable.error_image)&#x2F;&#x2F;图片加载失败后，显示的图片</span><br><span class="line">    .into(imageView);</span><br></pre></td></tr></table></figure><p><strong>3、缩略图</strong><br>Glide 的缩略图功能和占位图略有不同，占位图必须使用资源文件才行，而缩略图是动态的占位图可以从网络中加载。缩略图会在世纪请求加载完成或者处理完之后才显示。在原始图片到达之后，缩略图不会取代原始图片，只会被抹除。</p><p>Glide 为缩略图提供了2种不同的加载方式，比较简单的方式是调用 <strong>thumbnail()</strong> 方法，参数是 <strong>float 类型</strong>，作为其倍数大小。例如，你传入 0.2f 作为参数，Glide 将会显示原始图片的20%的大小，如果原图是 1000x1000 的尺寸，那么缩略图将会是 200x200 的尺寸。为缩略图明显比原图小得多，所以我们需要确保 ImageView 的 ScaleType 设置的正确。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Glide.with( context )</span><br><span class="line">    .load( url )</span><br><span class="line">    .thumbnail( 0.2f )</span><br><span class="line">    .into( imageView );</span><br></pre></td></tr></table></figure><p>与上面这种方式不同的是，这里的第一个缩略图请求是完全独立于第二个原始请求的。该缩略图可以是不同的资源图片，同时也可以对缩略图做不同的转换等等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private void loadImageThumbnailRequest()&#123;</span><br><span class="line">    &#x2F;&#x2F; setup Glide request without the into() method</span><br><span class="line">    DrawableRequestBuilder&lt;String&gt; thumbnailRequest &#x3D; Glide.with( context ).load( url );</span><br><span class="line">    &#x2F;&#x2F; pass the request as a a parameter to the thumbnail request</span><br><span class="line">    Glide.with( context )</span><br><span class="line">        .load( url )</span><br><span class="line">        .thumbnail( thumbnailRequest )</span><br><span class="line">        .into( imageView );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4、动画开关</strong><br>动画效果可以让图片加载变得更加的平滑，crossFade() 方法强制开启 Glide 默认的图片淡出淡入动画，当前版本3.7.0是默认开启的。crossFade() 还有一个重载方法 crossFade(int duration)。可以控制动画的持续时间，单位ms。动画默认的持续时间是300ms。既然可以添加动画，那肯定就可以设置没有任何淡出淡入效果，调用 dontAnimate()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(context)</span><br><span class="line">    .load(url)</span><br><span class="line">    .crossFade()&#x2F;&#x2F;或者使用 dontAnimate() 关闭动画</span><br><span class="line">    .placeholder(R.drawable.place_image)</span><br><span class="line">    .error(R.drawable.error_image)</span><br><span class="line">    .into(imageView);</span><br></pre></td></tr></table></figure><p><strong>5、图片大小与裁剪</strong><br>使用 override(width,height) 方法，在图片显示到 ImageView 之前，重新改变图片大小。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(context)</span><br><span class="line">    .load(url)</span><br><span class="line">    .override(width,height)&#x2F;&#x2F;这里的单位是px</span><br><span class="line">    .into(imageView);</span><br></pre></td></tr></table></figure><p><strong>6、图片的缓存处理</strong><br>为了更快的加载图片，Glide默认帮我们开启了<strong>内存缓存</strong>和<strong>磁盘缓存</strong>。<br><strong>（1）内存缓存</strong></p><blockquote><p>内存缓存是 Glide 默认开启的，可以调用 skipMemoryCache(true) 告诉 Glide 跳过内存缓存。</p></blockquote><p><strong>（2）磁盘缓存</strong></p><blockquote><p>磁盘缓存是 Glide 默认开启的，可以调用 .diskCacheStrategy( DiskCacheStrategy.NONE )告诉 Glide 跳过磁盘缓存。</p></blockquote><p>例子如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(context)</span><br><span class="line">    .load(url)</span><br><span class="line">    .skipMemoryCache(true)</span><br><span class="line">    .diskCacheStrategy( DiskCacheStrategy.NONE )</span><br><span class="line">    .into(imageView);</span><br></pre></td></tr></table></figure><p><strong>（3）自定义磁盘缓存</strong></p><blockquote><p>DiskCacheStrategy 的枚举意义：<br>DiskCacheStrategy.NONE        什么都不缓存<br>DiskCacheStrategy.SOURCE   只缓存全尺寸图<br>DiskCacheStrategy.RESULT    只缓存最终的加载图<br>DiskCacheStrategy.ALL           缓存所有版本图（默认行为）</p></blockquote><p>例子如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(context)</span><br><span class="line">    .load(url)</span><br><span class="line">    .diskCacheStrategy( DiskCacheStrategy.SOURCE )</span><br><span class="line">    .into(imageView);</span><br></pre></td></tr></table></figure><p><strong>7、显示 Gif 和 Video</strong><br>显示 GIf 对于 Glide 来说一个比较特别的功能（ Picasso 暂时还不行）而且使用起来非常简单。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Glide.with( context )</span><br><span class="line">    .load( gifUrl )</span><br><span class="line">    .placeholder（ R.drawable.default ）</span><br><span class="line">    .error( R.drawable.error )</span><br><span class="line">    .into( imageView );</span><br></pre></td></tr></table></figure><p>这段代码还有点问题，如果加载的不是一张 gif 图的话，是没有办法显示的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Glide.with( context )</span><br><span class="line">    .load( gifUrl )</span><br><span class="line">    .asGif()</span><br><span class="line">    .error( R.drawable.error )</span><br><span class="line">    .into( imageView );</span><br></pre></td></tr></table></figure><p>做以上修改，如果图片类型不是 Gif 图的话就会当作 load 失败来处理，因此 error() 会被回调。即使这个url的图片是好的，也是不会显示的。当然，如果你想显示 Gif 但只是向现实静态的图片你就可以这么做</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Glide.with( context )</span><br><span class="line">    .load( gifUrl )</span><br><span class="line">    .asBitmap()</span><br><span class="line">    .error( R.drawable.error )</span><br><span class="line">    .into( imageView );</span><br></pre></td></tr></table></figure><p>仅仅是显示 Gif 的第一帧图像，这样就可以保证图片的正常显示了。</p><p>最后的小惊喜，Glide 还能显示视频，但是只能够显示手机本地的视频，要是向现实网络上的视频的话，还是另寻他法吧！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String filePath &#x3D; &quot;&#x2F;storrage&#x2F;emulated&#x2F;0&#x2F;Pictures&#x2F;video.mp4&quot;;</span><br><span class="line">Glide.with( context )</span><br><span class="line">    .load( Uri.fromFile( new File( filePath ) ) )</span><br><span class="line">    .into( imageView );</span><br></pre></td></tr></table></figure><p>以上就是Glide的基本用法了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>代码对比工具「for Mac」</title>
      <link href="2020/10/23/%E4%BB%A3%E7%A0%81%E5%AF%B9%E6%AF%94%E5%B7%A5%E5%85%B7%E3%80%8Cfor-Mac%E3%80%8D/"/>
      <url>2020/10/23/%E4%BB%A3%E7%A0%81%E5%AF%B9%E6%AF%94%E5%B7%A5%E5%85%B7%E3%80%8Cfor-Mac%E3%80%8D/</url>
      
        <content type="html"><![CDATA[<p><strong>代码对比工具</strong></p><p>链接: <a href="https://pan.baidu.com/s/1rFeRV_r4FJhhJpeN5X0ojw">https://pan.baidu.com/s/1rFeRV_r4FJhhJpeN5X0ojw</a><br>密码: vgnp</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android dialog属性——点击「屏幕」或者「返回键」不消失</title>
      <link href="2020/10/23/Android-dialog%E5%B1%9E%E6%80%A7%E2%80%94%E2%80%94%E7%82%B9%E5%87%BB%E3%80%8C%E5%B1%8F%E5%B9%95%E3%80%8D%E6%88%96%E8%80%85%E3%80%8C%E8%BF%94%E5%9B%9E%E9%94%AE%E3%80%8D%E4%B8%8D%E6%B6%88%E5%A4%B1/"/>
      <url>2020/10/23/Android-dialog%E5%B1%9E%E6%80%A7%E2%80%94%E2%80%94%E7%82%B9%E5%87%BB%E3%80%8C%E5%B1%8F%E5%B9%95%E3%80%8D%E6%88%96%E8%80%85%E3%80%8C%E8%BF%94%E5%9B%9E%E9%94%AE%E3%80%8D%E4%B8%8D%E6%B6%88%E5%A4%B1/</url>
      
        <content type="html"><![CDATA[<p><strong>Dialog属性设置</strong></p><p>在dialog.show();之前加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dialog.setCanceledOnTouchOutside(false);&#x2F;&#x2F;点击屏幕 dialog不消失</span><br><span class="line">dialog.setCancelable(false);&#x2F;&#x2F;点击屏幕或返回按钮 dialog不消失  </span><br></pre></td></tr></table></figure><hr><p><strong>屏蔽返回键,按返回键时不销毁当前activity</strong></p><p>重写onKeyDown方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public boolean onKeyDown(int keyCode, KeyEvent event) &#123;</span><br><span class="line">    if (keyCode &#x3D;&#x3D; KeyEvent.KEYCODE_BACK) &#123;</span><br><span class="line">        return false;&#x2F;&#x2F;返回false进行拦截点击事件</span><br><span class="line">    &#125;</span><br><span class="line">    return super.onKeyDown(keyCode, event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android productFlavors的用法之——gradle 配置productFlavors &amp;子模块配置productFlavors</title>
      <link href="2020/10/23/Android-productFlavors%E7%9A%84%E7%94%A8%E6%B3%95%E4%B9%8B%E2%80%94%E2%80%94gradle-%E9%85%8D%E7%BD%AEproductFlavors-%E5%AD%90%E6%A8%A1%E5%9D%97%E9%85%8D%E7%BD%AEproductFlavors/"/>
      <url>2020/10/23/Android-productFlavors%E7%9A%84%E7%94%A8%E6%B3%95%E4%B9%8B%E2%80%94%E2%80%94gradle-%E9%85%8D%E7%BD%AEproductFlavors-%E5%AD%90%E6%A8%A1%E5%9D%97%E9%85%8D%E7%BD%AEproductFlavors/</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1、什么时候用到在子模块配置productFlavors</span><br><span class="line">当子模块需要「配置不同信息」时，可以使用。</span><br><span class="line">比如：</span><br><span class="line">（1）子模块在不同开发环境（uat、sit）使用不同的请求地址url，可以配置productFlavors用来区分调用即可；</span><br><span class="line">（2）当使用模块化开发时，可以专门抽出一个子模块配置productFlavors，这样其他模块只需要依赖该子模块，就可以全局使用子模块的配置信息；</span><br><span class="line">2、备注：「子模块配置样式」与「主模块配置样式」应保持一致；</span><br></pre></td></tr></table></figure><p><strong>配置</strong><br><strong>1、主模块配置productFlavors</strong></p><p>app/build.gradle</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  ...</span><br><span class="line">    flavorDimensions &#39;default&#39; &#x2F;&#x2F; 定义必要的配置 否则会报错</span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        dev &#123; </span><br><span class="line">            dimension &#x3D; &#39;default&#39;</span><br><span class="line">             &#x2F;&#x2F; 定义不同的包名</span><br><span class="line">            applicationId &#x3D; &quot;com.test.demo1&quot;</span><br><span class="line">            &#x2F;&#x2F; 自定义buildConfig.java中的变量供代码中使用</span><br><span class="line">            buildConfigField &quot;String&quot;, &quot;APPID_BUGLY&quot;, &#39;&quot;12345&quot;&#39; </span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sit &#123;</span><br><span class="line">            dimension &#x3D; &#39;default&#39;</span><br><span class="line">            applicationId &#x3D; &quot;com.test.demo2&quot;</span><br><span class="line">            buildConfigField &quot;String&quot;, &quot;APPID_BUGLY&quot;, &#39;&quot;67890&quot;&#39;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、子模块配置productFlavors</strong></p><p>module/build.gradle</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">...</span><br><span class="line">    publishNonDefault true</span><br><span class="line">    flavorDimensions &#39;default&#39;</span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        dev &#123;</span><br><span class="line">            dimension &#x3D; &#39;default&#39;</span><br><span class="line">            &#x2F;&#x2F; 自定义buildConfig.java中的变量供代码中使用</span><br><span class="line">            buildConfigField &quot;String&quot;, &quot;BASE_URL&quot;, &#39;&quot;http:&#x2F;&#x2F;158.223.12.22:8080&quot;&#39;</span><br><span class="line">            buildConfigField &quot;String&quot;, &quot;RESOURCE_URL&quot;, &#39;&quot;http:&#x2F;&#x2F;158.223.12.22:8080&quot;&#39;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sit &#123;</span><br><span class="line">            dimension &#x3D; &#39;default&#39;</span><br><span class="line">            &#x2F;&#x2F; 自定义buildConfig.java中的变量供代码中使用</span><br><span class="line">            buildConfigField &quot;String&quot;, &quot;BASE_URL&quot;, &#39;&quot;http:&#x2F;&#x2F;158.223.12.11:9090&quot;&#39;</span><br><span class="line">            buildConfigField &quot;String&quot;, &quot;RESOURCE_URL&quot;, &#39;&quot;http:&#x2F;&#x2F;158.223.12.11:9090&quot;&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需要其他模块依赖该子模块，就可以全局使用该子模块的配置信息。<br>所以可以抽出一个「公共子模块」专门用来做「配置信息」使用。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android时间获取之——Date、String、Long三种日期类型之间的相互转换</title>
      <link href="2020/10/23/Android%E6%97%B6%E9%97%B4%E8%8E%B7%E5%8F%96%E4%B9%8B%E2%80%94%E2%80%94Date%E3%80%81String%E3%80%81Long%E4%B8%89%E7%A7%8D%E6%97%A5%E6%9C%9F%E7%B1%BB%E5%9E%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/"/>
      <url>2020/10/23/Android%E6%97%B6%E9%97%B4%E8%8E%B7%E5%8F%96%E4%B9%8B%E2%80%94%E2%80%94Date%E3%80%81String%E3%80%81Long%E4%B8%89%E7%A7%8D%E6%97%A5%E6%9C%9F%E7%B1%BB%E5%9E%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p><strong>date类型转换为String类型</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; formatType 格式为yyyy-MM-dd HH:mm:ss&#x2F;&#x2F;yyyy年MM月dd日 HH时mm分ss秒&#x2F;&#x2F;或者自定义格式</span><br><span class="line">   &#x2F;&#x2F; data Date类型的时间</span><br><span class="line">   public static String dateToString(Date data, String formatType) &#123;</span><br><span class="line">       return new SimpleDateFormat(formatType).format(data);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>string类型转换为date类型</strong></p><p> 注：<em>strTime的时间格式必须要与formatType的时间格式相同</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; strTime 要转换的string类型的时间，</span><br><span class="line">&#x2F;&#x2F; formatType 要转换的格式yyyy-MM-dd HH:mm:ss&#x2F;&#x2F;yyyy年MM月dd日HH时mm分ss秒，</span><br><span class="line">   &#x2F;&#x2F; strTime的时间格式必须要与formatType的时间格式相同</span><br><span class="line">   public static Date stringToDate(String strTime, String formatType)</span><br><span class="line">           throws ParseException &#123;</span><br><span class="line">       SimpleDateFormat formatter &#x3D; new SimpleDateFormat(formatType);</span><br><span class="line">       Date date &#x3D; null;</span><br><span class="line">       date &#x3D; formatter.parse(strTime);</span><br><span class="line">       return date;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>long转换为Date类型</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; currentTime 要转换的long类型的时间</span><br><span class="line">&#x2F;&#x2F; formatType 要转换的时间格式yyyy-MM-dd HH:mm:ss&#x2F;&#x2F;yyyy年MM月dd日 HH时mm分ss秒</span><br><span class="line">public static Date longToDate(long currentTime, String formatType)</span><br><span class="line"> throws ParseException &#123;</span><br><span class="line">Date dateOld &#x3D; new Date(currentTime); &#x2F;&#x2F; 根据long类型的毫秒数生命一个date类型的时间</span><br><span class="line">String sDateTime &#x3D; dateToString(dateOld, formatType); &#x2F;&#x2F; 把date类型的时间转换为string</span><br><span class="line">Date date &#x3D; stringToDate(sDateTime, formatType); &#x2F;&#x2F; 把String类型转换为Date类型 </span><br><span class="line">return date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>date类型转换为long类型</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; date 要转换的date类型的时间</span><br><span class="line">   public static long dateToLong(Date date) &#123;</span><br><span class="line">       return date.getTime();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>long类型转换为String类型</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; currentTime 要转换的long类型的时间</span><br><span class="line">   &#x2F;&#x2F; formatType 要转换的string类型的时间格式</span><br><span class="line">   public static String longToString(long currentTime, String formatType)</span><br><span class="line">           throws ParseException &#123;</span><br><span class="line">       Date date &#x3D; longToDate(currentTime, formatType); &#x2F;&#x2F; long类型转成Date类型</span><br><span class="line">       String strTime &#x3D; dateToString(date, formatType); &#x2F;&#x2F; date类型转成String</span><br><span class="line">       return strTime;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>String类型转换为long类型</strong><br>注：<em>strTime的时间格式和formatType的时间格式必须相同</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; strTime 要转换的String类型的时间</span><br><span class="line">   &#x2F;&#x2F; formatType 时间格式</span><br><span class="line">   &#x2F;&#x2F; strTime的时间格式和formatType的时间格式必须相同</span><br><span class="line">   public static long stringToLong(String strTime, String formatType)</span><br><span class="line">           throws ParseException &#123;</span><br><span class="line">       Date date &#x3D; stringToDate(strTime, formatType); &#x2F;&#x2F; String类型转成date类型</span><br><span class="line">       if (date &#x3D;&#x3D; null) &#123;</span><br><span class="line">           return 0;</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           long currentTime &#x3D; dateToLong(date); &#x2F;&#x2F; date类型转成long类型</span><br><span class="line">           return currentTime;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android项目多渠道打包之——productFlavors的用法</title>
      <link href="2020/10/23/Android%E9%A1%B9%E7%9B%AE%E5%A4%9A%E6%B8%A0%E9%81%93%E6%89%93%E5%8C%85%E4%B9%8B%E2%80%94%E2%80%94productFlavors%E7%9A%84%E7%94%A8%E6%B3%95/"/>
      <url>2020/10/23/Android%E9%A1%B9%E7%9B%AE%E5%A4%9A%E6%B8%A0%E9%81%93%E6%89%93%E5%8C%85%E4%B9%8B%E2%80%94%E2%80%94productFlavors%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="productFlavors的用处"><a href="#productFlavors的用处" class="headerlink" title="productFlavors的用处"></a>productFlavors的用处</h2><ul><li>创建不同的产品并为不同产品分配专有属性</li><li>配置不同的环境并为不同环境配置专有信息（sit、uat、pro…）</li></ul><p><strong>一、创建不同的「产品风味」，并为不同产品分配「专有属性」</strong></p><p>在app:级别下的gradle文件中，加入productFlavors,并在productFlavors下创建产品A与B</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">productFlavors &#123;</span><br><span class="line">    &#x2F;&#x2F;新建产品A</span><br><span class="line">    A &#123;</span><br><span class="line">        &#x2F;&#x2F;程序包名</span><br><span class="line">        applicationId &quot;com.wmj.a&quot;</span><br><span class="line">        &#x2F;&#x2F;不同渠道号</span><br><span class="line">        manifestPlaceholders &#x3D; [UMC:&quot;product-Complete&quot;]</span><br><span class="line">        &#x2F;&#x2F;versionName</span><br><span class="line">        versionName &quot;1.0.0&quot;</span><br><span class="line">        &#x2F;&#x2F;versionCode</span><br><span class="line">        versionCode 1</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 自定义buildConfig.java中的变量供代码中使用</span><br><span class="line">        buildConfigField(&quot;String&quot;, &quot;APPID&quot;, &quot;\&quot;111111\&quot;&quot;)</span><br><span class="line">        buildConfigField(&quot;int&quot;, &quot;TYPE&quot;, &quot;1&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;新建产品B</span><br><span class="line">    B &#123;</span><br><span class="line">        &#x2F;&#x2F;程序包名</span><br><span class="line">        applicationId &quot;com.wmj.b&quot;</span><br><span class="line">        &#x2F;&#x2F;不同渠道号</span><br><span class="line">        manifestPlaceholders &#x3D; [UMC:&quot;product-Temp&quot;]</span><br><span class="line">        &#x2F;&#x2F;versionName</span><br><span class="line">        versionName &quot;2.1.1&quot;</span><br><span class="line">        &#x2F;&#x2F;versionCode</span><br><span class="line">        versionCode 2</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 自定义buildConfig.java中的变量供代码中使用</span><br><span class="line">        buildConfigField (&quot;String&quot;, &quot;APPID&quot;, &quot;\&quot;222222\&quot;&quot;)</span><br><span class="line">        buildConfigField(&quot;int&quot;, &quot;TYPE&quot;, &quot;2&quot;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这样，就可以区分A和B两个不同的产品了。A和B分别有自己不同的包名、渠道号、版本号等属性；当然，如果你想区分他们的其他属性比如不同的应用名、应用图标icon、引用不同代码资源、图片资源等等也是可以的；<br>先在src目录下简历对应的文件夹，比如java代码则建立，product/java,res文件夹则建立product/res</p><p><strong>二、配置不同的「开发环境」，并为不同环境配置「专有信息」</strong><br>有时候我们开发一个产品，需要经过开发环境、测试环境、生产环境等不同环境的测试才能正式发布；而不同的环境可能有不同的服务请求地址、不同的资源地址等等，这时候productFlavors就可以大显身手了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">flavorDimensions &#39;default&#39;</span><br><span class="line">   productFlavors &#123;</span><br><span class="line">       sit &#123;</span><br><span class="line">           dimension &#x3D; &#39;default&#39;</span><br><span class="line">           &#x2F;&#x2F;自定义变量，如：配置sit环境的请求地址，不同环境的请求地址各不相同</span><br><span class="line">           buildConfigField &quot;String&quot;, &quot;BASE_URL&quot;, &#39;&quot;http:&#x2F;&#x2F;123.123.123:8080&quot;&#39;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       uat &#123;</span><br><span class="line">           dimension &#x3D; &#39;default&#39;</span><br><span class="line">           buildConfigField &quot;String&quot;, &quot;BASE_URL&quot;, &#39;&quot;http:&#x2F;&#x2F;124.124.124:8081&quot;&#39;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">pro &#123;</span><br><span class="line">           dimension &#x3D; &#39;default&#39;</span><br><span class="line">           buildConfigField &quot;String&quot;, &quot;BASE_URL&quot;, &#39;&quot;http:&#x2F;&#x2F;125.125.125:8083&quot;&#39;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>如上，配置了sit、uat、pro三个不同的环境，分别配有不同的服务请求地址，这样就不用每次打不同环境的apk时手动去修改配置文件了。</p><hr><p>当然，上面两种使用方式也可以配合一起使用啊！<br>就可以组合出不同产品在不同环境的apk了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">flavorDimensions(&quot;name&quot;, &quot;build&quot;)</span><br><span class="line">    productFlavors &#123;</span><br><span class="line">    </span><br><span class="line">&#x2F;&#x2F;产品A</span><br><span class="line">        A &#123;</span><br><span class="line">            dimension &quot;name&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">&#x2F;&#x2F;产品B</span><br><span class="line">B &#123;</span><br><span class="line">            dimension &quot;name&quot;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;sit环境配置</span><br><span class="line">        sit &#123;</span><br><span class="line">            dimension &#x3D; &#39;build&#39;</span><br><span class="line">            &#x2F;&#x2F;自定义变量，如：配置sit环境的请求地址，不同环境的请求地址各不相同</span><br><span class="line">            buildConfigField &quot;String&quot;, &quot;BASE_URL&quot;, &#39;&quot;http:&#x2F;&#x2F;123.123.123:8080&quot;&#39;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;uat环境配置</span><br><span class="line">        uat &#123;</span><br><span class="line">            dimension &#x3D; &#39;build&#39;</span><br><span class="line">            buildConfigField &quot;String&quot;, &quot;BASE_URL&quot;, &#39;&quot;http:&#x2F;&#x2F;124.124.124:8081&quot;&#39;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;pro环境配置</span><br><span class="line">       pro &#123;</span><br><span class="line">            dimension &#x3D; &#39;build&#39;</span><br><span class="line">            buildConfigField &quot;String&quot;, &quot;BASE_URL&quot;, &#39;&quot;http:&#x2F;&#x2F;125.125.125:8083&quot;&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>构建变体：[A, B] [sit, uat, pro] [Debug, Release] 到时这样组合就可以构建12个变体了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android代码混淆之——依赖库Library中混淆配置方法</title>
      <link href="2020/10/23/Android%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86%E4%B9%8B%E2%80%94%E2%80%94%E4%BE%9D%E8%B5%96%E5%BA%93Library%E4%B8%AD%E6%B7%B7%E6%B7%86%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/"/>
      <url>2020/10/23/Android%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86%E4%B9%8B%E2%80%94%E2%80%94%E4%BE%9D%E8%B5%96%E5%BA%93Library%E4%B8%AD%E6%B7%B7%E6%B7%86%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li><p>我们自己新建一个Library给主工程引用；</p></li><li><p>引入三方Library给项目主工程引用；</p><p>这种情况下，一般我们需要对Library中的代码配置一些混淆规则，以免打混淆包某些方法不生效而无法使用。</p></li></ul><h2 id="一、在app模块写混淆规则（不建议使用）"><a href="#一、在app模块写混淆规则（不建议使用）" class="headerlink" title="一、在app模块写混淆规则（不建议使用）"></a>一、在app模块写混淆规则（不建议使用）</h2><p>这种形式比较简单无脑，全部的混淆规则都写在了app模块里面，如果app模块依赖很多个Library模块那么app模块中的混淆规则将会非常的庞大，不利于代码的维护。</p><p>使用app模块编写所有混淆命令是<strong>基于Library模块当中不再编写混淆命令</strong>为前提。<br>也就是Library模块中minifyEnabled都是false，如果强行将Library模块的minifyEnabled设置为true，那么程序将很大概率会崩溃掉，<strong>因为Library模块开启minifyEnabled后，app模块的混淆规则将无法作用到Library模块上，导致Library模块不该混淆的代码被混淆从而导致崩溃。</strong></p><p>Library模块中minifyEnabled设置为false就会保证app模块的混淆规则作用到Library模块上，这也是Library模块中minifyEnabled设置为true还是false对组件化开发影响比较大的一个地方。</p><h2 id="二、在各自Library模块写混淆规则（推荐做法）"><a href="#二、在各自Library模块写混淆规则（推荐做法）" class="headerlink" title="二、在各自Library模块写混淆规则（推荐做法）"></a>二、在各自Library模块写混淆规则（推荐做法）</h2><p>这是<strong>组件化/模块化</strong>开发最推荐的做法，最大的优点就是不用在app模块写上大量的混淆规则，只需要在相应模块写各自的混淆，方便混淆的维护。</p><p>在各自模块中配置混淆方法如下：</p><p><strong>方式一：精简模式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">release &#123;</span><br><span class="line">            consumerProguardFiles &#39;proguard-rules.pro&#39;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>只需要配置一行代码即可，proguard-rules.pro就是该模块特定的混淆规则，使用这种配置最大的一个好处就是Library模块的是否混淆完全由app模块来决定；<br><strong>这种配置有一个非常重要的关键点</strong>：就是不能设置minifyEnabled true，因为设置为true之后，Library模块是否混淆的控制权将只能由该模块自身决定，app模块将无法控制Library模块的混淆与否。</p><p><strong>方式二：常用模式</strong><br>第一步：开启混淆开关</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">buildTypes &#123;</span><br><span class="line">     release &#123;</span><br><span class="line">         minifyEnabled true</span><br><span class="line">         proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>第二步：配置gradle</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">defaultConfig &#123;</span><br><span class="line">      minSdkVersion 22</span><br><span class="line">      targetSdkVersion 28</span><br><span class="line">      versionCode 1</span><br><span class="line">      versionName &quot;1.0&quot;</span><br><span class="line">      testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;</span><br><span class="line">     </span><br><span class="line">      &#x2F;&#x2F; 配置此参数，方可生成混淆文件</span><br><span class="line">      consumerProguardFiles &quot;consumer-rules.pro&quot;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200814205443516.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200814205840276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>细心的朋友可以发现，第1步开启混淆开关配置的是proguard-rules.pro文件，而第2步配置的consumer-rules.pro文件；同时在我们Library目录下这两个混淆文件都存在。<br>那这两文件又有什么区别呢？<br>proguard-rules.pro文件是给Library模块自己使用的混淆规则；<br>consumer-rules.pro文件则是会合并到app的混淆规则中，是给包括app在内的其他模块调用时使用的混淆规则；</p><p>而这两个文件，完全可以使用同一个文件进行配置；当需要进行区分时，可以使用两个不同的文件进行配置；根据项目需求选择所需即可。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows 10 自带输入法微软拼音「简体」「繁体」切换快捷键</title>
      <link href="2020/10/23/Windows-10-%E8%87%AA%E5%B8%A6%E8%BE%93%E5%85%A5%E6%B3%95%E5%BE%AE%E8%BD%AF%E6%8B%BC%E9%9F%B3%E3%80%8C%E7%AE%80%E4%BD%93%E3%80%8D%E3%80%8C%E7%B9%81%E4%BD%93%E3%80%8D%E5%88%87%E6%8D%A2%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>2020/10/23/Windows-10-%E8%87%AA%E5%B8%A6%E8%BE%93%E5%85%A5%E6%B3%95%E5%BE%AE%E8%BD%AF%E6%8B%BC%E9%9F%B3%E3%80%8C%E7%AE%80%E4%BD%93%E3%80%8D%E3%80%8C%E7%B9%81%E4%BD%93%E3%80%8D%E5%88%87%E6%8D%A2%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<p>快捷键：Ctrl + Shift + F</p><p>经常无缘无故的不知道点击了什么导致输入法变成繁体，关键是不太记事每次都要查询一番，还是记下来吧。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android Studio常用快捷键(Mac)</title>
      <link href="2020/10/23/Android-Studio%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE-Mac/"/>
      <url>2020/10/23/Android-Studio%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE-Mac/</url>
      
        <content type="html"><![CDATA[<p><strong>搜索查看类</strong></p><p><img src="https://img-blog.csdnimg.cn/20200811193746527.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>编辑类<br>编辑</strong><br><img src="https://img-blog.csdnimg.cn/20200811193827729.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>生成</strong><br><img src="https://img-blog.csdnimg.cn/20200811193921788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>自动补全<br><img src="https://img-blog.csdnimg.cn/20200811193920946.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>重构</strong><br><img src="https://img-blog.csdnimg.cn/2020081119431894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>选择, 移动</strong><br><img src="https://img-blog.csdnimg.cn/20200811194336878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>格式化</strong><br><img src="https://img-blog.csdnimg.cn/20200811194347352.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>注释</strong><br><img src="https://img-blog.csdnimg.cn/2020081119435979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>运行调试类</strong><br><img src="https://img-blog.csdnimg.cn/2020081119441030.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>测试类</strong><br><img src="https://img-blog.csdnimg.cn/20200811194419754.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>版本控制类</strong><br><img src="https://img-blog.csdnimg.cn/2020081119442948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>窗口类</strong><br><img src="https://img-blog.csdnimg.cn/20200811194442286.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>手机Web前端调试页面之——设置debug开关方式</title>
      <link href="2020/10/23/%E6%89%8B%E6%9C%BAWeb%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E9%A1%B5%E9%9D%A2%E4%B9%8B%E2%80%94%E2%80%94%E8%AE%BE%E7%BD%AEdebug%E5%BC%80%E5%85%B3%E6%96%B9%E5%BC%8F/"/>
      <url>2020/10/23/%E6%89%8B%E6%9C%BAWeb%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E9%A1%B5%E9%9D%A2%E4%B9%8B%E2%80%94%E2%80%94%E8%AE%BE%E7%BD%AEdebug%E5%BC%80%E5%85%B3%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="条件："><a href="#条件：" class="headerlink" title="条件："></a>条件：</h2><p>android4.4+</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在APP中启用 WebView 调试，开启调试后，Chrome DevTools才能对WebView进行远程调试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WebView.setWebContentsDebuggingEnabled(true);</span><br></pre></td></tr></table></figure><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p><strong>1.测试包</strong><br>如果团队中有Android开发人员能够提供测试包，只要在测试包中开启Webview的debug模式就可以了。</p><p><strong>2.线上包</strong><br>对于线上的APP，一般debug开关都是关闭的，这就需要借助第三方工具，才能将debug开关打开，这个工具就是<a href="http://repo.xposed.info/module/de.robv.android.xposed.installer">Xposed</a>和<a href="https://github.com/feix760/WebViewDebugHook">WebviewDebugHook</a>。</p><p>Xposed是一个框架，能够集成很多功能模块，这些模块能够在不修改APK的情况下，修改APP的运行方式。这里我们就需要WebviewDebugHook模块来开启APP的WebView debug模式。下面主要介绍一下安装的步骤：</p><p>（1）获取手机的root权限，这个推荐使用KingRoot，可能一次获取root权限会失败，建议失败后多试几次；</p><p><img src="https://img-blog.csdnimg.cn/20200807161222805.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>（2）下载适合版本的Xposed和WebviewDebugHook，并安装。</p><p>目前Xposed的官网上给出的链接是这样的：</p><p>Android5.0+：<a href="https://forum.xda-developers.com/attachment.php?s=30001ec31416ae09e37652e1b147066e&attachmentid=3921508&d=1477916609">https://forum.xda-developers.com/attachment.php</a></p><p>而WebviewDebugHook的安装文件是git项目<a href="https://github.com/feix760/WebViewDebugHook">https://github.com/feix760/WebViewDebugHook</a>源码中的WebViewDebugHook.apk。</p><p>（3）激活Xposed和WebViewDebugHook模块</p><p>下图是Android5.0+下的截图，通过点击【安装/更新】激活Xposed，并切换菜单到模块功能，然后勾选上WebViewDebugHook。</p><p> <img src="https://img-blog.csdnimg.cn/20200807161301192.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200807161313102.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>安装完毕后，接下来就可以开开心心的调试Webview了。</p><p>另外还有两个小Tips：</p><p>（1）访问chrome://inspect/#devices如果chrome没有检测到Remote Target中的页面，可能需要安装一下chrome的ADB插件；</p><p>（2）对于腾讯系的APP，默认采用X5内核，需要将WebViewDebugHook的git目录下的debug.conf文件拷贝到SD卡的根目录下即可。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android Studio 清理缓存clean project与invalidate caches——解决项目一片报红，但是可以正常编译</title>
      <link href="2020/10/23/Android-Studio-%E6%B8%85%E7%90%86%E7%BC%93%E5%AD%98clean-project%E4%B8%8Einvalidate-caches%E2%80%94%E2%80%94%E8%A7%A3%E5%86%B3%E9%A1%B9%E7%9B%AE%E4%B8%80%E7%89%87%E6%8A%A5%E7%BA%A2%EF%BC%8C%E4%BD%86%E6%98%AF%E5%8F%AF%E4%BB%A5%E6%AD%A3%E5%B8%B8%E7%BC%96%E8%AF%91/"/>
      <url>2020/10/23/Android-Studio-%E6%B8%85%E7%90%86%E7%BC%93%E5%AD%98clean-project%E4%B8%8Einvalidate-caches%E2%80%94%E2%80%94%E8%A7%A3%E5%86%B3%E9%A1%B9%E7%9B%AE%E4%B8%80%E7%89%87%E6%8A%A5%E7%BA%A2%EF%BC%8C%E4%BD%86%E6%98%AF%E5%8F%AF%E4%BB%A5%E6%AD%A3%E5%B8%B8%E7%BC%96%E8%AF%91/</url>
      
        <content type="html"><![CDATA[<p><strong>报错现象：</strong></p><ol><li>Android studio 打开项目有时找不到R文件、 导入的资源、布局 、 jar包等等资源；</li><li>Android studio打开项目一片报红，但是项目可以正常build打包；</li></ol><p>很有可能是studio 缓存造成的。</p><p><strong>解决方案：</strong></p><p><strong>方法1：</strong></p><p> 工具栏  Build  –&gt; lean project<br> <img src="https://img-blog.csdnimg.cn/20200803110548863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>方法2：</strong></p><p>使用invalidate caches restart<br><img src="https://img-blog.csdnimg.cn/20200803110707203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200803110732560.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>备注：</strong><br>如果使用<strong>方法1</strong>无效，可以试一下<strong>方法2</strong>。<br>本人项目就是使用方1无效，使用方法2有效解决问题。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android R(11) app targetSdkVersion30遇到的那些坑之——相册选择图片黑屏现象</title>
      <link href="2020/10/23/Android-R-11-app-targetSdkVersion30%E9%81%87%E5%88%B0%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91%E4%B9%8B%E2%80%94%E2%80%94%E7%9B%B8%E5%86%8C%E9%80%89%E6%8B%A9%E5%9B%BE%E7%89%87%E9%BB%91%E5%B1%8F%E7%8E%B0%E8%B1%A1/"/>
      <url>2020/10/23/Android-R-11-app-targetSdkVersion30%E9%81%87%E5%88%B0%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91%E4%B9%8B%E2%80%94%E2%80%94%E7%9B%B8%E5%86%8C%E9%80%89%E6%8B%A9%E5%9B%BE%E7%89%87%E9%BB%91%E5%B1%8F%E7%8E%B0%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<p><strong>问题：</strong><br>当开发版本targetSdkVersion提升到30时：</p><ol><li>在android10手机上安装app后，调用相册选择图片时，相册会出现图片全部都是黑屏现象，选择后的图片也是黑屏图片，而且无法获取图片的小大；</li><li>在android10以下的手机安装app，可以正常选择图片；</li></ol><p><strong>解决：</strong></p><p>把targetSdkVersion降到28，在android10手机上则可以正常选择相册的图片。<br>目前（2020.08.03）没有找到targetSdkVersion30的适配方法，如有大神有解决方法，望请告知，不甚感激。</p><p><strong>备注：</strong></p><ol><li>当项目targetSdkVersion为28时，在android10手机安装了app；然后将项目targetSdkVersion升级到30，再在android10手机覆盖安装此app，则相册是可以正常选择图片的。</li><li>当项目targetSdkVersion直接为30，Android10手机之前并未在targetSdkVersion低版本安装过此app，直接在targetSdkVersion30第一次安装此app，则调用相册会出现黑屏现象。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>手机Web前端调试页面之——Chrome DevTools（谷歌浏览器）的模拟手机调试</title>
      <link href="2020/10/23/%E6%89%8B%E6%9C%BAWeb%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E9%A1%B5%E9%9D%A2%E4%B9%8B%E2%80%94%E2%80%94Chrome-DevTools%EF%BC%88%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%89%E7%9A%84%E6%A8%A1%E6%8B%9F%E6%89%8B%E6%9C%BA%E8%B0%83%E8%AF%95/"/>
      <url>2020/10/23/%E6%89%8B%E6%9C%BAWeb%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E9%A1%B5%E9%9D%A2%E4%B9%8B%E2%80%94%E2%80%94Chrome-DevTools%EF%BC%88%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%89%E7%9A%84%E6%A8%A1%E6%8B%9F%E6%89%8B%E6%9C%BA%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="Chrome-DevTools（谷歌浏览器）的模拟手机调试"><a href="#Chrome-DevTools（谷歌浏览器）的模拟手机调试" class="headerlink" title="Chrome DevTools（谷歌浏览器）的模拟手机调试"></a>Chrome DevTools（谷歌浏览器）的模拟手机调试</h2><p><strong>前言</strong></p><p>在客户端开发中，由于使用手机app加载webview页面，客户端与前端经常会出现数据交互情况；<br>但是在手机中无法调试看到前端代码的步骤流程，有时候会导致数据交互失败查找问题比较麻烦；因此可以引入Chrome DevTools（谷歌浏览器）的模拟手机调试。</p><ol><li>Chrome DevTools（谷歌浏览器）的模拟手机调试</li><li>Chrome DevTools远程调试Android和iOS页面</li></ol><p><strong>阅读</strong></p><p> <strong>1. Chrome DevTools模拟手机调试</strong></p><p>直接使用谷歌浏览器的开发者工具，可以参照下图，也可以使用快捷键F12或者ctrl+shift+I；个人觉得不管是哪个浏览器，直接先按下F12，一般都可以打开开发者工具，打不开再说嘛。</p><p>这种调试方式不仅能用于模拟手机调试还是主要的PC端页面调试的方式，这里主要说用于手机调试。</p><p><img src="https://img-blog.csdnimg.cn/20200802202730450.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p> 打开后看到类似如下界面的开发者调试界面，Elements可以查看文档元素，Console可以在线调试js和查看输出结果，Sources可以调试JS和查看依赖资源，Network查看所有的网络请求</p><p> <img src="https://img-blog.csdnimg.cn/20200802202747145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>在浏览器地址栏输入要调试的页面地址，选择模拟设备，然后就可以选择要调试的js调试了，右侧面板中有调试操作按钮；在Application面板中可以看到应用存储的数据Cookies什么的</p><p><img src="https://img-blog.csdnimg.cn/20200802202819687.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>如果没有需要模拟的机型怎么办？当然是增加了，打开DevTools的设置面板，左图中的Setting点开会出现右图，如下：</p><p><img src="https://img-blog.csdnimg.cn/20200802202858518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200802202935931.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p> <strong>2. Chrome DevTools远程调试Android和iOS页面</strong></p><p>电脑上安装新版谷歌浏览器，然后地址栏输入chrome://inspect会打开设备监视页面，这里可以监视到iOS和Android设备，如果界面和图中不一致请安装最新版浏览器<br><img src="https://img-blog.csdnimg.cn/20200802203038777.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>Android:</p><p>前提：</p><p>1、手机和电脑使用usb连接，手机要开启usb调试模式(不同手机不一样)</p><p>2、手机上安装最新版谷歌浏览器并打开</p><p>会发现设备监视页面多出了一个华为设备，并且能看到当前手机上谷歌浏览器打开的网页的连接</p><p>a):可以在这里输入手机要打开的url然后open，手机上显示的当前页面就会改变</p><p>b):inspect表示开始调试当前页面，会打开调试面板(重要)</p><p>c):focus tab，表示让手机显示当前这个连接</p><p>d):reload表示重新加载页面，也就是刷新</p><p>e):close表示关闭当前手机显示的页面<br><img src="https://img-blog.csdnimg.cn/20200802203104394.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>接下来，点击inspect开始调试页面，注意如果google浏览器不能翻|墙的话，这个调试页面是打不开的，可以百度修改hosts文件翻|墙<br><img src="https://img-blog.csdnimg.cn/2020080220312643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后就可以像调试PC端网页一样远程调试手机网页了</p><p><strong>iOS(window系统上，如果是macbook系统忽略此部分):</strong></p><p>可以参考：<a href="http://www.cnblogs.com/kelsen/p/6402477.html">http://www.cnblogs.com/kelsen/p/6402477.html</a></p><p>前提：</p><p>1、电脑安装iTunes软件，不然苹果手机不能正常被识别，安装好后数据线连接手机和电脑</p><p>2、打开手机的设置——&gt;Sarafi——&gt;高级——&gt;Web检查器——&gt;启用(默认是关闭的，将其打开)</p><p>3、下载ios-webkit-debug-prox代理(32位或者64位)，其作用就是在Chrome和Sarafi之间建立了一个代理，便于电脑的Chrome检测手机Sarafi打开的页面</p><p>4、在cmd中执行ios_webkit_debug_proxy -f chrome-devtools://devtools/bundled/inspector.html，命令中-f是以谷歌内置的监视器来调试(默认使用远程的)<br><img src="https://img-blog.csdnimg.cn/20200802203159102.png" alt="在这里插入图片描述"><br>启动后会监听9222端口，然后看到连接上了一台名为jiba的iOS设备，括号中为设备的UDID；然后看谷歌浏览器是否检查了这个端口，右图中有9222端口即可，没有就手动添加<br><img src="https://img-blog.csdnimg.cn/20200802203213647.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200802203220692.png" alt="在这里插入图片描述"><br>此时打开手机Sarafi浏览器，打开百度首页，发现浏览器能检测到，没看到就刷新这个监视界面，一般来说会在3秒内自动出现<br><img src="https://img-blog.csdnimg.cn/20200802203236671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>点击inspect同样出现了调试面板，如下，发现iOS调试的面板不能看到手机屏幕在电脑上的投影，不过这并不影响调试；但是可能会遇到在调试js时断点不生效的问题，</p><p>如果很不幸遇到这个问题的话，将图中红框中的按钮连续点击两次——先禁用断点再启动即可恢复端点调试功能，不知道为什么，猜测是这个过程中恢复了断点的状态；这个问题很奇葩。<br><img src="https://img-blog.csdnimg.cn/20200802203254161.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>到这里使用Chrome调试iOS和Android就都完了，这种使用谷歌浏览器的方式，在Android上依赖于手机谷歌浏览器，在iOS上依赖Sarafi浏览器，受到具体软件的限制；不过可以理解，毕竟远程调试不如模拟调试简单</p><p><strong>转载来源：</strong></p><ol><li><a href="https://www.cnblogs.com/xy-nb/p/web.html">手机Web前端调试页面</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>AndroidQ(10)分区存储完美适配</title>
      <link href="2020/10/23/AndroidQ-10-%E5%88%86%E5%8C%BA%E5%AD%98%E5%82%A8%E5%AE%8C%E7%BE%8E%E9%80%82%E9%85%8D/"/>
      <url>2020/10/23/AndroidQ-10-%E5%88%86%E5%8C%BA%E5%AD%98%E5%82%A8%E5%AE%8C%E7%BE%8E%E9%80%82%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong></p><ul><li>Android Q文件存储机制修改成了沙盒模式</li><li>APP只能访问自己目录下的文件和公共媒体文件</li><li>对于AndroidQ以下，还是使用老的文件存储方式</li></ul><p><strong>背景</strong></p><ul><li><strong>存储权限</strong><br>Android Q仍然使用READ_EXTERNAL_STORAGE和WRITE_EXTERNAL_STORAGE作为存储相关运行时权限，但现在即使获取了这些权限，访问外部存储也受到了限制，只能访问自身目录下的文件和公共内体文件。</li><li><strong>外部存储结构划分</strong><br>1、<strong>公有目录</strong>：Downloads、Documents、Pictures 、DCIM、Movies、Music、Ringtones等<br>地址：/storage/emulated/0/Downloads(Pictures)等<br>公有目录下的文件不会跟随APP卸载而删除。<br>2、<strong>APP私有目录</strong><br>地址：/storage/emulated/0/Android/data/包名/files<br>私有目录存放app的私有文件，会随着App的卸载而删除。</li></ul><p><strong>适配方案</strong></p><p>AndroidQ中使用ContentResolver进行文件的增删改查</p><p><strong>1、获取(创建)自身目录下的文件夹</strong><br>获取及创建，如果手机中没有对应的文件夹，则系统会自动生成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F;在自身目录下创建apk文件夹</span><br><span class="line">File apkFile &#x3D; context.getExternalFilesDir(&quot;apk&quot;);</span><br></pre></td></tr></table></figure><p><strong>2、创建自身目录下的文件</strong><br>生成需要下载的路径，通过输入输出流读取写入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">String apkFilePath &#x3D; context.getExternalFilesDir(&quot;apk&quot;).getAbsolutePath();</span><br><span class="line">File newFile &#x3D; new File(apkFilePath + File.separator + &quot;temp.apk&quot;);</span><br><span class="line">OutputStream os &#x3D; null;</span><br><span class="line">try &#123;</span><br><span class="line">  os &#x3D; new FileOutputStream(newFile);</span><br><span class="line">  if (os !&#x3D; null) &#123;</span><br><span class="line">    os.write(&quot;file is created&quot;.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">    os.flush();</span><br><span class="line">  &#125;</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    if (os !&#x3D; null) &#123;</span><br><span class="line">      os.close();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; catch (IOException e1) &#123;</span><br><span class="line">     </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、创建公共目录下的文件夹</strong><br>通过MediaStore.insert写入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.Q) &#123;</span><br><span class="line">  return null;</span><br><span class="line">&#125;</span><br><span class="line">ContentResolver resolver &#x3D; context.getContentResolver();</span><br><span class="line">ContentValues values &#x3D; new ContentValues();</span><br><span class="line">values.put(MediaStore.Downloads.DISPLAY_NAME, fileName);</span><br><span class="line">values.put(MediaStore.Downloads.DESCRIPTION, fileName);</span><br><span class="line">&#x2F;&#x2F;设置文件类型</span><br><span class="line">values.put(MediaStore.Downloads.MIME_TYPE, &quot;application&#x2F;vnd.android.package-archive&quot;);</span><br><span class="line">&#x2F;&#x2F;注意MediaStore.Downloads.RELATIVE_PATH需要targetVersion&#x3D;29,</span><br><span class="line">&#x2F;&#x2F;故该方法只可在Android10的手机上执行</span><br><span class="line">values.put(MediaStore.Downloads.RELATIVE_PATH, &quot;Download&quot; + File.separator + &quot;apk&quot;);</span><br><span class="line">Uri external &#x3D; MediaStore.Downloads.EXTERNAL_CONTENT_URI;</span><br><span class="line">Uri insertUri &#x3D; resolver.insert(external, values);</span><br><span class="line">return insertUri;</span><br></pre></td></tr></table></figure><p><strong>4、公共目录下的指定文件夹下创建文件</strong><br>结合上面代码，我们主要是在公共目录下创建文件或文件夹拿到本地路径uri，不同的Uri，可以保存到不同的公共目录中。接下来使用输入输出流就可以写入文件</p><p>重点：AndroidQ中不支持file://类型访问文件，只能通过uri方式访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">ContentResolver resolver &#x3D; context.getContentResolver();</span><br><span class="line">Uri insertUri &#x3D; resolver.insert(external, values);</span><br><span class="line">if(insertUri &#x3D;&#x3D; null) &#123;</span><br><span class="line">  return;</span><br><span class="line">&#125;</span><br><span class="line">String mFilePath &#x3D; insertUri.toString();</span><br><span class="line">InputStream is &#x3D; null;</span><br><span class="line">OutputStream os &#x3D; null;</span><br><span class="line">try &#123;</span><br><span class="line">  os &#x3D; resolver.openOutputStream(insertUri);</span><br><span class="line">  if(os &#x3D;&#x3D; null)&#123;</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  int read;</span><br><span class="line">  File sourceFile &#x3D; new File(sourcePath);</span><br><span class="line">  if (sourceFile.exists()) &#123; &#x2F;&#x2F; 文件存在时</span><br><span class="line">    is &#x3D; new FileInputStream(sourceFile); &#x2F;&#x2F; 读入原文件</span><br><span class="line">    byte[] buffer &#x3D; new byte[1024];</span><br><span class="line">    while ((read &#x3D; is.read(buffer)) !&#x3D; -1) &#123;</span><br><span class="line">      os.write(buffer, 0, read);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125;finally &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    if (is !&#x3D; null) &#123;</span><br><span class="line">      is.close();</span><br><span class="line">    &#125;</span><br><span class="line">    if (os !&#x3D; null) &#123;</span><br><span class="line">      os.close();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; catch (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5、通过MediaStore读取公共目录下的文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">ParcelFileDescriptor parcelFileDescriptor &#x3D; null;</span><br><span class="line">FileDescriptor fileDescriptor &#x3D; null;</span><br><span class="line">Bitmap tagBitmap &#x3D; null;</span><br><span class="line">try &#123;</span><br><span class="line">  parcelFileDescriptor &#x3D; context.getContentResolver().openFileDescriptor(uri, &quot;r&quot;);</span><br><span class="line">       </span><br><span class="line">  if (parcelFileDescriptor !&#x3D; null &amp;&amp; parcelFileDescriptor.getFileDescriptor() !&#x3D; null) &#123;</span><br><span class="line">    fileDescriptor &#x3D; parcelFileDescriptor.getFileDescriptor();</span><br><span class="line">    &#x2F;&#x2F;转换uri为bitmap类型</span><br><span class="line">    tagBitmap &#x3D; BitmapFactory.decodeFileDescriptor(fileDescriptor);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    if (parcelFileDescriptor !&#x3D; null) &#123;</span><br><span class="line">      parcelFileDescriptor.close();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; catch (IOException e) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>6、使用MediaStore删除文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context.getContentResolver().delete(fileUri, null, null);</span><br></pre></td></tr></table></figure><p><strong>转载来自</strong></p><p><a href="https://www.jianshu.com/p/271bbd13bfcf">会撒娇的犀犀利</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java中try()catch{}的使用方法：自动资源释放</title>
      <link href="2020/10/23/Java%E4%B8%ADtry-catch-%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%9A%E8%87%AA%E5%8A%A8%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/"/>
      <url>2020/10/23/Java%E4%B8%ADtry-catch-%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%9A%E8%87%AA%E5%8A%A8%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/</url>
      
        <content type="html"><![CDATA[<p>今天撸代码的时候发现了一段这样的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">try(</span><br><span class="line">           Connection conn&#x3D;DriverManager.getConnection(url,user,pass);</span><br><span class="line"></span><br><span class="line">           Statement stmt&#x3D;conn.createStatement()</span><br><span class="line"></span><br><span class="line">        ) &#123;</span><br><span class="line"></span><br><span class="line">           boolean hasResultSet&#x3D;stmt.execute(sql);</span><br><span class="line"></span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure><p>和平常见的不一样，我们平常见的是这样的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">try&#123;</span><br><span class="line">       fis&#x3D;new FileInputStream(&quot;src\\com\\ggp\\first\\FileInputStreamDemo.java&quot;);</span><br><span class="line">       byte[]bbuf&#x3D;new byte[1024];</span><br><span class="line">       int hasRead&#x3D;0;</span><br><span class="line">       while((hasRead&#x3D;fis.read(bbuf))&gt;0)&#123;</span><br><span class="line">     </span><br><span class="line">       System.out.println(new String(bbuf,0,hasRead));</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       &#125;catch(IOException e)&#123;</span><br><span class="line">       e.printStackTrace();</span><br><span class="line">       &#125;finally&#123;</span><br><span class="line">       try &#123;</span><br><span class="line">            fis.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">            &#x2F;&#x2F; TODO Auto-generated catch block</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>如果{}中的代码块出现了异常，会被catch捕获，然后执行catch中的代码，接着执行finally中的码，其中catch中的代码有了异常才会被执行，finally中的代码无论有没有异常都会被执行，</p><p>而第一种情况的()中的代码一般放的是对资源的申请，如果{}中的代码出项了异常，（）中的资源就会被关闭，这在inputstream和outputstream的使用中会很方便例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">private static void customBufferStreamCopy(File source, File target) &#123;</span><br><span class="line">    try (InputStream fis &#x3D; new FileInputStream(source);</span><br><span class="line">        OutputStream fos &#x3D; new FileOutputStream(target))&#123;</span><br><span class="line">  </span><br><span class="line">        byte[] buf &#x3D; new byte[8192];</span><br><span class="line">  </span><br><span class="line">        int i;</span><br><span class="line">        while ((i &#x3D; fis.read(buf)) !&#x3D; -1) &#123;</span><br><span class="line">            fos.write(buf, 0, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从网上查阅资料得知从 Java 7 build 105 版本开始，Java 7 的编译器和运行环境支持新的 try-with-resources 语句，称为 ARM 块(Automatic Resource Management) ，自动资源管理。</p><p>The try-with-resources statement is a try statement that declares one or more resources. A resource is an object that must be closed after the program is finished with it. The try-with-resources statement ensures that each resource is closed at the end of the statement. Any object that implements java.lang.AutoCloseable, which includes all objects which implement java.io.Closeable, can be used as a resource.</p><p>带有resources的try语句声明一个或多个resources。resources是在程序结束后必须关闭的对象。try-with-resources语句确保在语句末尾关闭每个resources。<br><strong>任何实现java.lang.AutoCloseable,包括实现了java.io.Closeable的类，都可以作为resources使用。</strong></p><hr><p><strong>自定义AutoClosable 实现</strong></p><p>这个try-with-resources结构里不仅能够操作java内置的类。你也可以在自己的类中实现java.lang.AutoCloseable接口，然后在try-with-resources结构里使用这个类。</p><p>AutoClosable 接口仅仅有一个方法，接口定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public interface AutoClosable &#123;</span><br><span class="line"></span><br><span class="line">    public void close() throws Exception;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>任何实现了这个接口的方法都可以在try-with-resources结构中使用。下面是一个简单的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class MyAutoClosable implements AutoCloseable &#123;</span><br><span class="line"></span><br><span class="line">    public void doIt() &#123;</span><br><span class="line">        System.out.println(&quot;MyAutoClosable doing it!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public void close() throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;MyAutoClosable closed!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>doIt()是方法不是AutoClosable 接口中的一部分，之所以实现这个方法是因为我们想要这个类除了关闭方法外还能做点其他事。</p><p>下面是MyAutoClosable 在try-with-resources结构中使用的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private static void myAutoClosable() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">    try(MyAutoClosable myAutoClosable &#x3D; new MyAutoClosable())&#123;</span><br><span class="line"></span><br><span class="line">        myAutoClosable.doIt();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当方法myAutoClosable.doIt()被调用时，下面是打印到System.out的输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MyAutoClosable doing it!</span><br><span class="line"></span><br><span class="line">MyAutoClosable closed!</span><br></pre></td></tr></table></figure><p>通过上面这些你可以看到，不论try-catch中使用的资源是自己创造的还是java内置的类型，try-with-resources都是一个能够确保资源能被正确地关闭的强大方法。</p><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>1、<a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html#suppressed-exceptions">The try-with-resources Statement</a></p><h2 id="转载来自"><a href="#转载来自" class="headerlink" title="转载来自"></a>转载来自</h2><p>1、<a href="https://blog.csdn.net/qq_33543634/article/details/80725899">https://blog.csdn.net/qq_33543634/article/details/80725899</a><br>2、<a href="https://blog.csdn.net/bigtree_3721/article/details/50508985">https://blog.csdn.net/bigtree_3721/article/details/50508985</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>原生WebView长截图 和 Tencent x5webview截长图</title>
      <link href="2020/10/23/%E5%8E%9F%E7%94%9FWebView%E9%95%BF%E6%88%AA%E5%9B%BE-%E5%92%8C-Tencent-x5webview%E6%88%AA%E9%95%BF%E5%9B%BE/"/>
      <url>2020/10/23/%E5%8E%9F%E7%94%9FWebView%E9%95%BF%E6%88%AA%E5%9B%BE-%E5%92%8C-Tencent-x5webview%E6%88%AA%E9%95%BF%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p><strong>前言：</strong> 之前项目用的是原生webview，最近使用公司新框架使用的是x5的webview；正好有需求需要做长截图，踩坑之路开始。</p><hr><h2 id="1、原生WebView长截图"><a href="#1、原生WebView长截图" class="headerlink" title="1、原生WebView长截图"></a>1、原生WebView长截图</h2><p> Android5.0及以上版本，Android对WebView进行了优化，为了减少内存使用和提高性能，使用WebView加载网页时只绘制显示部分。如果我们不做处理，仍然使用上述代码截图的话，就会出现只截到屏幕内显示的WebView内容，其它部分是空白的情况。<br>这时候，我们通过调用WebView.enableSlowWholeDocumentDraw()方法可以关闭这种优化，但要注意的是，该方法需要在WebView实例被创建前就要调用，否则没有效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (Build.VERSION.SDK_INT &gt;&#x3D; Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class="line">        android.webkit.WebView.enableSlowWholeDocumentDraw();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">     * 原生WebView长截图</span><br><span class="line">     *</span><br><span class="line">     * @param webView</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static Bitmap getWebViewBtpBase64Str(WebView webView) &#123;</span><br><span class="line">        Bitmap bitmap &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class="line">                Picture snapShot &#x3D; webView.capturePicture();</span><br><span class="line">                bitmap &#x3D; Bitmap.createBitmap(snapShot.getWidth(), snapShot.getHeight(), Bitmap.Config.RGB_565);</span><br><span class="line">                Canvas canvas &#x3D; new Canvas(bitmap);</span><br><span class="line">                snapShot.draw(canvas);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                float scale &#x3D; webView.getScale();</span><br><span class="line">                &#x2F;&#x2F;得到缩放后webview内容的高度</span><br><span class="line">                int webViewHeight &#x3D; (int) (webView.getContentHeight() * scale);</span><br><span class="line">                bitmap &#x3D; Bitmap.createBitmap(webView.getWidth(), webViewHeight, Bitmap.Config.RGB_565);</span><br><span class="line">                Canvas canvas &#x3D; new Canvas(bitmap);</span><br><span class="line">                &#x2F;&#x2F;绘制</span><br><span class="line">                webView.draw(canvas);</span><br><span class="line">            &#125;</span><br><span class="line">            return bitmap;</span><br><span class="line">        &#125; catch (OutOfMemoryError e) &#123;</span><br><span class="line">            LogEx.e(&quot;ScreenUtils&quot;, e.getMessage(), e);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            LogEx.e(&quot;ScreenUtils&quot;, e.getMessage(), e);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;&quot;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2、Tencent-x5webview截长图"><a href="#2、Tencent-x5webview截长图" class="headerlink" title="2、Tencent x5webview截长图"></a>2、Tencent x5webview截长图</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">     * Tencent x5webview截长图</span><br><span class="line">     *</span><br><span class="line">     * @param webView</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static Bitmap getX5WebViewBtpBase64Str(WebView webView) &#123;</span><br><span class="line">        if (webView &#x3D;&#x3D; null) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        int wholeWidth &#x3D; webView.getContentWidth();</span><br><span class="line">        int wholeHeight &#x3D; webView.getContentHeight();</span><br><span class="line">        Bitmap x5bitmap &#x3D; Bitmap.createBitmap(wholeWidth, wholeHeight, Bitmap.Config.RGB_565);</span><br><span class="line">        Canvas x5canvas &#x3D; new Canvas(x5bitmap);</span><br><span class="line">&#x2F;&#x2F;        x5canvas.scale((float) wholeWidth &#x2F; (float) webView.getContentWidth(), (float) wholeHeight &#x2F; (float)webView.getContentHeight());</span><br><span class="line">        if (webView.getX5WebViewExtension() &#x3D;&#x3D; null) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        IX5WebViewExtension ix5WebViewExtension &#x3D; webView.getX5WebViewExtension();</span><br><span class="line">        ix5WebViewExtension.snapshotWholePage(x5canvas, false, false);</span><br><span class="line">        Bitmap bitmap &#x3D; Bitmap.createBitmap(x5bitmap);</span><br><span class="line">        return bitmap;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Android Webview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设置Android studio内存大小防止使用卡顿</title>
      <link href="2020/10/23/%E8%AE%BE%E7%BD%AEAndroid-studio%E5%86%85%E5%AD%98%E5%A4%A7%E5%B0%8F%E9%98%B2%E6%AD%A2%E4%BD%BF%E7%94%A8%E5%8D%A1%E9%A1%BF/"/>
      <url>2020/10/23/%E8%AE%BE%E7%BD%AEAndroid-studio%E5%86%85%E5%AD%98%E5%A4%A7%E5%B0%8F%E9%98%B2%E6%AD%A2%E4%BD%BF%E7%94%A8%E5%8D%A1%E9%A1%BF/</url>
      
        <content type="html"><![CDATA[<p><strong>前言：</strong> 最近开发中发现AS越来越卡，尤其使用CPU Profiler时直接卡死，顿时才想起来自己使用的是重新下载的最新版4.0.1的AS，并没有对其内存设置大小=。=</p><p><strong>操作：</strong></p><ul><li><strong>在AS的安装目录bin目录下找到studio64.exe.vmoptions文件；</strong></li></ul><p><img src="https://img-blog.csdnimg.cn/20200723163604472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><p><strong>设置JVM参数</strong></p></li><li><p>Xms    JVM启动的起始堆内存，堆内存是分配给对象的内存。</p><p>  -Xmx    AndroidStudio能使用的最大heap内存</p><p>  -XX:ReservedCodeCacheSize   设置JIT java compiler在compile的时候的最大代码缓存</p><p>  -XX:+UseCompressedOops     这个参数允许系统将代码里面的引用(reference)类型用32位存储，同时却能够让引用能够使用64位的内存大小。</p><p>  -XX:SoftRefLRUPolicyMSPerMB  每兆堆空闲空间中SoftReference的存活时间(ms),越小越好<br><img src="https://img-blog.csdnimg.cn/20200723163943352.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p><strong>打开AS，打开Setting，选中Appearance，勾选Show memory indicator；就可以在AS的右下角看到内存实际使用情况；</strong></p></li></ul><p><img src="https://img-blog.csdnimg.cn/20200723164213219.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Android Studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android studio菜单栏被隐藏解决方案</title>
      <link href="2020/10/23/Android-studio%E8%8F%9C%E5%8D%95%E6%A0%8F%E8%A2%AB%E9%9A%90%E8%97%8F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>2020/10/23/Android-studio%E8%8F%9C%E5%8D%95%E6%A0%8F%E8%A2%AB%E9%9A%90%E8%97%8F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>今天使用android studio 开发项目，在想打开一个新的项目时，发现自己的File菜单栏不见了？？？一顿莫名其妙，不知道自己啥时候无意间点了什么快捷键把菜单栏隐藏了。</p><p><strong>问题：android studio菜单栏被隐藏</strong><br><strong>现象：</strong><br><img src="https://img-blog.csdnimg.cn/20200723153612771.png" alt="File去哪啦？"><br><strong>解决：</strong></p><ol><li>点击右边【搜索】按钮；</li><li>输入搜索【Main menu】，下面就会出现View|Appearance：Main Menu一栏；</li><li>把右侧【OFF】切换到【ON】就ok了。<br><img src="https://img-blog.csdnimg.cn/20200723153919471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmdsb2xv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ol><p>总结：不要手贱啊！！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android Studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android fragment 4种切换方式及对应的生命周期步骤</title>
      <link href="2020/10/23/Android-fragment-4%E7%A7%8D%E5%88%87%E6%8D%A2%E6%96%B9%E5%BC%8F%E5%8F%8A%E5%AF%B9%E5%BA%94%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%AD%A5%E9%AA%A4/"/>
      <url>2020/10/23/Android-fragment-4%E7%A7%8D%E5%88%87%E6%8D%A2%E6%96%B9%E5%BC%8F%E5%8F%8A%E5%AF%B9%E5%BA%94%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%AD%A5%E9%AA%A4/</url>
      
        <content type="html"><![CDATA[<p>最近做项目使用到fragment切换，要求切换时对fragment页面进行刷新操作。</p><p>由于使用的是公司封装好的框架（暂无法改动），框架使用的是add hidden show的方式进行fragment切换，而这种方式切换fragment是不会重新走fragment的生命周期的，导致页面无法刷新。。。于是决定对fragment使用进行学习下</p><h2 id="Fragment-1-切换到-Fragment-2时生命周期变化"><a href="#Fragment-1-切换到-Fragment-2时生命周期变化" class="headerlink" title="Fragment 1 切换到 Fragment 2时生命周期变化"></a>Fragment 1 切换到 Fragment 2时生命周期变化</h2><p><strong>1、通过 add hide show 方式来切换 Fragment</strong></p><ul><li>Fragment1 的生命周期变化为：onCreate（）、onCreateView、onStart（）、onResume（） 回调<br>onHiddenChanged（） 方法</li><li>Fragment2 的生命周期变化为： onCreate（）、onCreateView、onStart（）、onResume（）</li><li>Fragment 2 再次返回到 Fragment 1：不走任何生命周期方法但是回调 onHiddenChanged（）方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">   public void onHiddenChanged(boolean hidden) &#123;</span><br><span class="line">       super.onHiddenChanged(hidden);</span><br><span class="line">       if (hidden) &#123;</span><br><span class="line">&#x2F;&#x2F;隐藏时所作的事情</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           &#x2F;&#x2F;显示时所作的事情</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>boolean的值代表是否隐藏，当切换到当前fragment时hidden为false，切换到别到fragment时hidden为true。<br>fragment的“显示”“隐藏”监听就这么简单。</p><p><strong>总结：当以这种方式进行 Fragment 1 与 Fragment 2 的切换时，Fragment 隐藏的时候并不走 onDestroyView，所有的显示也不会走 onCreateView 方法，所有的 view 都会保存在内存</strong></p><hr><p><strong>2、使用 replace 的方法进行切换时</strong></p><ul><li><p>载入Fragment 1时：<br>Fragment1的生命周期：onCreate（）、onCreateView（）、onStart（）、onResume（）</p></li><li><p>切换到Fragment2时：<br>Fragment1的生命周期：onPause（）、onStop()、onDestroyView（）、onDestroy（）</p><p> Fragment 2的生命周期：onCreate（）、onCreateV（）、onStart（）、onResume（）</p></li><li><p>Fragment 2切换回Fragment 1时：<br>Fragment2的生命周期：onPause（）、onStop()、onDestroyView（）、onDestroy（）</p><p> Fragment 1的生命周期：onCreate（）、onCreateV（）、onStart（）、onResume（）</p></li></ul><p><strong>总结：通过 replace 方法进行替换的时，Fragment 都是进行了销毁，重建的过程，相当于走了一整套的生命周期</strong></p><hr><p><strong>3、使用 ViewPager 进行切换时</strong></p><p>当使用 ViewPager 与 Fragment 进行切换时，Fragment 会进行预加载操作</p><p>所有的 Fragment 都会提前初始—&gt;预加载；</p><p>初始化时 Fragment 们的生命周期：</p><p>Fragment 1 的生命周期：onCreate（）、onCreateView（）<br>Fragment 2 的生命周期：onCreate（）、 onCreateView（）</p><p>Fragment 1 切换到 Fragment 2 的生命周期：</p><p>Fragment 1 ：不走任何生命周期；<br>Fragment 2 ：走 setUserVisVleHint（）方法</p><p>切回去也是一样的</p><p><strong>注意： setUserVisVleHint（）方法在 Fragment 1 第一次加载的时候不走，只有在切换的时候 走该方法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">*第一个 Fragment 需要处理  setUserVisVleHint（）方法，设置为 setUserVisibleHint(true);</span><br><span class="line">*否则会产空指针异常，因为 setUserVisVleHint（）方法的优先级高于 onCreate（）方法。</span><br><span class="line">*</span><br><span class="line">* @param savedInstanceState</span><br><span class="line">*&#x2F;</span><br><span class="line">@Override</span><br><span class="line">public void onActivityCreated(Bundle savedInstanceState) &#123;</span><br><span class="line">    setUserVisibleHint(true);</span><br><span class="line">    super.onActivityCreated(savedInstanceState);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">主动调用 setUserVisibleHint（）方法来控制第一次不会调用setUserVisibleHint方法的问题。</span><br><span class="line">setUserVisibleHint（）方法优先onCreateView方法，当onCreateView方法调用后还会再次调用setUserVisibleHint方法。</span><br><span class="line">此时要对是否调用了onCreateView（）方法进行标记判断。</span><br><span class="line"> </span><br><span class="line">作者：吾乃韩小呆</span><br><span class="line">链接：https:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;c8f34229b6dc</span><br><span class="line">來源：简书</span><br><span class="line">简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 标志位，标志已经初始化完成</span><br><span class="line"> *&#x2F;</span><br><span class="line">private boolean isPrepared;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">public void onActivityCreated(Bundle savedInstanceState) &#123;</span><br><span class="line">    &#x2F;&#x2F; 配置setUserVisibleHint（）方法</span><br><span class="line">    setUserVisibleHint(true);</span><br><span class="line">    super.onActivityCreated(savedInstanceState);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &#123;</span><br><span class="line">    View view &#x3D; LayoutInflater.from(getActivity()).inflate(R.layout.fragment_a, container, false);</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F;已经初始化</span><br><span class="line">    isPrepared &#x3D; true;</span><br><span class="line">    return view;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">public void setUserVisibleHint(boolean isVisibleToUser) &#123;</span><br><span class="line">    super.setUserVisibleHint(isVisibleToUser);</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F;可见的并且是初始化之后才加载</span><br><span class="line">    if (isPrepared &amp;&amp; isVisibleToUser) &#123;</span><br><span class="line"> </span><br><span class="line">         getList（）；</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">作者：吾乃韩小呆</span><br><span class="line">链接：https:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;c8f34229b6dc</span><br><span class="line">來源：简书</span><br><span class="line">简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</span><br></pre></td></tr></table></figure><hr><p><strong>4.attach和detach切换</strong></p><p>方法和show  hide一样，只是把show改为attach，把hide改为detach</p><p>从Fragment 1切换到Fragment 2的时候，</p><p>Fragment 1调用detach()方法，onPause()-&gt;onStop()-&gt;onDestroyView();      </p><p>Fragment 2 调用attach()方法，onCreateView()-&gt;onActivityCreated()-&gt;onStart()-&gt;onResume()</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android命令行装包：卸载之前的包再重新安装新包</title>
      <link href="2020/10/23/Android%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%A3%85%E5%8C%85%EF%BC%9A%E5%8D%B8%E8%BD%BD%E4%B9%8B%E5%89%8D%E7%9A%84%E5%8C%85%E5%86%8D%E9%87%8D%E6%96%B0%E5%AE%89%E8%A3%85%E6%96%B0%E5%8C%85/"/>
      <url>2020/10/23/Android%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%A3%85%E5%8C%85%EF%BC%9A%E5%8D%B8%E8%BD%BD%E4%B9%8B%E5%89%8D%E7%9A%84%E5%8C%85%E5%86%8D%E9%87%8D%E6%96%B0%E5%AE%89%E8%A3%85%E6%96%B0%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p><strong>Android命令行装包：卸载之前的包再重新安装新包</strong></p><p>最近遇到早部分厂商手机（华为、小米、oppo、vivo等）中出现覆盖安装包无法安装现象，具体报错为：*<strong>系统已存在**<em>包名的包，请卸载后在安装。</em></strong><br>然而明明已经是卸载了，还是一直报错无法安装成功，很让人头疼。</p><p> adb uninstall “包名”<br> Success<br> adb install -r “新包的路径”.apk</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android scrollview里面放listview 滚动出现的问题：listview展示不全</title>
      <link href="2020/10/23/Android-scrollview%E9%87%8C%E9%9D%A2%E6%94%BElistview-%E6%BB%9A%E5%8A%A8%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%9Alistview%E5%B1%95%E7%A4%BA%E4%B8%8D%E5%85%A8/"/>
      <url>2020/10/23/Android-scrollview%E9%87%8C%E9%9D%A2%E6%94%BElistview-%E6%BB%9A%E5%8A%A8%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%9Alistview%E5%B1%95%E7%A4%BA%E4%B8%8D%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>问题</strong>：<br>scrollview中加LinearLayout，然后在LinearLayout中又加了listview；导致listview展示不全，只展示出一条数据。</p><p><strong>解决</strong>：<br>先写一个工具类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package com.android.fmis.client.util;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import android.view.View;</span><br><span class="line">import android.view.ViewGroup;</span><br><span class="line">import android.widget.ListAdapter;</span><br><span class="line">import android.widget.ListView;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class ListHeightUtils &#123;</span><br><span class="line"> public static void setListViewHeightBasedOnChildren(ListView listView) &#123; </span><br><span class="line">          ListAdapter listAdapter &#x3D; listView.getAdapter(); </span><br><span class="line">          if (listAdapter &#x3D;&#x3D; null) &#123; </span><br><span class="line">                  &#x2F;&#x2F; pre-condition </span><br><span class="line">                  return; </span><br><span class="line">          &#125; </span><br><span class="line">          int totalHeight &#x3D; 0; </span><br><span class="line">          for (int i &#x3D; 0; i &lt; listAdapter.getCount(); i++) &#123; </span><br><span class="line">                  View listItem &#x3D; listAdapter.getView(i, null, listView); </span><br><span class="line">                  listItem.measure(0, 0); </span><br><span class="line">                  totalHeight +&#x3D; listItem.getMeasuredHeight(); </span><br><span class="line">          &#125; </span><br><span class="line">          ViewGroup.LayoutParams params &#x3D; listView.getLayoutParams(); </span><br><span class="line">          params.height &#x3D; totalHeight + (listView.getDividerHeight() * (listAdapter.getCount() - 1)); </span><br><span class="line">          listView.setLayoutParams(params); </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在listview设置了adapter填充数据后调用此方法，重新设置一下listview的高度，就搞定了。</p><p><strong>于此同时会产生一些问题</strong></p><p>问题1：scrollview界面出来不是显示的最顶端【滚动条不是在最顶端】，   那么请在  listview填充后  这样设置</p><p>ScrollView s=(ScrollView)findViewById(R.id.scrollview1);<br>s.smoothScrollTo(0, 20);</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 监听应用「进入后台」「回到前台」的几种方式整理</title>
      <link href="2020/10/23/Android-%E7%9B%91%E5%90%AC%E5%BA%94%E7%94%A8%E3%80%8C%E8%BF%9B%E5%85%A5%E5%90%8E%E5%8F%B0%E3%80%8D%E3%80%8C%E5%9B%9E%E5%88%B0%E5%89%8D%E5%8F%B0%E3%80%8D%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%E6%95%B4%E7%90%86/"/>
      <url>2020/10/23/Android-%E7%9B%91%E5%90%AC%E5%BA%94%E7%94%A8%E3%80%8C%E8%BF%9B%E5%85%A5%E5%90%8E%E5%8F%B0%E3%80%8D%E3%80%8C%E5%9B%9E%E5%88%B0%E5%89%8D%E5%8F%B0%E3%80%8D%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><strong>需求</strong></p><blockquote><p>最近接到一个新的需求：用户把app切换到后台，再次切回到app界面的时候会被要求重新输入登陆密码，这一需求的设计主要是出于安全性考虑。</p></blockquote><blockquote><p>这里就需要监听app的状态，从而判断app当前处于前台还是后台，再对其做不同的逻辑处理即可。</p></blockquote><p><strong>方案一：利用ActivityLifecycleCallbacks监听所有activity的生命周期</strong></p><blockquote><p>解释下registerActivityLifecycleCallbacks这个方法，只要app中有一个activity的生命周期改变了就会调用registerActivityLifecycleCallbacks的相应方法.<br>比如说splashActivity走了onCreate方法，registerActivityLifecycleCallbacks的onActivityCreated也会被调用，括号中的参数activity就是splashActivity本身</p></blockquote><p>1.在application中注册监听方法，一般写在onCreate方法中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">private int countActivity = 0;</span><br><span class="line">//是否进入后台</span><br><span class="line">private boolean isBackground = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">    public void <span class="function"><span class="title">onCreate</span></span>() &#123;</span><br><span class="line">        super.onCreate();</span><br><span class="line">        //监听应用进入后台回到前台</span><br><span class="line">        initBackgroundCallBack();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>2.实现监听方法：具体实现onActivityStarted,onActivityStopped方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">private void <span class="function"><span class="title">initBackgroundCallBack</span></span>() &#123;</span><br><span class="line">        registerActivityLifecycleCallbacks(new <span class="function"><span class="title">ActivityLifecycleCallbacks</span></span>() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onActivityCreated(Activity activity, Bundle bundle) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onActivityStarted(Activity activity) &#123;</span><br><span class="line">                countActivity++;</span><br><span class="line">                <span class="keyword">if</span> (countActivity == 1 &amp;&amp; isBackground) &#123;</span><br><span class="line">                    Log.e(<span class="string">&quot;MyApplication&quot;</span>, <span class="string">&quot;onActivityStarted: 应用进入前台&quot;</span>);</span><br><span class="line">                    isBackground = <span class="literal">false</span>;</span><br><span class="line">                    //说明应用重新进入了前台</span><br><span class="line">                    Toast.makeText(MyApplication.this, <span class="string">&quot;应用进入前台&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onActivityResumed(Activity activity) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onActivityPaused(Activity activity) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onActivityStopped(Activity activity) &#123;</span><br><span class="line">                countActivity--;</span><br><span class="line">                <span class="keyword">if</span> (countActivity &lt;= 0 &amp;&amp; !isBackground) &#123;</span><br><span class="line">                    Log.e(<span class="string">&quot;MyApplication&quot;</span>, <span class="string">&quot;onActivityStarted: 应用进入后台&quot;</span>);</span><br><span class="line">                    isBackground = <span class="literal">true</span>;</span><br><span class="line">                    //说明应用进入了后台</span><br><span class="line">                    Toast.makeText(MyApplication.this, <span class="string">&quot;应用进入后台&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onActivitySaveInstanceState(Activity activity, Bundle bundle) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onActivityDestroyed(Activity activity) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>countActivity 是为了判断应用是否进入后台，当一个activity的调用onStart方法时countActivity就会+1，调用onStop方法时countActivity就会-1<br>当所有activity的countActivity都=0时，说明所有的activity都在后台，即整个应用都处于后台</p></blockquote><blockquote><p>isBackground 是为了判断应用是否在后台，如果应用在后台又被调用了onActivityStarted方法，说明应用从后台回到前台</p></blockquote><hr><p><strong>方案二：利用ActivityManager的RunningAppProcessInfo类</strong></p><blockquote><p>ActivityManager在整个系统里面起着非常重要的作用，主要为系统中运行着的activity交互提供接口，其中RunningAppProcessInfo类则封装了正在运行着的进程信息，当然也包含了正在运行的app的包名，因此我们可以activitymanager.getRunningAppProcesses()获取当前运行的app列表，对比自身的包名，来判断本身app是否处于前台运行。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * App前后台状态</span><br><span class="line">    */</span><br><span class="line">   public boolean isForeground = <span class="literal">false</span>;</span><br><span class="line">   </span><br><span class="line">   @Override</span><br><span class="line">   protected void <span class="function"><span class="title">onResume</span></span>() &#123;</span><br><span class="line">       ......</span><br><span class="line">       <span class="keyword">if</span> (isForeground == <span class="literal">false</span>) &#123;</span><br><span class="line">           //由后台切换到前台</span><br><span class="line">           isForeground = <span class="literal">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   protected void <span class="function"><span class="title">onPause</span></span>() &#123;</span><br><span class="line">       ......</span><br><span class="line">       <span class="keyword">if</span> (!isAppOnForeground()) &#123;</span><br><span class="line">           //由前台切换到后台</span><br><span class="line">           isForeground = <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   /**</span><br><span class="line">    * 判断app是否处于前台</span><br><span class="line">    *</span><br><span class="line">    * @<span class="built_in">return</span></span><br><span class="line">    */</span><br><span class="line">   public boolean <span class="function"><span class="title">isAppOnForeground</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">       ActivityManager activityManager = (ActivityManager) getApplicationContext()</span><br><span class="line">               .getSystemService(Context.ACTIVITY_SERVICE);</span><br><span class="line">       String packageName = getApplicationContext().getPackageName();</span><br><span class="line">       /**</span><br><span class="line">        * 获取Android设备中所有正在运行的App</span><br><span class="line">        */</span><br><span class="line">       List&lt;RunningAppProcessInfo&gt; appProcesses = activityManager</span><br><span class="line">               .getRunningAppProcesses();</span><br><span class="line">       <span class="keyword">if</span> (appProcesses == null)</span><br><span class="line">           <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (RunningAppProcessInfo appProcess : appProcesses) &#123;</span><br><span class="line">           // The name of the process that this object is associated with.</span><br><span class="line">           <span class="keyword">if</span> (appProcess.processName.equals(packageName)</span><br><span class="line">                   &amp;&amp; appProcess.importance == RunningAppProcessInfo.IMPORTANCE_FOREGROUND) &#123;</span><br><span class="line">               <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过ActivityManager来获取当前运行的app列表，然后判断我们的app是否处于前台，能基本达到我们的预期需求。但如果将上面代码放到每一个activity，或者activity基类里面，这消耗还是挺大的。而且而且，ActivityManager通过.getRunningAppProcesses()获取当前运行列表这个方法，在5.0以后已经被deprecated掉了</p></blockquote><hr><p><strong>参考文献</strong></p><p>1.<a href="https://www.cnblogs.com/zhujiabin/p/9336663.html">Android 监听APP进入后台或切换到前台方案对比</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android自定义permission android:protectionLevel介绍</title>
      <link href="2020/10/23/Android%E8%87%AA%E5%AE%9A%E4%B9%89permission-android-protectionLevel%E4%BB%8B%E7%BB%8D/"/>
      <url>2020/10/23/Android%E8%87%AA%E5%AE%9A%E4%B9%89permission-android-protectionLevel%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p><strong>Android protectionLevel分4个级别：</strong></p><ul><li>normal</li><li>dangerous</li><li>signature</li><li>signatureOrSystem</li></ul><blockquote><p>如果定义的是normal或者dangerous：我们自己的应用需要去访问其对应受保护的资源时只需要在androidManifest.xml中<strong>添加相同的权限uses-permission</strong></p></blockquote><blockquote><p>如果是signature：不仅需要<strong>添加相同的权限</strong>， 必须同时<strong>具有相同的签名</strong>。</p></blockquote><blockquote><p>如果是signatureOrSystem（这种权限的应用第三方的应用无法单独访问）：不仅要有<strong>相同的签名</strong>，而且签名必须是<strong>系统签名</strong>，此外可能还需要android:sharedUserId=”android.uid.system”。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> android:protectionLevel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android四大组件：BroadcastReceiver</title>
      <link href="2020/10/23/Android%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%EF%BC%9ABroadcastReceiver/"/>
      <url>2020/10/23/Android%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%EF%BC%9ABroadcastReceiver/</url>
      
        <content type="html"><![CDATA[<p><strong>1. 定义</strong></p><blockquote><p>BroadcastReceiver即 广播，是一个全局的监听器，属于Android四大组件之一<br>广播分为两个角色：广播发送者、广播接收者</p></blockquote><p><strong>2. 作用</strong></p><blockquote><p>监听 / 接收 应用 App 发出的广播消息，并 做出响应</p></blockquote><p><strong>3. 应用场景</strong></p><blockquote><ul><li>Android不同组件间的通信（含 ：应用内 / 不同应用之间）</li><li>多线程通信</li><li>与 Android 系统在特定情况下的通信（如：电话呼入时、网络可用时）</li></ul></blockquote><p><strong>4. 实现原理</strong></p><p><img src="https://img-blog.csdnimg.cn/20201020195205200.png#pic_center" alt="在这里插入图片描述"></p><p>​—</p><p><strong>5. 使用流程</strong></p><p><strong>5.1 自定义广播接收者BroadcastReceiver</strong></p><ul><li>继承BroadcastReceivre基类</li><li>必须复写抽象方法onReceive()方法</li></ul><blockquote><p>1.广播接收器接收到相应广播后，会自动回调 onReceive() 方法<br>2.一般情况下，onReceive方法会涉及 与 其他组件之间的交互，如发送Notification、启动Service等<br>3.默认情况下，广播接收器运行在 UI 线程，因此，onReceive()方法不能执行耗时操作，否则将导致ANR</p></blockquote><ul><li>代码范例</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承BroadcastReceivre基类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mBroadcastReceiver</span> <span class="title">extends</span> <span class="title">BroadcastReceiver</span> &#123;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 复写onReceive()方法</span></span><br><span class="line">  <span class="comment">// 接收到广播后，则自动调用该方法</span></span><br><span class="line">  @Override</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//写入接收广播后的操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>5.2 广播接收器注册</strong></p><p>注册的方式分为两种：<strong>静态注册</strong>、<strong>动态注册</strong></p><p><strong>5.2.1 静态注册</strong></p><ul><li>注册方式：在AndroidManifest.xml里通过<receive>标签声明</li><li>属性说明：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;receiver </span><br><span class="line">    android:enabled=[<span class="string">&quot;true&quot;</span> | <span class="string">&quot;false&quot;</span>]</span><br><span class="line"><span class="comment">//此broadcastReceiver能否接收其他App的发出的广播</span></span><br><span class="line"><span class="comment">//默认值是由receiver中有无intent-filter决定的：如果有intent-filter，默认值为true，否则为false</span></span><br><span class="line">    android:exported=[<span class="string">&quot;true&quot;</span> | <span class="string">&quot;false&quot;</span>]</span><br><span class="line">    android:icon=<span class="string">&quot;drawable resource&quot;</span></span><br><span class="line">    android:label=<span class="string">&quot;string resource&quot;</span></span><br><span class="line"><span class="comment">//继承BroadcastReceiver子类的类名</span></span><br><span class="line">    android:name=<span class="string">&quot;.mBroadcastReceiver&quot;</span></span><br><span class="line"><span class="comment">//具有相应权限的广播发送者发送的广播才能被此BroadcastReceiver所接收；</span></span><br><span class="line">    android:permission=<span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="comment">//BroadcastReceiver运行所处的进程</span></span><br><span class="line"><span class="comment">//默认为app的进程，可以指定独立的进程</span></span><br><span class="line"><span class="comment">//注：Android四大基本组件都可以通过此属性指定自己的独立进程</span></span><br><span class="line">    android:process=<span class="string">&quot;string&quot;</span> &gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于指定此广播接收器将接收的广播类型</span></span><br><span class="line"><span class="comment">//本示例中给出的是用于接收网络状态改变时发出的广播</span></span><br><span class="line"> &lt;intent-filter&gt;</span><br><span class="line">&lt;action android:name=<span class="string">&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;</span> /&gt;</span><br><span class="line">    &lt;/intent-filter&gt;</span><br><span class="line">&lt;/receiver&gt;</span><br></pre></td></tr></table></figure><ul><li>注册示例</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;receiver </span><br><span class="line">    <span class="comment">//此广播接收者类是mBroadcastReceiver</span></span><br><span class="line">    android:name=<span class="string">&quot;.mBroadcastReceiver&quot;</span> &gt;</span><br><span class="line">    <span class="comment">//用于接收网络状态改变时发出的广播</span></span><br><span class="line">    &lt;intent-filter&gt;</span><br><span class="line">        &lt;action android:name=<span class="string">&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;</span> /&gt;</span><br><span class="line">    &lt;/intent-filter&gt;</span><br><span class="line">&lt;/receiver&gt;</span><br></pre></td></tr></table></figure><p>当此 App首次启动时，系统会自动实例化mBroadcastReceiver类，并注册到系统中。</p><p><strong>5.2.2 动态注册</strong></p><ul><li>注册方式：在代码中调用Context.registerReceiver（）方法</li><li>具体代码如下：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 选择在Activity生命周期方法中的onResume()中注册</span></span><br><span class="line">@Override</span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span></span>&#123;</span><br><span class="line">      super.onResume();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 实例化BroadcastReceiver子类 &amp;  IntentFilter</span></span><br><span class="line">     mBroadcastReceiver mBroadcastReceiver = <span class="keyword">new</span> mBroadcastReceiver();</span><br><span class="line">     IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 设置接收广播的类型</span></span><br><span class="line">    intentFilter.addAction(android.net.conn.CONNECTIVITY_CHANGE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 动态注册：调用Context的registerReceiver（）方法</span></span><br><span class="line">     registerReceiver(mBroadcastReceiver, intentFilter);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册广播后，要在相应位置记得销毁广播</span></span><br><span class="line"><span class="comment">// 即在onPause() 中unregisterReceiver(mBroadcastReceiver)</span></span><br><span class="line"><span class="comment">// 当此Activity实例化时，会动态将MyBroadcastReceiver注册到系统中</span></span><br><span class="line"><span class="comment">// 当此Activity销毁时，动态注册的MyBroadcastReceiver将不再接收到相应的广播。</span></span><br><span class="line"> @Override</span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     super.onPause();</span><br><span class="line">      <span class="comment">//销毁在onResume()方法中的广播</span></span><br><span class="line">     unregisterReceiver(mBroadcastReceiver);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特别注意</strong></p><ul><li>动态广播最好在Activity 的 onResume()注册、onPause()注销。</li><li>对于动态广播，有注册就必然得有注销，否则会导致内存泄露。</li></ul><p><strong>5.2.3 两种注册方式的区别</strong></p><p><img src="https://img-blog.csdnimg.cn/20201020200118345.png#pic_center" alt="在这里插入图片描述"><br><strong>5.3 广播发送者向AMS发送广播</strong></p><p><strong>5.3.1 广播的发送</strong></p><blockquote><ul><li>广播 是 用”意图（Intent）“标识</li><li>定义广播的本质 = 定义广播所具备的“意图（Intent）”</li><li>广播发送 = 广播发送者 将此广播的“意图（Intent）”通过sendBroadcast（）方法发送出去</li></ul></blockquote><p><strong>5.3.2 广播的类型</strong></p><blockquote><p>广播的类型主要分为5类：</p><ul><li>普通广播（Normal Broadcast）</li><li>系统广播（System Broadcast）</li><li>有序广播（Ordered Broadcast）</li><li>粘性广播（Sticky Broadcast）</li><li>App应用内广播（Local Broadcast）</li></ul></blockquote><p><strong>1. 普通广播（Normal Broadcast）</strong></p><p>即 开发者自身定义 intent的广播（最常用）。发送广播使用如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line"><span class="comment">//对应BroadcastReceiver中intentFilter的action</span></span><br><span class="line">intent.setAction(BROADCAST_ACTION);</span><br><span class="line"><span class="comment">//发送广播</span></span><br><span class="line">sendBroadcast(intent);</span><br></pre></td></tr></table></figure><ul><li>若被注册了的广播接收者中注册时intentFilter的action与上述匹配，则会接收此广播（即进行回调onReceive()）。如下mBroadcastReceiver则会接收上述广播</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;receiver </span><br><span class="line">    <span class="comment">//此广播接收者类是mBroadcastReceiver</span></span><br><span class="line">    android:name=<span class="string">&quot;.mBroadcastReceiver&quot;</span> &gt;</span><br><span class="line">    <span class="comment">//用于接收网络状态改变时发出的广播</span></span><br><span class="line">    &lt;intent-filter&gt;</span><br><span class="line">        &lt;action android:name=<span class="string">&quot;BROADCAST_ACTION&quot;</span> /&gt;</span><br><span class="line">    &lt;/intent-filter&gt;</span><br><span class="line">&lt;/receiver&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>若发送广播有相应权限，那么广播接收者也需要相应权限</strong></li></ul><p>​</p><p><strong>2. 系统广播（System Broadcast）</strong></p><p><strong>3.有序广播（Ordered Broadcast）</strong></p><p><strong>4.App应用内广播（Local Broadcast）</strong></p><hr><p><strong>2.3.4.类型的广播用法详见：</strong></p><p> <a href="https://www.jianshu.com/p/ca3d87a4cdf3">Android四大组件：BroadcastReceiver史上最全面解析</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/10/22/hello-world/"/>
      <url>2020/10/22/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
